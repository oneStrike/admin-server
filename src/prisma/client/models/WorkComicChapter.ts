
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WorkComicChapter` model and its related types.
 *
 * 🟢 You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WorkComicChapter
 * 
 */
export type WorkComicChapterModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkComicChapterPayload>

export type AggregateWorkComicChapter = {
  _count: WorkComicChapterCountAggregateOutputType | null
  _avg: WorkComicChapterAvgAggregateOutputType | null
  _sum: WorkComicChapterSumAggregateOutputType | null
  _min: WorkComicChapterMinAggregateOutputType | null
  _max: WorkComicChapterMaxAggregateOutputType | null
}

export type WorkComicChapterAvgAggregateOutputType = {
  id: number | null
  comicId: number | null
  versionId: number | null
  chapterNumber: number | null
  readRule: number | null
  purchaseAmount: number | null
  viewCount: number | null
  likeCount: number | null
  commentCount: number | null
}

export type WorkComicChapterSumAggregateOutputType = {
  id: number | null
  comicId: number | null
  versionId: number | null
  chapterNumber: number | null
  readRule: number | null
  purchaseAmount: number | null
  viewCount: number | null
  likeCount: number | null
  commentCount: number | null
}

export type WorkComicChapterMinAggregateOutputType = {
  id: number | null
  title: string | null
  subtitle: string | null
  isPublished: boolean | null
  comicId: number | null
  versionId: number | null
  chapterNumber: number | null
  readRule: number | null
  purchaseAmount: number | null
  contents: string | null
  isPreview: boolean | null
  publishAt: Date | null
  viewCount: number | null
  likeCount: number | null
  commentCount: number | null
  remark: string | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type WorkComicChapterMaxAggregateOutputType = {
  id: number | null
  title: string | null
  subtitle: string | null
  isPublished: boolean | null
  comicId: number | null
  versionId: number | null
  chapterNumber: number | null
  readRule: number | null
  purchaseAmount: number | null
  contents: string | null
  isPreview: boolean | null
  publishAt: Date | null
  viewCount: number | null
  likeCount: number | null
  commentCount: number | null
  remark: string | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type WorkComicChapterCountAggregateOutputType = {
  id: number
  title: number
  subtitle: number
  isPublished: number
  comicId: number
  versionId: number
  chapterNumber: number
  readRule: number
  purchaseAmount: number
  contents: number
  isPreview: number
  publishAt: number
  viewCount: number
  likeCount: number
  commentCount: number
  remark: number
  createdAt: number
  updatedAt: number
  deletedAt: number
  _all: number
}


export type WorkComicChapterAvgAggregateInputType = {
  id?: true
  comicId?: true
  versionId?: true
  chapterNumber?: true
  readRule?: true
  purchaseAmount?: true
  viewCount?: true
  likeCount?: true
  commentCount?: true
}

export type WorkComicChapterSumAggregateInputType = {
  id?: true
  comicId?: true
  versionId?: true
  chapterNumber?: true
  readRule?: true
  purchaseAmount?: true
  viewCount?: true
  likeCount?: true
  commentCount?: true
}

export type WorkComicChapterMinAggregateInputType = {
  id?: true
  title?: true
  subtitle?: true
  isPublished?: true
  comicId?: true
  versionId?: true
  chapterNumber?: true
  readRule?: true
  purchaseAmount?: true
  contents?: true
  isPreview?: true
  publishAt?: true
  viewCount?: true
  likeCount?: true
  commentCount?: true
  remark?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type WorkComicChapterMaxAggregateInputType = {
  id?: true
  title?: true
  subtitle?: true
  isPublished?: true
  comicId?: true
  versionId?: true
  chapterNumber?: true
  readRule?: true
  purchaseAmount?: true
  contents?: true
  isPreview?: true
  publishAt?: true
  viewCount?: true
  likeCount?: true
  commentCount?: true
  remark?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type WorkComicChapterCountAggregateInputType = {
  id?: true
  title?: true
  subtitle?: true
  isPublished?: true
  comicId?: true
  versionId?: true
  chapterNumber?: true
  readRule?: true
  purchaseAmount?: true
  contents?: true
  isPreview?: true
  publishAt?: true
  viewCount?: true
  likeCount?: true
  commentCount?: true
  remark?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  _all?: true
}

export type WorkComicChapterAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkComicChapter to aggregate.
   */
  where?: Prisma.WorkComicChapterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkComicChapters to fetch.
   */
  orderBy?: Prisma.WorkComicChapterOrderByWithRelationInput | Prisma.WorkComicChapterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkComicChapterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` WorkComicChapters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkComicChapters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkComicChapters
  **/
  _count?: true | WorkComicChapterCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkComicChapterAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkComicChapterSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkComicChapterMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkComicChapterMaxAggregateInputType
}

export type GetWorkComicChapterAggregateType<T extends WorkComicChapterAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkComicChapter]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkComicChapter[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkComicChapter[P]>
}




export type WorkComicChapterGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkComicChapterWhereInput
  orderBy?: Prisma.WorkComicChapterOrderByWithAggregationInput | Prisma.WorkComicChapterOrderByWithAggregationInput[]
  by: Prisma.WorkComicChapterScalarFieldEnum[] | Prisma.WorkComicChapterScalarFieldEnum
  having?: Prisma.WorkComicChapterScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkComicChapterCountAggregateInputType | true
  _avg?: WorkComicChapterAvgAggregateInputType
  _sum?: WorkComicChapterSumAggregateInputType
  _min?: WorkComicChapterMinAggregateInputType
  _max?: WorkComicChapterMaxAggregateInputType
}

export type WorkComicChapterGroupByOutputType = {
  id: number
  title: string
  subtitle: string | null
  isPublished: boolean
  comicId: number
  versionId: number | null
  chapterNumber: number
  readRule: number
  purchaseAmount: number
  contents: string
  isPreview: boolean
  publishAt: Date | null
  viewCount: number
  likeCount: number
  commentCount: number
  remark: string | null
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
  _count: WorkComicChapterCountAggregateOutputType | null
  _avg: WorkComicChapterAvgAggregateOutputType | null
  _sum: WorkComicChapterSumAggregateOutputType | null
  _min: WorkComicChapterMinAggregateOutputType | null
  _max: WorkComicChapterMaxAggregateOutputType | null
}

type GetWorkComicChapterGroupByPayload<T extends WorkComicChapterGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkComicChapterGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkComicChapterGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkComicChapterGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkComicChapterGroupByOutputType[P]>
      }
    >
  >



export type WorkComicChapterWhereInput = {
  AND?: Prisma.WorkComicChapterWhereInput | Prisma.WorkComicChapterWhereInput[]
  OR?: Prisma.WorkComicChapterWhereInput[]
  NOT?: Prisma.WorkComicChapterWhereInput | Prisma.WorkComicChapterWhereInput[]
  id?: Prisma.IntFilter<"WorkComicChapter"> | number
  title?: Prisma.StringFilter<"WorkComicChapter"> | string
  subtitle?: Prisma.StringNullableFilter<"WorkComicChapter"> | string | null
  isPublished?: Prisma.BoolFilter<"WorkComicChapter"> | boolean
  comicId?: Prisma.IntFilter<"WorkComicChapter"> | number
  versionId?: Prisma.IntNullableFilter<"WorkComicChapter"> | number | null
  chapterNumber?: Prisma.FloatFilter<"WorkComicChapter"> | number
  readRule?: Prisma.IntFilter<"WorkComicChapter"> | number
  purchaseAmount?: Prisma.IntFilter<"WorkComicChapter"> | number
  contents?: Prisma.StringFilter<"WorkComicChapter"> | string
  isPreview?: Prisma.BoolFilter<"WorkComicChapter"> | boolean
  publishAt?: Prisma.DateTimeNullableFilter<"WorkComicChapter"> | Date | string | null
  viewCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  likeCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  commentCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  remark?: Prisma.StringNullableFilter<"WorkComicChapter"> | string | null
  createdAt?: Prisma.DateTimeFilter<"WorkComicChapter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkComicChapter"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"WorkComicChapter"> | Date | string | null
  relatedComic?: Prisma.XOR<Prisma.WorkComicScalarRelationFilter, Prisma.WorkComicWhereInput>
  relatedVersion?: Prisma.XOR<Prisma.WorkComicVersionNullableScalarRelationFilter, Prisma.WorkComicVersionWhereInput> | null
}

export type WorkComicChapterOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrderInput | Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  versionId?: Prisma.SortOrderInput | Prisma.SortOrder
  chapterNumber?: Prisma.SortOrder
  readRule?: Prisma.SortOrder
  purchaseAmount?: Prisma.SortOrder
  contents?: Prisma.SortOrder
  isPreview?: Prisma.SortOrder
  publishAt?: Prisma.SortOrderInput | Prisma.SortOrder
  viewCount?: Prisma.SortOrder
  likeCount?: Prisma.SortOrder
  commentCount?: Prisma.SortOrder
  remark?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  relatedComic?: Prisma.WorkComicOrderByWithRelationInput
  relatedVersion?: Prisma.WorkComicVersionOrderByWithRelationInput
}

export type WorkComicChapterWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  comicId_versionId_chapterNumber?: Prisma.WorkComicChapterComicIdVersionIdChapterNumberCompoundUniqueInput
  AND?: Prisma.WorkComicChapterWhereInput | Prisma.WorkComicChapterWhereInput[]
  OR?: Prisma.WorkComicChapterWhereInput[]
  NOT?: Prisma.WorkComicChapterWhereInput | Prisma.WorkComicChapterWhereInput[]
  title?: Prisma.StringFilter<"WorkComicChapter"> | string
  subtitle?: Prisma.StringNullableFilter<"WorkComicChapter"> | string | null
  isPublished?: Prisma.BoolFilter<"WorkComicChapter"> | boolean
  comicId?: Prisma.IntFilter<"WorkComicChapter"> | number
  versionId?: Prisma.IntNullableFilter<"WorkComicChapter"> | number | null
  chapterNumber?: Prisma.FloatFilter<"WorkComicChapter"> | number
  readRule?: Prisma.IntFilter<"WorkComicChapter"> | number
  purchaseAmount?: Prisma.IntFilter<"WorkComicChapter"> | number
  contents?: Prisma.StringFilter<"WorkComicChapter"> | string
  isPreview?: Prisma.BoolFilter<"WorkComicChapter"> | boolean
  publishAt?: Prisma.DateTimeNullableFilter<"WorkComicChapter"> | Date | string | null
  viewCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  likeCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  commentCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  remark?: Prisma.StringNullableFilter<"WorkComicChapter"> | string | null
  createdAt?: Prisma.DateTimeFilter<"WorkComicChapter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkComicChapter"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"WorkComicChapter"> | Date | string | null
  relatedComic?: Prisma.XOR<Prisma.WorkComicScalarRelationFilter, Prisma.WorkComicWhereInput>
  relatedVersion?: Prisma.XOR<Prisma.WorkComicVersionNullableScalarRelationFilter, Prisma.WorkComicVersionWhereInput> | null
}, "id" | "comicId_versionId_chapterNumber">

export type WorkComicChapterOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrderInput | Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  versionId?: Prisma.SortOrderInput | Prisma.SortOrder
  chapterNumber?: Prisma.SortOrder
  readRule?: Prisma.SortOrder
  purchaseAmount?: Prisma.SortOrder
  contents?: Prisma.SortOrder
  isPreview?: Prisma.SortOrder
  publishAt?: Prisma.SortOrderInput | Prisma.SortOrder
  viewCount?: Prisma.SortOrder
  likeCount?: Prisma.SortOrder
  commentCount?: Prisma.SortOrder
  remark?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.WorkComicChapterCountOrderByAggregateInput
  _avg?: Prisma.WorkComicChapterAvgOrderByAggregateInput
  _max?: Prisma.WorkComicChapterMaxOrderByAggregateInput
  _min?: Prisma.WorkComicChapterMinOrderByAggregateInput
  _sum?: Prisma.WorkComicChapterSumOrderByAggregateInput
}

export type WorkComicChapterScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkComicChapterScalarWhereWithAggregatesInput | Prisma.WorkComicChapterScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkComicChapterScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkComicChapterScalarWhereWithAggregatesInput | Prisma.WorkComicChapterScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WorkComicChapter"> | number
  title?: Prisma.StringWithAggregatesFilter<"WorkComicChapter"> | string
  subtitle?: Prisma.StringNullableWithAggregatesFilter<"WorkComicChapter"> | string | null
  isPublished?: Prisma.BoolWithAggregatesFilter<"WorkComicChapter"> | boolean
  comicId?: Prisma.IntWithAggregatesFilter<"WorkComicChapter"> | number
  versionId?: Prisma.IntNullableWithAggregatesFilter<"WorkComicChapter"> | number | null
  chapterNumber?: Prisma.FloatWithAggregatesFilter<"WorkComicChapter"> | number
  readRule?: Prisma.IntWithAggregatesFilter<"WorkComicChapter"> | number
  purchaseAmount?: Prisma.IntWithAggregatesFilter<"WorkComicChapter"> | number
  contents?: Prisma.StringWithAggregatesFilter<"WorkComicChapter"> | string
  isPreview?: Prisma.BoolWithAggregatesFilter<"WorkComicChapter"> | boolean
  publishAt?: Prisma.DateTimeNullableWithAggregatesFilter<"WorkComicChapter"> | Date | string | null
  viewCount?: Prisma.IntWithAggregatesFilter<"WorkComicChapter"> | number
  likeCount?: Prisma.IntWithAggregatesFilter<"WorkComicChapter"> | number
  commentCount?: Prisma.IntWithAggregatesFilter<"WorkComicChapter"> | number
  remark?: Prisma.StringNullableWithAggregatesFilter<"WorkComicChapter"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkComicChapter"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkComicChapter"> | Date | string
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"WorkComicChapter"> | Date | string | null
}

export type WorkComicChapterCreateInput = {
  title: string
  subtitle?: string | null
  isPublished?: boolean
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
  relatedComic: Prisma.WorkComicCreateNestedOneWithoutRelatedChaptersInput
  relatedVersion?: Prisma.WorkComicVersionCreateNestedOneWithoutChaptersInput
}

export type WorkComicChapterUncheckedCreateInput = {
  id?: number
  title: string
  subtitle?: string | null
  isPublished?: boolean
  comicId: number
  versionId?: number | null
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkComicChapterUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  relatedComic?: Prisma.WorkComicUpdateOneRequiredWithoutRelatedChaptersNestedInput
  relatedVersion?: Prisma.WorkComicVersionUpdateOneWithoutChaptersNestedInput
}

export type WorkComicChapterUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  comicId?: Prisma.IntFieldUpdateOperationsInput | number
  versionId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkComicChapterCreateManyInput = {
  id?: number
  title: string
  subtitle?: string | null
  isPublished?: boolean
  comicId: number
  versionId?: number | null
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkComicChapterUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkComicChapterUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  comicId?: Prisma.IntFieldUpdateOperationsInput | number
  versionId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkComicChapterComicIdVersionIdChapterNumberCompoundUniqueInput = {
  comicId: number
  versionId: number
  chapterNumber: number
}

export type WorkComicChapterCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  versionId?: Prisma.SortOrder
  chapterNumber?: Prisma.SortOrder
  readRule?: Prisma.SortOrder
  purchaseAmount?: Prisma.SortOrder
  contents?: Prisma.SortOrder
  isPreview?: Prisma.SortOrder
  publishAt?: Prisma.SortOrder
  viewCount?: Prisma.SortOrder
  likeCount?: Prisma.SortOrder
  commentCount?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type WorkComicChapterAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  versionId?: Prisma.SortOrder
  chapterNumber?: Prisma.SortOrder
  readRule?: Prisma.SortOrder
  purchaseAmount?: Prisma.SortOrder
  viewCount?: Prisma.SortOrder
  likeCount?: Prisma.SortOrder
  commentCount?: Prisma.SortOrder
}

export type WorkComicChapterMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  versionId?: Prisma.SortOrder
  chapterNumber?: Prisma.SortOrder
  readRule?: Prisma.SortOrder
  purchaseAmount?: Prisma.SortOrder
  contents?: Prisma.SortOrder
  isPreview?: Prisma.SortOrder
  publishAt?: Prisma.SortOrder
  viewCount?: Prisma.SortOrder
  likeCount?: Prisma.SortOrder
  commentCount?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type WorkComicChapterMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  subtitle?: Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  versionId?: Prisma.SortOrder
  chapterNumber?: Prisma.SortOrder
  readRule?: Prisma.SortOrder
  purchaseAmount?: Prisma.SortOrder
  contents?: Prisma.SortOrder
  isPreview?: Prisma.SortOrder
  publishAt?: Prisma.SortOrder
  viewCount?: Prisma.SortOrder
  likeCount?: Prisma.SortOrder
  commentCount?: Prisma.SortOrder
  remark?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type WorkComicChapterSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  versionId?: Prisma.SortOrder
  chapterNumber?: Prisma.SortOrder
  readRule?: Prisma.SortOrder
  purchaseAmount?: Prisma.SortOrder
  viewCount?: Prisma.SortOrder
  likeCount?: Prisma.SortOrder
  commentCount?: Prisma.SortOrder
}

export type WorkComicChapterListRelationFilter = {
  every?: Prisma.WorkComicChapterWhereInput
  some?: Prisma.WorkComicChapterWhereInput
  none?: Prisma.WorkComicChapterWhereInput
}

export type WorkComicChapterOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type WorkComicChapterCreateNestedManyWithoutRelatedVersionInput = {
  create?: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedVersionInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput> | Prisma.WorkComicChapterCreateWithoutRelatedVersionInput[] | Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput[]
  connectOrCreate?: Prisma.WorkComicChapterCreateOrConnectWithoutRelatedVersionInput | Prisma.WorkComicChapterCreateOrConnectWithoutRelatedVersionInput[]
  createMany?: Prisma.WorkComicChapterCreateManyRelatedVersionInputEnvelope
  connect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
}

export type WorkComicChapterUncheckedCreateNestedManyWithoutRelatedVersionInput = {
  create?: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedVersionInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput> | Prisma.WorkComicChapterCreateWithoutRelatedVersionInput[] | Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput[]
  connectOrCreate?: Prisma.WorkComicChapterCreateOrConnectWithoutRelatedVersionInput | Prisma.WorkComicChapterCreateOrConnectWithoutRelatedVersionInput[]
  createMany?: Prisma.WorkComicChapterCreateManyRelatedVersionInputEnvelope
  connect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
}

export type WorkComicChapterUpdateManyWithoutRelatedVersionNestedInput = {
  create?: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedVersionInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput> | Prisma.WorkComicChapterCreateWithoutRelatedVersionInput[] | Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput[]
  connectOrCreate?: Prisma.WorkComicChapterCreateOrConnectWithoutRelatedVersionInput | Prisma.WorkComicChapterCreateOrConnectWithoutRelatedVersionInput[]
  upsert?: Prisma.WorkComicChapterUpsertWithWhereUniqueWithoutRelatedVersionInput | Prisma.WorkComicChapterUpsertWithWhereUniqueWithoutRelatedVersionInput[]
  createMany?: Prisma.WorkComicChapterCreateManyRelatedVersionInputEnvelope
  set?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  disconnect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  delete?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  connect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  update?: Prisma.WorkComicChapterUpdateWithWhereUniqueWithoutRelatedVersionInput | Prisma.WorkComicChapterUpdateWithWhereUniqueWithoutRelatedVersionInput[]
  updateMany?: Prisma.WorkComicChapterUpdateManyWithWhereWithoutRelatedVersionInput | Prisma.WorkComicChapterUpdateManyWithWhereWithoutRelatedVersionInput[]
  deleteMany?: Prisma.WorkComicChapterScalarWhereInput | Prisma.WorkComicChapterScalarWhereInput[]
}

export type WorkComicChapterUncheckedUpdateManyWithoutRelatedVersionNestedInput = {
  create?: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedVersionInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput> | Prisma.WorkComicChapterCreateWithoutRelatedVersionInput[] | Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput[]
  connectOrCreate?: Prisma.WorkComicChapterCreateOrConnectWithoutRelatedVersionInput | Prisma.WorkComicChapterCreateOrConnectWithoutRelatedVersionInput[]
  upsert?: Prisma.WorkComicChapterUpsertWithWhereUniqueWithoutRelatedVersionInput | Prisma.WorkComicChapterUpsertWithWhereUniqueWithoutRelatedVersionInput[]
  createMany?: Prisma.WorkComicChapterCreateManyRelatedVersionInputEnvelope
  set?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  disconnect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  delete?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  connect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  update?: Prisma.WorkComicChapterUpdateWithWhereUniqueWithoutRelatedVersionInput | Prisma.WorkComicChapterUpdateWithWhereUniqueWithoutRelatedVersionInput[]
  updateMany?: Prisma.WorkComicChapterUpdateManyWithWhereWithoutRelatedVersionInput | Prisma.WorkComicChapterUpdateManyWithWhereWithoutRelatedVersionInput[]
  deleteMany?: Prisma.WorkComicChapterScalarWhereInput | Prisma.WorkComicChapterScalarWhereInput[]
}

export type WorkComicChapterCreateNestedManyWithoutRelatedComicInput = {
  create?: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedComicInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput> | Prisma.WorkComicChapterCreateWithoutRelatedComicInput[] | Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput[]
  connectOrCreate?: Prisma.WorkComicChapterCreateOrConnectWithoutRelatedComicInput | Prisma.WorkComicChapterCreateOrConnectWithoutRelatedComicInput[]
  createMany?: Prisma.WorkComicChapterCreateManyRelatedComicInputEnvelope
  connect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
}

export type WorkComicChapterUncheckedCreateNestedManyWithoutRelatedComicInput = {
  create?: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedComicInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput> | Prisma.WorkComicChapterCreateWithoutRelatedComicInput[] | Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput[]
  connectOrCreate?: Prisma.WorkComicChapterCreateOrConnectWithoutRelatedComicInput | Prisma.WorkComicChapterCreateOrConnectWithoutRelatedComicInput[]
  createMany?: Prisma.WorkComicChapterCreateManyRelatedComicInputEnvelope
  connect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
}

export type WorkComicChapterUpdateManyWithoutRelatedComicNestedInput = {
  create?: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedComicInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput> | Prisma.WorkComicChapterCreateWithoutRelatedComicInput[] | Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput[]
  connectOrCreate?: Prisma.WorkComicChapterCreateOrConnectWithoutRelatedComicInput | Prisma.WorkComicChapterCreateOrConnectWithoutRelatedComicInput[]
  upsert?: Prisma.WorkComicChapterUpsertWithWhereUniqueWithoutRelatedComicInput | Prisma.WorkComicChapterUpsertWithWhereUniqueWithoutRelatedComicInput[]
  createMany?: Prisma.WorkComicChapterCreateManyRelatedComicInputEnvelope
  set?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  disconnect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  delete?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  connect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  update?: Prisma.WorkComicChapterUpdateWithWhereUniqueWithoutRelatedComicInput | Prisma.WorkComicChapterUpdateWithWhereUniqueWithoutRelatedComicInput[]
  updateMany?: Prisma.WorkComicChapterUpdateManyWithWhereWithoutRelatedComicInput | Prisma.WorkComicChapterUpdateManyWithWhereWithoutRelatedComicInput[]
  deleteMany?: Prisma.WorkComicChapterScalarWhereInput | Prisma.WorkComicChapterScalarWhereInput[]
}

export type WorkComicChapterUncheckedUpdateManyWithoutRelatedComicNestedInput = {
  create?: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedComicInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput> | Prisma.WorkComicChapterCreateWithoutRelatedComicInput[] | Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput[]
  connectOrCreate?: Prisma.WorkComicChapterCreateOrConnectWithoutRelatedComicInput | Prisma.WorkComicChapterCreateOrConnectWithoutRelatedComicInput[]
  upsert?: Prisma.WorkComicChapterUpsertWithWhereUniqueWithoutRelatedComicInput | Prisma.WorkComicChapterUpsertWithWhereUniqueWithoutRelatedComicInput[]
  createMany?: Prisma.WorkComicChapterCreateManyRelatedComicInputEnvelope
  set?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  disconnect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  delete?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  connect?: Prisma.WorkComicChapterWhereUniqueInput | Prisma.WorkComicChapterWhereUniqueInput[]
  update?: Prisma.WorkComicChapterUpdateWithWhereUniqueWithoutRelatedComicInput | Prisma.WorkComicChapterUpdateWithWhereUniqueWithoutRelatedComicInput[]
  updateMany?: Prisma.WorkComicChapterUpdateManyWithWhereWithoutRelatedComicInput | Prisma.WorkComicChapterUpdateManyWithWhereWithoutRelatedComicInput[]
  deleteMany?: Prisma.WorkComicChapterScalarWhereInput | Prisma.WorkComicChapterScalarWhereInput[]
}

export type WorkComicChapterCreateWithoutRelatedVersionInput = {
  title: string
  subtitle?: string | null
  isPublished?: boolean
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
  relatedComic: Prisma.WorkComicCreateNestedOneWithoutRelatedChaptersInput
}

export type WorkComicChapterUncheckedCreateWithoutRelatedVersionInput = {
  id?: number
  title: string
  subtitle?: string | null
  isPublished?: boolean
  comicId: number
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkComicChapterCreateOrConnectWithoutRelatedVersionInput = {
  where: Prisma.WorkComicChapterWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedVersionInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput>
}

export type WorkComicChapterCreateManyRelatedVersionInputEnvelope = {
  data: Prisma.WorkComicChapterCreateManyRelatedVersionInput | Prisma.WorkComicChapterCreateManyRelatedVersionInput[]
  skipDuplicates?: boolean
}

export type WorkComicChapterUpsertWithWhereUniqueWithoutRelatedVersionInput = {
  where: Prisma.WorkComicChapterWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkComicChapterUpdateWithoutRelatedVersionInput, Prisma.WorkComicChapterUncheckedUpdateWithoutRelatedVersionInput>
  create: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedVersionInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedVersionInput>
}

export type WorkComicChapterUpdateWithWhereUniqueWithoutRelatedVersionInput = {
  where: Prisma.WorkComicChapterWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkComicChapterUpdateWithoutRelatedVersionInput, Prisma.WorkComicChapterUncheckedUpdateWithoutRelatedVersionInput>
}

export type WorkComicChapterUpdateManyWithWhereWithoutRelatedVersionInput = {
  where: Prisma.WorkComicChapterScalarWhereInput
  data: Prisma.XOR<Prisma.WorkComicChapterUpdateManyMutationInput, Prisma.WorkComicChapterUncheckedUpdateManyWithoutRelatedVersionInput>
}

export type WorkComicChapterScalarWhereInput = {
  AND?: Prisma.WorkComicChapterScalarWhereInput | Prisma.WorkComicChapterScalarWhereInput[]
  OR?: Prisma.WorkComicChapterScalarWhereInput[]
  NOT?: Prisma.WorkComicChapterScalarWhereInput | Prisma.WorkComicChapterScalarWhereInput[]
  id?: Prisma.IntFilter<"WorkComicChapter"> | number
  title?: Prisma.StringFilter<"WorkComicChapter"> | string
  subtitle?: Prisma.StringNullableFilter<"WorkComicChapter"> | string | null
  isPublished?: Prisma.BoolFilter<"WorkComicChapter"> | boolean
  comicId?: Prisma.IntFilter<"WorkComicChapter"> | number
  versionId?: Prisma.IntNullableFilter<"WorkComicChapter"> | number | null
  chapterNumber?: Prisma.FloatFilter<"WorkComicChapter"> | number
  readRule?: Prisma.IntFilter<"WorkComicChapter"> | number
  purchaseAmount?: Prisma.IntFilter<"WorkComicChapter"> | number
  contents?: Prisma.StringFilter<"WorkComicChapter"> | string
  isPreview?: Prisma.BoolFilter<"WorkComicChapter"> | boolean
  publishAt?: Prisma.DateTimeNullableFilter<"WorkComicChapter"> | Date | string | null
  viewCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  likeCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  commentCount?: Prisma.IntFilter<"WorkComicChapter"> | number
  remark?: Prisma.StringNullableFilter<"WorkComicChapter"> | string | null
  createdAt?: Prisma.DateTimeFilter<"WorkComicChapter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkComicChapter"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"WorkComicChapter"> | Date | string | null
}

export type WorkComicChapterCreateWithoutRelatedComicInput = {
  title: string
  subtitle?: string | null
  isPublished?: boolean
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
  relatedVersion?: Prisma.WorkComicVersionCreateNestedOneWithoutChaptersInput
}

export type WorkComicChapterUncheckedCreateWithoutRelatedComicInput = {
  id?: number
  title: string
  subtitle?: string | null
  isPublished?: boolean
  versionId?: number | null
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkComicChapterCreateOrConnectWithoutRelatedComicInput = {
  where: Prisma.WorkComicChapterWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedComicInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput>
}

export type WorkComicChapterCreateManyRelatedComicInputEnvelope = {
  data: Prisma.WorkComicChapterCreateManyRelatedComicInput | Prisma.WorkComicChapterCreateManyRelatedComicInput[]
  skipDuplicates?: boolean
}

export type WorkComicChapterUpsertWithWhereUniqueWithoutRelatedComicInput = {
  where: Prisma.WorkComicChapterWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkComicChapterUpdateWithoutRelatedComicInput, Prisma.WorkComicChapterUncheckedUpdateWithoutRelatedComicInput>
  create: Prisma.XOR<Prisma.WorkComicChapterCreateWithoutRelatedComicInput, Prisma.WorkComicChapterUncheckedCreateWithoutRelatedComicInput>
}

export type WorkComicChapterUpdateWithWhereUniqueWithoutRelatedComicInput = {
  where: Prisma.WorkComicChapterWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkComicChapterUpdateWithoutRelatedComicInput, Prisma.WorkComicChapterUncheckedUpdateWithoutRelatedComicInput>
}

export type WorkComicChapterUpdateManyWithWhereWithoutRelatedComicInput = {
  where: Prisma.WorkComicChapterScalarWhereInput
  data: Prisma.XOR<Prisma.WorkComicChapterUpdateManyMutationInput, Prisma.WorkComicChapterUncheckedUpdateManyWithoutRelatedComicInput>
}

export type WorkComicChapterCreateManyRelatedVersionInput = {
  id?: number
  title: string
  subtitle?: string | null
  isPublished?: boolean
  comicId: number
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkComicChapterUpdateWithoutRelatedVersionInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  relatedComic?: Prisma.WorkComicUpdateOneRequiredWithoutRelatedChaptersNestedInput
}

export type WorkComicChapterUncheckedUpdateWithoutRelatedVersionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  comicId?: Prisma.IntFieldUpdateOperationsInput | number
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkComicChapterUncheckedUpdateManyWithoutRelatedVersionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  comicId?: Prisma.IntFieldUpdateOperationsInput | number
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkComicChapterCreateManyRelatedComicInput = {
  id?: number
  title: string
  subtitle?: string | null
  isPublished?: boolean
  versionId?: number | null
  chapterNumber: number
  readRule?: number
  purchaseAmount?: number
  contents?: string
  isPreview?: boolean
  publishAt?: Date | string | null
  viewCount?: number
  likeCount?: number
  commentCount?: number
  remark?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkComicChapterUpdateWithoutRelatedComicInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  relatedVersion?: Prisma.WorkComicVersionUpdateOneWithoutChaptersNestedInput
}

export type WorkComicChapterUncheckedUpdateWithoutRelatedComicInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  versionId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkComicChapterUncheckedUpdateManyWithoutRelatedComicInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  subtitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  versionId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  chapterNumber?: Prisma.FloatFieldUpdateOperationsInput | number
  readRule?: Prisma.IntFieldUpdateOperationsInput | number
  purchaseAmount?: Prisma.IntFieldUpdateOperationsInput | number
  contents?: Prisma.StringFieldUpdateOperationsInput | string
  isPreview?: Prisma.BoolFieldUpdateOperationsInput | boolean
  publishAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  viewCount?: Prisma.IntFieldUpdateOperationsInput | number
  likeCount?: Prisma.IntFieldUpdateOperationsInput | number
  commentCount?: Prisma.IntFieldUpdateOperationsInput | number
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type WorkComicChapterSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  subtitle?: boolean
  isPublished?: boolean
  comicId?: boolean
  versionId?: boolean
  chapterNumber?: boolean
  readRule?: boolean
  purchaseAmount?: boolean
  contents?: boolean
  isPreview?: boolean
  publishAt?: boolean
  viewCount?: boolean
  likeCount?: boolean
  commentCount?: boolean
  remark?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  relatedComic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  relatedVersion?: boolean | Prisma.WorkComicChapter$relatedVersionArgs<ExtArgs>
}, ExtArgs["result"]["workComicChapter"]>

export type WorkComicChapterSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  subtitle?: boolean
  isPublished?: boolean
  comicId?: boolean
  versionId?: boolean
  chapterNumber?: boolean
  readRule?: boolean
  purchaseAmount?: boolean
  contents?: boolean
  isPreview?: boolean
  publishAt?: boolean
  viewCount?: boolean
  likeCount?: boolean
  commentCount?: boolean
  remark?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  relatedComic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  relatedVersion?: boolean | Prisma.WorkComicChapter$relatedVersionArgs<ExtArgs>
}, ExtArgs["result"]["workComicChapter"]>

export type WorkComicChapterSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  subtitle?: boolean
  isPublished?: boolean
  comicId?: boolean
  versionId?: boolean
  chapterNumber?: boolean
  readRule?: boolean
  purchaseAmount?: boolean
  contents?: boolean
  isPreview?: boolean
  publishAt?: boolean
  viewCount?: boolean
  likeCount?: boolean
  commentCount?: boolean
  remark?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  relatedComic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  relatedVersion?: boolean | Prisma.WorkComicChapter$relatedVersionArgs<ExtArgs>
}, ExtArgs["result"]["workComicChapter"]>

export type WorkComicChapterSelectScalar = {
  id?: boolean
  title?: boolean
  subtitle?: boolean
  isPublished?: boolean
  comicId?: boolean
  versionId?: boolean
  chapterNumber?: boolean
  readRule?: boolean
  purchaseAmount?: boolean
  contents?: boolean
  isPreview?: boolean
  publishAt?: boolean
  viewCount?: boolean
  likeCount?: boolean
  commentCount?: boolean
  remark?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type WorkComicChapterOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "subtitle" | "isPublished" | "comicId" | "versionId" | "chapterNumber" | "readRule" | "purchaseAmount" | "contents" | "isPreview" | "publishAt" | "viewCount" | "likeCount" | "commentCount" | "remark" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["workComicChapter"]>
export type WorkComicChapterInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  relatedComic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  relatedVersion?: boolean | Prisma.WorkComicChapter$relatedVersionArgs<ExtArgs>
}
export type WorkComicChapterIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  relatedComic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  relatedVersion?: boolean | Prisma.WorkComicChapter$relatedVersionArgs<ExtArgs>
}
export type WorkComicChapterIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  relatedComic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  relatedVersion?: boolean | Prisma.WorkComicChapter$relatedVersionArgs<ExtArgs>
}

export type $WorkComicChapterPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkComicChapter"
  objects: {
    /**
     * 关联的漫画id
     */
    relatedComic: Prisma.$WorkComicPayload<ExtArgs>
    /**
     * 关联的版本id（可选，null表示原版章节）
     */
    relatedVersion: Prisma.$WorkComicVersionPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * 主键id
     */
    id: number
    /**
     * 章节标题
     */
    title: string
    /**
     * 章节副标题或描述
     */
    subtitle: string | null
    /**
     * 发布状态
     */
    isPublished: boolean
    comicId: number
    versionId: number | null
    /**
     * 章节序号（用于排序）
     */
    chapterNumber: number
    /**
     * 查看规则 0公开 1登录 2会员 3购买
     */
    readRule: number
    /**
     * 购买需要消耗的金额
     */
    purchaseAmount: number
    /**
     * 漫画内容（JSON格式存储图片URL数组）
     */
    contents: string
    /**
     * 是否为试读章节
     */
    isPreview: boolean
    /**
     * 发布时间
     */
    publishAt: Date | null
    /**
     * 阅读次数
     */
    viewCount: number
    /**
     * 点赞数
     */
    likeCount: number
    /**
     * 评论数
     */
    commentCount: number
    /**
     * 备注
     */
    remark: string | null
    /**
     * 创建时间
     */
    createdAt: Date
    /**
     * 更新时间
     */
    updatedAt: Date
    /**
     * 软删除时间（用于数据恢复或归档）
     */
    deletedAt: Date | null
  }, ExtArgs["result"]["workComicChapter"]>
  composites: {}
}

export type WorkComicChapterGetPayload<S extends boolean | null | undefined | WorkComicChapterDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload, S>

export type WorkComicChapterCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkComicChapterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: WorkComicChapterCountAggregateInputType | true
  }

export interface WorkComicChapterDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkComicChapter'], meta: { name: 'WorkComicChapter' } }
  /**
   * Find zero or one WorkComicChapter that matches the filter.
   * @param {WorkComicChapterFindUniqueArgs} args - Arguments to find a WorkComicChapter
   * @example
   * // Get one WorkComicChapter
   * const workComicChapter = await prisma.workComicChapter.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkComicChapterFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkComicChapterFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkComicChapterClient<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkComicChapter that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkComicChapterFindUniqueOrThrowArgs} args - Arguments to find a WorkComicChapter
   * @example
   * // Get one WorkComicChapter
   * const workComicChapter = await prisma.workComicChapter.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkComicChapterFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkComicChapterFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkComicChapterClient<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkComicChapter that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicChapterFindFirstArgs} args - Arguments to find a WorkComicChapter
   * @example
   * // Get one WorkComicChapter
   * const workComicChapter = await prisma.workComicChapter.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkComicChapterFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkComicChapterFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkComicChapterClient<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkComicChapter that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicChapterFindFirstOrThrowArgs} args - Arguments to find a WorkComicChapter
   * @example
   * // Get one WorkComicChapter
   * const workComicChapter = await prisma.workComicChapter.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkComicChapterFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkComicChapterFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkComicChapterClient<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkComicChapters that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicChapterFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkComicChapters
   * const workComicChapters = await prisma.workComicChapter.findMany()
   * 
   * // Get first 10 WorkComicChapters
   * const workComicChapters = await prisma.workComicChapter.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workComicChapterWithIdOnly = await prisma.workComicChapter.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkComicChapterFindManyArgs>(args?: Prisma.SelectSubset<T, WorkComicChapterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkComicChapter.
   * @param {WorkComicChapterCreateArgs} args - Arguments to create a WorkComicChapter.
   * @example
   * // Create one WorkComicChapter
   * const WorkComicChapter = await prisma.workComicChapter.create({
   *   data: {
   *     // ... data to create a WorkComicChapter
   *   }
   * })
   * 
   */
  create<T extends WorkComicChapterCreateArgs>(args: Prisma.SelectSubset<T, WorkComicChapterCreateArgs<ExtArgs>>): Prisma.Prisma__WorkComicChapterClient<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkComicChapters.
   * @param {WorkComicChapterCreateManyArgs} args - Arguments to create many WorkComicChapters.
   * @example
   * // Create many WorkComicChapters
   * const workComicChapter = await prisma.workComicChapter.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkComicChapterCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkComicChapterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkComicChapters and returns the data saved in the database.
   * @param {WorkComicChapterCreateManyAndReturnArgs} args - Arguments to create many WorkComicChapters.
   * @example
   * // Create many WorkComicChapters
   * const workComicChapter = await prisma.workComicChapter.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkComicChapters and only return the `id`
   * const workComicChapterWithIdOnly = await prisma.workComicChapter.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkComicChapterCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkComicChapterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkComicChapter.
   * @param {WorkComicChapterDeleteArgs} args - Arguments to delete one WorkComicChapter.
   * @example
   * // Delete one WorkComicChapter
   * const WorkComicChapter = await prisma.workComicChapter.delete({
   *   where: {
   *     // ... filter to delete one WorkComicChapter
   *   }
   * })
   * 
   */
  delete<T extends WorkComicChapterDeleteArgs>(args: Prisma.SelectSubset<T, WorkComicChapterDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkComicChapterClient<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkComicChapter.
   * @param {WorkComicChapterUpdateArgs} args - Arguments to update one WorkComicChapter.
   * @example
   * // Update one WorkComicChapter
   * const workComicChapter = await prisma.workComicChapter.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkComicChapterUpdateArgs>(args: Prisma.SelectSubset<T, WorkComicChapterUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkComicChapterClient<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkComicChapters.
   * @param {WorkComicChapterDeleteManyArgs} args - Arguments to filter WorkComicChapters to delete.
   * @example
   * // Delete a few WorkComicChapters
   * const { count } = await prisma.workComicChapter.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkComicChapterDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkComicChapterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkComicChapters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicChapterUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkComicChapters
   * const workComicChapter = await prisma.workComicChapter.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkComicChapterUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkComicChapterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkComicChapters and returns the data updated in the database.
   * @param {WorkComicChapterUpdateManyAndReturnArgs} args - Arguments to update many WorkComicChapters.
   * @example
   * // Update many WorkComicChapters
   * const workComicChapter = await prisma.workComicChapter.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkComicChapters and only return the `id`
   * const workComicChapterWithIdOnly = await prisma.workComicChapter.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkComicChapterUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkComicChapterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkComicChapter.
   * @param {WorkComicChapterUpsertArgs} args - Arguments to update or create a WorkComicChapter.
   * @example
   * // Update or create a WorkComicChapter
   * const workComicChapter = await prisma.workComicChapter.upsert({
   *   create: {
   *     // ... data to create a WorkComicChapter
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkComicChapter we want to update
   *   }
   * })
   */
  upsert<T extends WorkComicChapterUpsertArgs>(args: Prisma.SelectSubset<T, WorkComicChapterUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkComicChapterClient<runtime.Types.Result.GetResult<Prisma.$WorkComicChapterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkComicChapters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicChapterCountArgs} args - Arguments to filter WorkComicChapters to count.
   * @example
   * // Count the number of WorkComicChapters
   * const count = await prisma.workComicChapter.count({
   *   where: {
   *     // ... the filter for the WorkComicChapters we want to count
   *   }
   * })
  **/
  count<T extends WorkComicChapterCountArgs>(
    args?: Prisma.Subset<T, WorkComicChapterCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkComicChapterCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkComicChapter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicChapterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkComicChapterAggregateArgs>(args: Prisma.Subset<T, WorkComicChapterAggregateArgs>): Prisma.PrismaPromise<GetWorkComicChapterAggregateType<T>>

  /**
   * Group by WorkComicChapter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicChapterGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkComicChapterGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkComicChapterGroupByArgs['orderBy'] }
      : { orderBy?: WorkComicChapterGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkComicChapterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkComicChapterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkComicChapter model
 */
readonly fields: WorkComicChapterFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkComicChapter.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkComicChapterClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  relatedComic<T extends Prisma.WorkComicDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkComicDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkComicClient<runtime.Types.Result.GetResult<Prisma.$WorkComicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  relatedVersion<T extends Prisma.WorkComicChapter$relatedVersionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkComicChapter$relatedVersionArgs<ExtArgs>>): Prisma.Prisma__WorkComicVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkComicVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkComicChapter model
 */
export interface WorkComicChapterFieldRefs {
  readonly id: Prisma.FieldRef<"WorkComicChapter", 'Int'>
  readonly title: Prisma.FieldRef<"WorkComicChapter", 'String'>
  readonly subtitle: Prisma.FieldRef<"WorkComicChapter", 'String'>
  readonly isPublished: Prisma.FieldRef<"WorkComicChapter", 'Boolean'>
  readonly comicId: Prisma.FieldRef<"WorkComicChapter", 'Int'>
  readonly versionId: Prisma.FieldRef<"WorkComicChapter", 'Int'>
  readonly chapterNumber: Prisma.FieldRef<"WorkComicChapter", 'Float'>
  readonly readRule: Prisma.FieldRef<"WorkComicChapter", 'Int'>
  readonly purchaseAmount: Prisma.FieldRef<"WorkComicChapter", 'Int'>
  readonly contents: Prisma.FieldRef<"WorkComicChapter", 'String'>
  readonly isPreview: Prisma.FieldRef<"WorkComicChapter", 'Boolean'>
  readonly publishAt: Prisma.FieldRef<"WorkComicChapter", 'DateTime'>
  readonly viewCount: Prisma.FieldRef<"WorkComicChapter", 'Int'>
  readonly likeCount: Prisma.FieldRef<"WorkComicChapter", 'Int'>
  readonly commentCount: Prisma.FieldRef<"WorkComicChapter", 'Int'>
  readonly remark: Prisma.FieldRef<"WorkComicChapter", 'String'>
  readonly createdAt: Prisma.FieldRef<"WorkComicChapter", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkComicChapter", 'DateTime'>
  readonly deletedAt: Prisma.FieldRef<"WorkComicChapter", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WorkComicChapter findUnique
 */
export type WorkComicChapterFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicChapter to fetch.
   */
  where: Prisma.WorkComicChapterWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter findUniqueOrThrow
 */
export type WorkComicChapterFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicChapter to fetch.
   */
  where: Prisma.WorkComicChapterWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter findFirst
 */
export type WorkComicChapterFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicChapter to fetch.
   */
  where?: Prisma.WorkComicChapterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkComicChapters to fetch.
   */
  orderBy?: Prisma.WorkComicChapterOrderByWithRelationInput | Prisma.WorkComicChapterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkComicChapters.
   */
  cursor?: Prisma.WorkComicChapterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` WorkComicChapters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkComicChapters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkComicChapters.
   */
  distinct?: Prisma.WorkComicChapterScalarFieldEnum | Prisma.WorkComicChapterScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter findFirstOrThrow
 */
export type WorkComicChapterFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicChapter to fetch.
   */
  where?: Prisma.WorkComicChapterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkComicChapters to fetch.
   */
  orderBy?: Prisma.WorkComicChapterOrderByWithRelationInput | Prisma.WorkComicChapterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkComicChapters.
   */
  cursor?: Prisma.WorkComicChapterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` WorkComicChapters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkComicChapters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkComicChapters.
   */
  distinct?: Prisma.WorkComicChapterScalarFieldEnum | Prisma.WorkComicChapterScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter findMany
 */
export type WorkComicChapterFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicChapters to fetch.
   */
  where?: Prisma.WorkComicChapterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkComicChapters to fetch.
   */
  orderBy?: Prisma.WorkComicChapterOrderByWithRelationInput | Prisma.WorkComicChapterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkComicChapters.
   */
  cursor?: Prisma.WorkComicChapterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` WorkComicChapters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkComicChapters.
   */
  skip?: number
  distinct?: Prisma.WorkComicChapterScalarFieldEnum | Prisma.WorkComicChapterScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter create
 */
export type WorkComicChapterCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkComicChapter.
   */
  data: Prisma.XOR<Prisma.WorkComicChapterCreateInput, Prisma.WorkComicChapterUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter createMany
 */
export type WorkComicChapterCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkComicChapters.
   */
  data: Prisma.WorkComicChapterCreateManyInput | Prisma.WorkComicChapterCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkComicChapter createManyAndReturn
 */
export type WorkComicChapterCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * The data used to create many WorkComicChapters.
   */
  data: Prisma.WorkComicChapterCreateManyInput | Prisma.WorkComicChapterCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkComicChapter update
 */
export type WorkComicChapterUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkComicChapter.
   */
  data: Prisma.XOR<Prisma.WorkComicChapterUpdateInput, Prisma.WorkComicChapterUncheckedUpdateInput>
  /**
   * Choose, which WorkComicChapter to update.
   */
  where: Prisma.WorkComicChapterWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter updateMany
 */
export type WorkComicChapterUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkComicChapters.
   */
  data: Prisma.XOR<Prisma.WorkComicChapterUpdateManyMutationInput, Prisma.WorkComicChapterUncheckedUpdateManyInput>
  /**
   * Filter which WorkComicChapters to update
   */
  where?: Prisma.WorkComicChapterWhereInput
  /**
   * Limit how many WorkComicChapters to update.
   */
  limit?: number
}

/**
 * WorkComicChapter updateManyAndReturn
 */
export type WorkComicChapterUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * The data used to update WorkComicChapters.
   */
  data: Prisma.XOR<Prisma.WorkComicChapterUpdateManyMutationInput, Prisma.WorkComicChapterUncheckedUpdateManyInput>
  /**
   * Filter which WorkComicChapters to update
   */
  where?: Prisma.WorkComicChapterWhereInput
  /**
   * Limit how many WorkComicChapters to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkComicChapter upsert
 */
export type WorkComicChapterUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkComicChapter to update in case it exists.
   */
  where: Prisma.WorkComicChapterWhereUniqueInput
  /**
   * In case the WorkComicChapter found by the `where` argument doesn't exist, create a new WorkComicChapter with this data.
   */
  create: Prisma.XOR<Prisma.WorkComicChapterCreateInput, Prisma.WorkComicChapterUncheckedCreateInput>
  /**
   * In case the WorkComicChapter was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkComicChapterUpdateInput, Prisma.WorkComicChapterUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter delete
 */
export type WorkComicChapterDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
  /**
   * Filter which WorkComicChapter to delete.
   */
  where: Prisma.WorkComicChapterWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicChapter deleteMany
 */
export type WorkComicChapterDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkComicChapters to delete
   */
  where?: Prisma.WorkComicChapterWhereInput
  /**
   * Limit how many WorkComicChapters to delete.
   */
  limit?: number
}

/**
 * WorkComicChapter.relatedVersion
 */
export type WorkComicChapter$relatedVersionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicVersion
   */
  select?: Prisma.WorkComicVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicVersion
   */
  omit?: Prisma.WorkComicVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicVersionInclude<ExtArgs> | null
  where?: Prisma.WorkComicVersionWhereInput
}

/**
 * WorkComicChapter without action
 */
export type WorkComicChapterDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicChapter
   */
  select?: Prisma.WorkComicChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicChapter
   */
  omit?: Prisma.WorkComicChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicChapterInclude<ExtArgs> | null
}
