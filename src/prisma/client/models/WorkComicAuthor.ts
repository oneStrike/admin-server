
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WorkComicAuthor` model and its related types.
 *
 * üü¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WorkComicAuthor
 * Êº´Áîª‰ΩúËÄÖÂÖ≥ËÅîË°®ÔºàÂ§öÂØπÂ§öÂÖ≥Á≥ª‰∏≠Èó¥Ë°®Ôºâ
 */
export type WorkComicAuthorModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkComicAuthorPayload>

export type AggregateWorkComicAuthor = {
  _count: WorkComicAuthorCountAggregateOutputType | null
  _avg: WorkComicAuthorAvgAggregateOutputType | null
  _sum: WorkComicAuthorSumAggregateOutputType | null
  _min: WorkComicAuthorMinAggregateOutputType | null
  _max: WorkComicAuthorMaxAggregateOutputType | null
}

export type WorkComicAuthorAvgAggregateOutputType = {
  id: number | null
  comicId: number | null
  authorId: number | null
  roleType: number | null
  sortOrder: number | null
}

export type WorkComicAuthorSumAggregateOutputType = {
  id: number | null
  comicId: number | null
  authorId: number | null
  roleType: number | null
  sortOrder: number | null
}

export type WorkComicAuthorMinAggregateOutputType = {
  id: number | null
  comicId: number | null
  authorId: number | null
  roleType: number | null
  isPrimary: boolean | null
  sortOrder: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkComicAuthorMaxAggregateOutputType = {
  id: number | null
  comicId: number | null
  authorId: number | null
  roleType: number | null
  isPrimary: boolean | null
  sortOrder: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkComicAuthorCountAggregateOutputType = {
  id: number
  comicId: number
  authorId: number
  roleType: number
  isPrimary: number
  sortOrder: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WorkComicAuthorAvgAggregateInputType = {
  id?: true
  comicId?: true
  authorId?: true
  roleType?: true
  sortOrder?: true
}

export type WorkComicAuthorSumAggregateInputType = {
  id?: true
  comicId?: true
  authorId?: true
  roleType?: true
  sortOrder?: true
}

export type WorkComicAuthorMinAggregateInputType = {
  id?: true
  comicId?: true
  authorId?: true
  roleType?: true
  isPrimary?: true
  sortOrder?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkComicAuthorMaxAggregateInputType = {
  id?: true
  comicId?: true
  authorId?: true
  roleType?: true
  isPrimary?: true
  sortOrder?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkComicAuthorCountAggregateInputType = {
  id?: true
  comicId?: true
  authorId?: true
  roleType?: true
  isPrimary?: true
  sortOrder?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WorkComicAuthorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkComicAuthor to aggregate.
   */
  where?: Prisma.WorkComicAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkComicAuthors to fetch.
   */
  orderBy?: Prisma.WorkComicAuthorOrderByWithRelationInput | Prisma.WorkComicAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkComicAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` WorkComicAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkComicAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkComicAuthors
  **/
  _count?: true | WorkComicAuthorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkComicAuthorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkComicAuthorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkComicAuthorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkComicAuthorMaxAggregateInputType
}

export type GetWorkComicAuthorAggregateType<T extends WorkComicAuthorAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkComicAuthor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkComicAuthor[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkComicAuthor[P]>
}




export type WorkComicAuthorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkComicAuthorWhereInput
  orderBy?: Prisma.WorkComicAuthorOrderByWithAggregationInput | Prisma.WorkComicAuthorOrderByWithAggregationInput[]
  by: Prisma.WorkComicAuthorScalarFieldEnum[] | Prisma.WorkComicAuthorScalarFieldEnum
  having?: Prisma.WorkComicAuthorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkComicAuthorCountAggregateInputType | true
  _avg?: WorkComicAuthorAvgAggregateInputType
  _sum?: WorkComicAuthorSumAggregateInputType
  _min?: WorkComicAuthorMinAggregateInputType
  _max?: WorkComicAuthorMaxAggregateInputType
}

export type WorkComicAuthorGroupByOutputType = {
  id: number
  comicId: number
  authorId: number
  roleType: number
  isPrimary: boolean
  sortOrder: number
  createdAt: Date
  updatedAt: Date
  _count: WorkComicAuthorCountAggregateOutputType | null
  _avg: WorkComicAuthorAvgAggregateOutputType | null
  _sum: WorkComicAuthorSumAggregateOutputType | null
  _min: WorkComicAuthorMinAggregateOutputType | null
  _max: WorkComicAuthorMaxAggregateOutputType | null
}

type GetWorkComicAuthorGroupByPayload<T extends WorkComicAuthorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkComicAuthorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkComicAuthorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkComicAuthorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkComicAuthorGroupByOutputType[P]>
      }
    >
  >



export type WorkComicAuthorWhereInput = {
  AND?: Prisma.WorkComicAuthorWhereInput | Prisma.WorkComicAuthorWhereInput[]
  OR?: Prisma.WorkComicAuthorWhereInput[]
  NOT?: Prisma.WorkComicAuthorWhereInput | Prisma.WorkComicAuthorWhereInput[]
  id?: Prisma.IntFilter<"WorkComicAuthor"> | number
  comicId?: Prisma.IntFilter<"WorkComicAuthor"> | number
  authorId?: Prisma.IntFilter<"WorkComicAuthor"> | number
  roleType?: Prisma.IntFilter<"WorkComicAuthor"> | number
  isPrimary?: Prisma.BoolFilter<"WorkComicAuthor"> | boolean
  sortOrder?: Prisma.IntFilter<"WorkComicAuthor"> | number
  createdAt?: Prisma.DateTimeFilter<"WorkComicAuthor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkComicAuthor"> | Date | string
  comic?: Prisma.XOR<Prisma.WorkComicScalarRelationFilter, Prisma.WorkComicWhereInput>
  author?: Prisma.XOR<Prisma.WorkAuthorScalarRelationFilter, Prisma.WorkAuthorWhereInput>
}

export type WorkComicAuthorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  roleType?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comic?: Prisma.WorkComicOrderByWithRelationInput
  author?: Prisma.WorkAuthorOrderByWithRelationInput
}

export type WorkComicAuthorWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  comicId_authorId?: Prisma.WorkComicAuthorComicIdAuthorIdCompoundUniqueInput
  AND?: Prisma.WorkComicAuthorWhereInput | Prisma.WorkComicAuthorWhereInput[]
  OR?: Prisma.WorkComicAuthorWhereInput[]
  NOT?: Prisma.WorkComicAuthorWhereInput | Prisma.WorkComicAuthorWhereInput[]
  comicId?: Prisma.IntFilter<"WorkComicAuthor"> | number
  authorId?: Prisma.IntFilter<"WorkComicAuthor"> | number
  roleType?: Prisma.IntFilter<"WorkComicAuthor"> | number
  isPrimary?: Prisma.BoolFilter<"WorkComicAuthor"> | boolean
  sortOrder?: Prisma.IntFilter<"WorkComicAuthor"> | number
  createdAt?: Prisma.DateTimeFilter<"WorkComicAuthor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkComicAuthor"> | Date | string
  comic?: Prisma.XOR<Prisma.WorkComicScalarRelationFilter, Prisma.WorkComicWhereInput>
  author?: Prisma.XOR<Prisma.WorkAuthorScalarRelationFilter, Prisma.WorkAuthorWhereInput>
}, "id" | "comicId_authorId">

export type WorkComicAuthorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  roleType?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WorkComicAuthorCountOrderByAggregateInput
  _avg?: Prisma.WorkComicAuthorAvgOrderByAggregateInput
  _max?: Prisma.WorkComicAuthorMaxOrderByAggregateInput
  _min?: Prisma.WorkComicAuthorMinOrderByAggregateInput
  _sum?: Prisma.WorkComicAuthorSumOrderByAggregateInput
}

export type WorkComicAuthorScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkComicAuthorScalarWhereWithAggregatesInput | Prisma.WorkComicAuthorScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkComicAuthorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkComicAuthorScalarWhereWithAggregatesInput | Prisma.WorkComicAuthorScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WorkComicAuthor"> | number
  comicId?: Prisma.IntWithAggregatesFilter<"WorkComicAuthor"> | number
  authorId?: Prisma.IntWithAggregatesFilter<"WorkComicAuthor"> | number
  roleType?: Prisma.IntWithAggregatesFilter<"WorkComicAuthor"> | number
  isPrimary?: Prisma.BoolWithAggregatesFilter<"WorkComicAuthor"> | boolean
  sortOrder?: Prisma.IntWithAggregatesFilter<"WorkComicAuthor"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkComicAuthor"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkComicAuthor"> | Date | string
}

export type WorkComicAuthorCreateInput = {
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  comic: Prisma.WorkComicCreateNestedOneWithoutComicAuthorsInput
  author: Prisma.WorkAuthorCreateNestedOneWithoutComicAuthorsInput
}

export type WorkComicAuthorUncheckedCreateInput = {
  id?: number
  comicId: number
  authorId: number
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkComicAuthorUpdateInput = {
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comic?: Prisma.WorkComicUpdateOneRequiredWithoutComicAuthorsNestedInput
  author?: Prisma.WorkAuthorUpdateOneRequiredWithoutComicAuthorsNestedInput
}

export type WorkComicAuthorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comicId?: Prisma.IntFieldUpdateOperationsInput | number
  authorId?: Prisma.IntFieldUpdateOperationsInput | number
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkComicAuthorCreateManyInput = {
  id?: number
  comicId: number
  authorId: number
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkComicAuthorUpdateManyMutationInput = {
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkComicAuthorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comicId?: Prisma.IntFieldUpdateOperationsInput | number
  authorId?: Prisma.IntFieldUpdateOperationsInput | number
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkComicAuthorListRelationFilter = {
  every?: Prisma.WorkComicAuthorWhereInput
  some?: Prisma.WorkComicAuthorWhereInput
  none?: Prisma.WorkComicAuthorWhereInput
}

export type WorkComicAuthorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkComicAuthorComicIdAuthorIdCompoundUniqueInput = {
  comicId: number
  authorId: number
}

export type WorkComicAuthorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  roleType?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkComicAuthorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  roleType?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
}

export type WorkComicAuthorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  roleType?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkComicAuthorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  roleType?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkComicAuthorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  comicId?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  roleType?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
}

export type WorkComicAuthorCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutAuthorInput, Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput> | Prisma.WorkComicAuthorCreateWithoutAuthorInput[] | Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.WorkComicAuthorCreateOrConnectWithoutAuthorInput | Prisma.WorkComicAuthorCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.WorkComicAuthorCreateManyAuthorInputEnvelope
  connect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
}

export type WorkComicAuthorUncheckedCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutAuthorInput, Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput> | Prisma.WorkComicAuthorCreateWithoutAuthorInput[] | Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.WorkComicAuthorCreateOrConnectWithoutAuthorInput | Prisma.WorkComicAuthorCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.WorkComicAuthorCreateManyAuthorInputEnvelope
  connect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
}

export type WorkComicAuthorUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutAuthorInput, Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput> | Prisma.WorkComicAuthorCreateWithoutAuthorInput[] | Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.WorkComicAuthorCreateOrConnectWithoutAuthorInput | Prisma.WorkComicAuthorCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.WorkComicAuthorUpsertWithWhereUniqueWithoutAuthorInput | Prisma.WorkComicAuthorUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.WorkComicAuthorCreateManyAuthorInputEnvelope
  set?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  disconnect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  delete?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  connect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  update?: Prisma.WorkComicAuthorUpdateWithWhereUniqueWithoutAuthorInput | Prisma.WorkComicAuthorUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.WorkComicAuthorUpdateManyWithWhereWithoutAuthorInput | Prisma.WorkComicAuthorUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.WorkComicAuthorScalarWhereInput | Prisma.WorkComicAuthorScalarWhereInput[]
}

export type WorkComicAuthorUncheckedUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutAuthorInput, Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput> | Prisma.WorkComicAuthorCreateWithoutAuthorInput[] | Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.WorkComicAuthorCreateOrConnectWithoutAuthorInput | Prisma.WorkComicAuthorCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.WorkComicAuthorUpsertWithWhereUniqueWithoutAuthorInput | Prisma.WorkComicAuthorUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.WorkComicAuthorCreateManyAuthorInputEnvelope
  set?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  disconnect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  delete?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  connect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  update?: Prisma.WorkComicAuthorUpdateWithWhereUniqueWithoutAuthorInput | Prisma.WorkComicAuthorUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.WorkComicAuthorUpdateManyWithWhereWithoutAuthorInput | Prisma.WorkComicAuthorUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.WorkComicAuthorScalarWhereInput | Prisma.WorkComicAuthorScalarWhereInput[]
}

export type WorkComicAuthorCreateNestedManyWithoutComicInput = {
  create?: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutComicInput, Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput> | Prisma.WorkComicAuthorCreateWithoutComicInput[] | Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput[]
  connectOrCreate?: Prisma.WorkComicAuthorCreateOrConnectWithoutComicInput | Prisma.WorkComicAuthorCreateOrConnectWithoutComicInput[]
  createMany?: Prisma.WorkComicAuthorCreateManyComicInputEnvelope
  connect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
}

export type WorkComicAuthorUncheckedCreateNestedManyWithoutComicInput = {
  create?: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutComicInput, Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput> | Prisma.WorkComicAuthorCreateWithoutComicInput[] | Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput[]
  connectOrCreate?: Prisma.WorkComicAuthorCreateOrConnectWithoutComicInput | Prisma.WorkComicAuthorCreateOrConnectWithoutComicInput[]
  createMany?: Prisma.WorkComicAuthorCreateManyComicInputEnvelope
  connect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
}

export type WorkComicAuthorUpdateManyWithoutComicNestedInput = {
  create?: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutComicInput, Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput> | Prisma.WorkComicAuthorCreateWithoutComicInput[] | Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput[]
  connectOrCreate?: Prisma.WorkComicAuthorCreateOrConnectWithoutComicInput | Prisma.WorkComicAuthorCreateOrConnectWithoutComicInput[]
  upsert?: Prisma.WorkComicAuthorUpsertWithWhereUniqueWithoutComicInput | Prisma.WorkComicAuthorUpsertWithWhereUniqueWithoutComicInput[]
  createMany?: Prisma.WorkComicAuthorCreateManyComicInputEnvelope
  set?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  disconnect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  delete?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  connect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  update?: Prisma.WorkComicAuthorUpdateWithWhereUniqueWithoutComicInput | Prisma.WorkComicAuthorUpdateWithWhereUniqueWithoutComicInput[]
  updateMany?: Prisma.WorkComicAuthorUpdateManyWithWhereWithoutComicInput | Prisma.WorkComicAuthorUpdateManyWithWhereWithoutComicInput[]
  deleteMany?: Prisma.WorkComicAuthorScalarWhereInput | Prisma.WorkComicAuthorScalarWhereInput[]
}

export type WorkComicAuthorUncheckedUpdateManyWithoutComicNestedInput = {
  create?: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutComicInput, Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput> | Prisma.WorkComicAuthorCreateWithoutComicInput[] | Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput[]
  connectOrCreate?: Prisma.WorkComicAuthorCreateOrConnectWithoutComicInput | Prisma.WorkComicAuthorCreateOrConnectWithoutComicInput[]
  upsert?: Prisma.WorkComicAuthorUpsertWithWhereUniqueWithoutComicInput | Prisma.WorkComicAuthorUpsertWithWhereUniqueWithoutComicInput[]
  createMany?: Prisma.WorkComicAuthorCreateManyComicInputEnvelope
  set?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  disconnect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  delete?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  connect?: Prisma.WorkComicAuthorWhereUniqueInput | Prisma.WorkComicAuthorWhereUniqueInput[]
  update?: Prisma.WorkComicAuthorUpdateWithWhereUniqueWithoutComicInput | Prisma.WorkComicAuthorUpdateWithWhereUniqueWithoutComicInput[]
  updateMany?: Prisma.WorkComicAuthorUpdateManyWithWhereWithoutComicInput | Prisma.WorkComicAuthorUpdateManyWithWhereWithoutComicInput[]
  deleteMany?: Prisma.WorkComicAuthorScalarWhereInput | Prisma.WorkComicAuthorScalarWhereInput[]
}

export type WorkComicAuthorCreateWithoutAuthorInput = {
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  comic: Prisma.WorkComicCreateNestedOneWithoutComicAuthorsInput
}

export type WorkComicAuthorUncheckedCreateWithoutAuthorInput = {
  id?: number
  comicId: number
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkComicAuthorCreateOrConnectWithoutAuthorInput = {
  where: Prisma.WorkComicAuthorWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutAuthorInput, Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput>
}

export type WorkComicAuthorCreateManyAuthorInputEnvelope = {
  data: Prisma.WorkComicAuthorCreateManyAuthorInput | Prisma.WorkComicAuthorCreateManyAuthorInput[]
  skipDuplicates?: boolean
}

export type WorkComicAuthorUpsertWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.WorkComicAuthorWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkComicAuthorUpdateWithoutAuthorInput, Prisma.WorkComicAuthorUncheckedUpdateWithoutAuthorInput>
  create: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutAuthorInput, Prisma.WorkComicAuthorUncheckedCreateWithoutAuthorInput>
}

export type WorkComicAuthorUpdateWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.WorkComicAuthorWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkComicAuthorUpdateWithoutAuthorInput, Prisma.WorkComicAuthorUncheckedUpdateWithoutAuthorInput>
}

export type WorkComicAuthorUpdateManyWithWhereWithoutAuthorInput = {
  where: Prisma.WorkComicAuthorScalarWhereInput
  data: Prisma.XOR<Prisma.WorkComicAuthorUpdateManyMutationInput, Prisma.WorkComicAuthorUncheckedUpdateManyWithoutAuthorInput>
}

export type WorkComicAuthorScalarWhereInput = {
  AND?: Prisma.WorkComicAuthorScalarWhereInput | Prisma.WorkComicAuthorScalarWhereInput[]
  OR?: Prisma.WorkComicAuthorScalarWhereInput[]
  NOT?: Prisma.WorkComicAuthorScalarWhereInput | Prisma.WorkComicAuthorScalarWhereInput[]
  id?: Prisma.IntFilter<"WorkComicAuthor"> | number
  comicId?: Prisma.IntFilter<"WorkComicAuthor"> | number
  authorId?: Prisma.IntFilter<"WorkComicAuthor"> | number
  roleType?: Prisma.IntFilter<"WorkComicAuthor"> | number
  isPrimary?: Prisma.BoolFilter<"WorkComicAuthor"> | boolean
  sortOrder?: Prisma.IntFilter<"WorkComicAuthor"> | number
  createdAt?: Prisma.DateTimeFilter<"WorkComicAuthor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkComicAuthor"> | Date | string
}

export type WorkComicAuthorCreateWithoutComicInput = {
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  author: Prisma.WorkAuthorCreateNestedOneWithoutComicAuthorsInput
}

export type WorkComicAuthorUncheckedCreateWithoutComicInput = {
  id?: number
  authorId: number
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkComicAuthorCreateOrConnectWithoutComicInput = {
  where: Prisma.WorkComicAuthorWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutComicInput, Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput>
}

export type WorkComicAuthorCreateManyComicInputEnvelope = {
  data: Prisma.WorkComicAuthorCreateManyComicInput | Prisma.WorkComicAuthorCreateManyComicInput[]
  skipDuplicates?: boolean
}

export type WorkComicAuthorUpsertWithWhereUniqueWithoutComicInput = {
  where: Prisma.WorkComicAuthorWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkComicAuthorUpdateWithoutComicInput, Prisma.WorkComicAuthorUncheckedUpdateWithoutComicInput>
  create: Prisma.XOR<Prisma.WorkComicAuthorCreateWithoutComicInput, Prisma.WorkComicAuthorUncheckedCreateWithoutComicInput>
}

export type WorkComicAuthorUpdateWithWhereUniqueWithoutComicInput = {
  where: Prisma.WorkComicAuthorWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkComicAuthorUpdateWithoutComicInput, Prisma.WorkComicAuthorUncheckedUpdateWithoutComicInput>
}

export type WorkComicAuthorUpdateManyWithWhereWithoutComicInput = {
  where: Prisma.WorkComicAuthorScalarWhereInput
  data: Prisma.XOR<Prisma.WorkComicAuthorUpdateManyMutationInput, Prisma.WorkComicAuthorUncheckedUpdateManyWithoutComicInput>
}

export type WorkComicAuthorCreateManyAuthorInput = {
  id?: number
  comicId: number
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkComicAuthorUpdateWithoutAuthorInput = {
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comic?: Prisma.WorkComicUpdateOneRequiredWithoutComicAuthorsNestedInput
}

export type WorkComicAuthorUncheckedUpdateWithoutAuthorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comicId?: Prisma.IntFieldUpdateOperationsInput | number
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkComicAuthorUncheckedUpdateManyWithoutAuthorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  comicId?: Prisma.IntFieldUpdateOperationsInput | number
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkComicAuthorCreateManyComicInput = {
  id?: number
  authorId: number
  roleType?: number
  isPrimary?: boolean
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkComicAuthorUpdateWithoutComicInput = {
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  author?: Prisma.WorkAuthorUpdateOneRequiredWithoutComicAuthorsNestedInput
}

export type WorkComicAuthorUncheckedUpdateWithoutComicInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  authorId?: Prisma.IntFieldUpdateOperationsInput | number
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkComicAuthorUncheckedUpdateManyWithoutComicInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  authorId?: Prisma.IntFieldUpdateOperationsInput | number
  roleType?: Prisma.IntFieldUpdateOperationsInput | number
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WorkComicAuthorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comicId?: boolean
  authorId?: boolean
  roleType?: boolean
  isPrimary?: boolean
  sortOrder?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  author?: boolean | Prisma.WorkAuthorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workComicAuthor"]>

export type WorkComicAuthorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comicId?: boolean
  authorId?: boolean
  roleType?: boolean
  isPrimary?: boolean
  sortOrder?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  author?: boolean | Prisma.WorkAuthorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workComicAuthor"]>

export type WorkComicAuthorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  comicId?: boolean
  authorId?: boolean
  roleType?: boolean
  isPrimary?: boolean
  sortOrder?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  author?: boolean | Prisma.WorkAuthorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workComicAuthor"]>

export type WorkComicAuthorSelectScalar = {
  id?: boolean
  comicId?: boolean
  authorId?: boolean
  roleType?: boolean
  isPrimary?: boolean
  sortOrder?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WorkComicAuthorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "comicId" | "authorId" | "roleType" | "isPrimary" | "sortOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["workComicAuthor"]>
export type WorkComicAuthorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  author?: boolean | Prisma.WorkAuthorDefaultArgs<ExtArgs>
}
export type WorkComicAuthorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  author?: boolean | Prisma.WorkAuthorDefaultArgs<ExtArgs>
}
export type WorkComicAuthorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>
  author?: boolean | Prisma.WorkAuthorDefaultArgs<ExtArgs>
}

export type $WorkComicAuthorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkComicAuthor"
  objects: {
    comic: Prisma.$WorkComicPayload<ExtArgs>
    author: Prisma.$WorkAuthorPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * ‰∏ªÈîÆID
     */
    id: number
    /**
     * Êº´ÁîªID
     */
    comicId: number
    /**
     * ‰ΩúËÄÖID
     */
    authorId: number
    /**
     * ‰ΩúËÄÖËßíËâ≤Á±ªÂûãÔºà1=Âéü‰ΩúËÄÖ, 2=ÊèíÁîªÂ∏à, 4=ÁºñÂâß, 8=ÂÖ∂‰ªñÔºâ
     */
    roleType: number
    /**
     * ÊòØÂê¶‰∏∫‰∏ªË¶Å‰ΩúËÄÖ
     */
    isPrimary: boolean
    /**
     * ÊéíÂ∫èÊùÉÈáçÔºàÁî®‰∫éÂ§ö‰ΩúËÄÖÊó∂ÁöÑÊòæÁ§∫È°∫Â∫èÔºâ
     */
    sortOrder: number
    /**
     * ÂàõÂª∫Êó∂Èó¥
     */
    createdAt: Date
    /**
     * Êõ¥Êñ∞Êó∂Èó¥
     */
    updatedAt: Date
  }, ExtArgs["result"]["workComicAuthor"]>
  composites: {}
}

export type WorkComicAuthorGetPayload<S extends boolean | null | undefined | WorkComicAuthorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload, S>

export type WorkComicAuthorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkComicAuthorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: WorkComicAuthorCountAggregateInputType | true
  }

export interface WorkComicAuthorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkComicAuthor'], meta: { name: 'WorkComicAuthor' } }
  /**
   * Find zero or one WorkComicAuthor that matches the filter.
   * @param {WorkComicAuthorFindUniqueArgs} args - Arguments to find a WorkComicAuthor
   * @example
   * // Get one WorkComicAuthor
   * const workComicAuthor = await prisma.workComicAuthor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkComicAuthorFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkComicAuthorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkComicAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkComicAuthor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkComicAuthorFindUniqueOrThrowArgs} args - Arguments to find a WorkComicAuthor
   * @example
   * // Get one WorkComicAuthor
   * const workComicAuthor = await prisma.workComicAuthor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkComicAuthorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkComicAuthorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkComicAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkComicAuthor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicAuthorFindFirstArgs} args - Arguments to find a WorkComicAuthor
   * @example
   * // Get one WorkComicAuthor
   * const workComicAuthor = await prisma.workComicAuthor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkComicAuthorFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkComicAuthorFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkComicAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkComicAuthor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicAuthorFindFirstOrThrowArgs} args - Arguments to find a WorkComicAuthor
   * @example
   * // Get one WorkComicAuthor
   * const workComicAuthor = await prisma.workComicAuthor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkComicAuthorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkComicAuthorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkComicAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkComicAuthors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicAuthorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkComicAuthors
   * const workComicAuthors = await prisma.workComicAuthor.findMany()
   * 
   * // Get first 10 WorkComicAuthors
   * const workComicAuthors = await prisma.workComicAuthor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workComicAuthorWithIdOnly = await prisma.workComicAuthor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkComicAuthorFindManyArgs>(args?: Prisma.SelectSubset<T, WorkComicAuthorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkComicAuthor.
   * @param {WorkComicAuthorCreateArgs} args - Arguments to create a WorkComicAuthor.
   * @example
   * // Create one WorkComicAuthor
   * const WorkComicAuthor = await prisma.workComicAuthor.create({
   *   data: {
   *     // ... data to create a WorkComicAuthor
   *   }
   * })
   * 
   */
  create<T extends WorkComicAuthorCreateArgs>(args: Prisma.SelectSubset<T, WorkComicAuthorCreateArgs<ExtArgs>>): Prisma.Prisma__WorkComicAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkComicAuthors.
   * @param {WorkComicAuthorCreateManyArgs} args - Arguments to create many WorkComicAuthors.
   * @example
   * // Create many WorkComicAuthors
   * const workComicAuthor = await prisma.workComicAuthor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkComicAuthorCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkComicAuthorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkComicAuthors and returns the data saved in the database.
   * @param {WorkComicAuthorCreateManyAndReturnArgs} args - Arguments to create many WorkComicAuthors.
   * @example
   * // Create many WorkComicAuthors
   * const workComicAuthor = await prisma.workComicAuthor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkComicAuthors and only return the `id`
   * const workComicAuthorWithIdOnly = await prisma.workComicAuthor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkComicAuthorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkComicAuthorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkComicAuthor.
   * @param {WorkComicAuthorDeleteArgs} args - Arguments to delete one WorkComicAuthor.
   * @example
   * // Delete one WorkComicAuthor
   * const WorkComicAuthor = await prisma.workComicAuthor.delete({
   *   where: {
   *     // ... filter to delete one WorkComicAuthor
   *   }
   * })
   * 
   */
  delete<T extends WorkComicAuthorDeleteArgs>(args: Prisma.SelectSubset<T, WorkComicAuthorDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkComicAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkComicAuthor.
   * @param {WorkComicAuthorUpdateArgs} args - Arguments to update one WorkComicAuthor.
   * @example
   * // Update one WorkComicAuthor
   * const workComicAuthor = await prisma.workComicAuthor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkComicAuthorUpdateArgs>(args: Prisma.SelectSubset<T, WorkComicAuthorUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkComicAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkComicAuthors.
   * @param {WorkComicAuthorDeleteManyArgs} args - Arguments to filter WorkComicAuthors to delete.
   * @example
   * // Delete a few WorkComicAuthors
   * const { count } = await prisma.workComicAuthor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkComicAuthorDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkComicAuthorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkComicAuthors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicAuthorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkComicAuthors
   * const workComicAuthor = await prisma.workComicAuthor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkComicAuthorUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkComicAuthorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkComicAuthors and returns the data updated in the database.
   * @param {WorkComicAuthorUpdateManyAndReturnArgs} args - Arguments to update many WorkComicAuthors.
   * @example
   * // Update many WorkComicAuthors
   * const workComicAuthor = await prisma.workComicAuthor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkComicAuthors and only return the `id`
   * const workComicAuthorWithIdOnly = await prisma.workComicAuthor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkComicAuthorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkComicAuthorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkComicAuthor.
   * @param {WorkComicAuthorUpsertArgs} args - Arguments to update or create a WorkComicAuthor.
   * @example
   * // Update or create a WorkComicAuthor
   * const workComicAuthor = await prisma.workComicAuthor.upsert({
   *   create: {
   *     // ... data to create a WorkComicAuthor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkComicAuthor we want to update
   *   }
   * })
   */
  upsert<T extends WorkComicAuthorUpsertArgs>(args: Prisma.SelectSubset<T, WorkComicAuthorUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkComicAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkComicAuthorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkComicAuthors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicAuthorCountArgs} args - Arguments to filter WorkComicAuthors to count.
   * @example
   * // Count the number of WorkComicAuthors
   * const count = await prisma.workComicAuthor.count({
   *   where: {
   *     // ... the filter for the WorkComicAuthors we want to count
   *   }
   * })
  **/
  count<T extends WorkComicAuthorCountArgs>(
    args?: Prisma.Subset<T, WorkComicAuthorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkComicAuthorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkComicAuthor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicAuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkComicAuthorAggregateArgs>(args: Prisma.Subset<T, WorkComicAuthorAggregateArgs>): Prisma.PrismaPromise<GetWorkComicAuthorAggregateType<T>>

  /**
   * Group by WorkComicAuthor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicAuthorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkComicAuthorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkComicAuthorGroupByArgs['orderBy'] }
      : { orderBy?: WorkComicAuthorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkComicAuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkComicAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkComicAuthor model
 */
readonly fields: WorkComicAuthorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkComicAuthor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkComicAuthorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  comic<T extends Prisma.WorkComicDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkComicDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkComicClient<runtime.Types.Result.GetResult<Prisma.$WorkComicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  author<T extends Prisma.WorkAuthorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkAuthorDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkAuthorClient<runtime.Types.Result.GetResult<Prisma.$WorkAuthorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkComicAuthor model
 */
export interface WorkComicAuthorFieldRefs {
  readonly id: Prisma.FieldRef<"WorkComicAuthor", 'Int'>
  readonly comicId: Prisma.FieldRef<"WorkComicAuthor", 'Int'>
  readonly authorId: Prisma.FieldRef<"WorkComicAuthor", 'Int'>
  readonly roleType: Prisma.FieldRef<"WorkComicAuthor", 'Int'>
  readonly isPrimary: Prisma.FieldRef<"WorkComicAuthor", 'Boolean'>
  readonly sortOrder: Prisma.FieldRef<"WorkComicAuthor", 'Int'>
  readonly createdAt: Prisma.FieldRef<"WorkComicAuthor", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkComicAuthor", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WorkComicAuthor findUnique
 */
export type WorkComicAuthorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicAuthor to fetch.
   */
  where: Prisma.WorkComicAuthorWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor findUniqueOrThrow
 */
export type WorkComicAuthorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicAuthor to fetch.
   */
  where: Prisma.WorkComicAuthorWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor findFirst
 */
export type WorkComicAuthorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicAuthor to fetch.
   */
  where?: Prisma.WorkComicAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkComicAuthors to fetch.
   */
  orderBy?: Prisma.WorkComicAuthorOrderByWithRelationInput | Prisma.WorkComicAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkComicAuthors.
   */
  cursor?: Prisma.WorkComicAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` WorkComicAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkComicAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkComicAuthors.
   */
  distinct?: Prisma.WorkComicAuthorScalarFieldEnum | Prisma.WorkComicAuthorScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor findFirstOrThrow
 */
export type WorkComicAuthorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicAuthor to fetch.
   */
  where?: Prisma.WorkComicAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkComicAuthors to fetch.
   */
  orderBy?: Prisma.WorkComicAuthorOrderByWithRelationInput | Prisma.WorkComicAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkComicAuthors.
   */
  cursor?: Prisma.WorkComicAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` WorkComicAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkComicAuthors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkComicAuthors.
   */
  distinct?: Prisma.WorkComicAuthorScalarFieldEnum | Prisma.WorkComicAuthorScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor findMany
 */
export type WorkComicAuthorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * Filter, which WorkComicAuthors to fetch.
   */
  where?: Prisma.WorkComicAuthorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkComicAuthors to fetch.
   */
  orderBy?: Prisma.WorkComicAuthorOrderByWithRelationInput | Prisma.WorkComicAuthorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkComicAuthors.
   */
  cursor?: Prisma.WorkComicAuthorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `¬±n` WorkComicAuthors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkComicAuthors.
   */
  skip?: number
  distinct?: Prisma.WorkComicAuthorScalarFieldEnum | Prisma.WorkComicAuthorScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor create
 */
export type WorkComicAuthorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkComicAuthor.
   */
  data: Prisma.XOR<Prisma.WorkComicAuthorCreateInput, Prisma.WorkComicAuthorUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor createMany
 */
export type WorkComicAuthorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkComicAuthors.
   */
  data: Prisma.WorkComicAuthorCreateManyInput | Prisma.WorkComicAuthorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkComicAuthor createManyAndReturn
 */
export type WorkComicAuthorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * The data used to create many WorkComicAuthors.
   */
  data: Prisma.WorkComicAuthorCreateManyInput | Prisma.WorkComicAuthorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkComicAuthor update
 */
export type WorkComicAuthorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkComicAuthor.
   */
  data: Prisma.XOR<Prisma.WorkComicAuthorUpdateInput, Prisma.WorkComicAuthorUncheckedUpdateInput>
  /**
   * Choose, which WorkComicAuthor to update.
   */
  where: Prisma.WorkComicAuthorWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor updateMany
 */
export type WorkComicAuthorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkComicAuthors.
   */
  data: Prisma.XOR<Prisma.WorkComicAuthorUpdateManyMutationInput, Prisma.WorkComicAuthorUncheckedUpdateManyInput>
  /**
   * Filter which WorkComicAuthors to update
   */
  where?: Prisma.WorkComicAuthorWhereInput
  /**
   * Limit how many WorkComicAuthors to update.
   */
  limit?: number
}

/**
 * WorkComicAuthor updateManyAndReturn
 */
export type WorkComicAuthorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * The data used to update WorkComicAuthors.
   */
  data: Prisma.XOR<Prisma.WorkComicAuthorUpdateManyMutationInput, Prisma.WorkComicAuthorUncheckedUpdateManyInput>
  /**
   * Filter which WorkComicAuthors to update
   */
  where?: Prisma.WorkComicAuthorWhereInput
  /**
   * Limit how many WorkComicAuthors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkComicAuthor upsert
 */
export type WorkComicAuthorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkComicAuthor to update in case it exists.
   */
  where: Prisma.WorkComicAuthorWhereUniqueInput
  /**
   * In case the WorkComicAuthor found by the `where` argument doesn't exist, create a new WorkComicAuthor with this data.
   */
  create: Prisma.XOR<Prisma.WorkComicAuthorCreateInput, Prisma.WorkComicAuthorUncheckedCreateInput>
  /**
   * In case the WorkComicAuthor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkComicAuthorUpdateInput, Prisma.WorkComicAuthorUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor delete
 */
export type WorkComicAuthorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
  /**
   * Filter which WorkComicAuthor to delete.
   */
  where: Prisma.WorkComicAuthorWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkComicAuthor deleteMany
 */
export type WorkComicAuthorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkComicAuthors to delete
   */
  where?: Prisma.WorkComicAuthorWhereInput
  /**
   * Limit how many WorkComicAuthors to delete.
   */
  limit?: number
}

/**
 * WorkComicAuthor without action
 */
export type WorkComicAuthorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null
}
