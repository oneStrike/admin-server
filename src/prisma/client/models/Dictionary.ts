/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Dictionary` model and its related types.
 *
 * 🟢 You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Dictionary
 *
 */
export type DictionaryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$DictionaryPayload>;

export type AggregateDictionary = {
  _count: DictionaryCountAggregateOutputType | null;
  _avg: DictionaryAvgAggregateOutputType | null;
  _sum: DictionarySumAggregateOutputType | null;
  _min: DictionaryMinAggregateOutputType | null;
  _max: DictionaryMaxAggregateOutputType | null;
};

export type DictionaryAvgAggregateOutputType = {
  id: number | null;
};

export type DictionarySumAggregateOutputType = {
  id: number | null;
};

export type DictionaryMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  code: string | null;
  cover: string | null;
  isEnabled: boolean | null;
  description: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  deletedAt: Date | null;
};

export type DictionaryMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  code: string | null;
  cover: string | null;
  isEnabled: boolean | null;
  description: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  deletedAt: Date | null;
};

export type DictionaryCountAggregateOutputType = {
  id: number;
  name: number;
  code: number;
  cover: number;
  isEnabled: number;
  description: number;
  createdAt: number;
  updatedAt: number;
  deletedAt: number;
  _all: number;
};

export type DictionaryAvgAggregateInputType = {
  id?: true;
};

export type DictionarySumAggregateInputType = {
  id?: true;
};

export type DictionaryMinAggregateInputType = {
  id?: true;
  name?: true;
  code?: true;
  cover?: true;
  isEnabled?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
  deletedAt?: true;
};

export type DictionaryMaxAggregateInputType = {
  id?: true;
  name?: true;
  code?: true;
  cover?: true;
  isEnabled?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
  deletedAt?: true;
};

export type DictionaryCountAggregateInputType = {
  id?: true;
  name?: true;
  code?: true;
  cover?: true;
  isEnabled?: true;
  description?: true;
  createdAt?: true;
  updatedAt?: true;
  deletedAt?: true;
  _all?: true;
};

export type DictionaryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Dictionary to aggregate.
   */
  where?: Prisma.DictionaryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Dictionaries to fetch.
   */
  orderBy?:
    | Prisma.DictionaryOrderByWithRelationInput
    | Prisma.DictionaryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.DictionaryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` Dictionaries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Dictionaries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Dictionaries
   **/
  _count?: true | DictionaryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: DictionaryAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: DictionarySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: DictionaryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: DictionaryMaxAggregateInputType;
};

export type GetDictionaryAggregateType<T extends DictionaryAggregateArgs> = {
  [P in keyof T & keyof AggregateDictionary]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDictionary[P]>
    : Prisma.GetScalarType<T[P], AggregateDictionary[P]>;
};

export type DictionaryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.DictionaryWhereInput;
  orderBy?:
    | Prisma.DictionaryOrderByWithAggregationInput
    | Prisma.DictionaryOrderByWithAggregationInput[];
  by: Prisma.DictionaryScalarFieldEnum[] | Prisma.DictionaryScalarFieldEnum;
  having?: Prisma.DictionaryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: DictionaryCountAggregateInputType | true;
  _avg?: DictionaryAvgAggregateInputType;
  _sum?: DictionarySumAggregateInputType;
  _min?: DictionaryMinAggregateInputType;
  _max?: DictionaryMaxAggregateInputType;
};

export type DictionaryGroupByOutputType = {
  id: number;
  name: string;
  code: string;
  cover: string | null;
  isEnabled: boolean;
  description: string | null;
  createdAt: Date;
  updatedAt: Date;
  deletedAt: Date | null;
  _count: DictionaryCountAggregateOutputType | null;
  _avg: DictionaryAvgAggregateOutputType | null;
  _sum: DictionarySumAggregateOutputType | null;
  _min: DictionaryMinAggregateOutputType | null;
  _max: DictionaryMaxAggregateOutputType | null;
};

type GetDictionaryGroupByPayload<T extends DictionaryGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<DictionaryGroupByOutputType, T['by']> & {
        [P in keyof T & keyof DictionaryGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DictionaryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DictionaryGroupByOutputType[P]>;
      }
    >
  >;

export type DictionaryWhereInput = {
  AND?: Prisma.DictionaryWhereInput | Prisma.DictionaryWhereInput[];
  OR?: Prisma.DictionaryWhereInput[];
  NOT?: Prisma.DictionaryWhereInput | Prisma.DictionaryWhereInput[];
  id?: Prisma.IntFilter<'Dictionary'> | number;
  name?: Prisma.StringFilter<'Dictionary'> | string;
  code?: Prisma.StringFilter<'Dictionary'> | string;
  cover?: Prisma.StringNullableFilter<'Dictionary'> | string | null;
  isEnabled?: Prisma.BoolFilter<'Dictionary'> | boolean;
  description?: Prisma.StringNullableFilter<'Dictionary'> | string | null;
  createdAt?: Prisma.DateTimeFilter<'Dictionary'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Dictionary'> | Date | string;
  deletedAt?:
    | Prisma.DateTimeNullableFilter<'Dictionary'>
    | Date
    | string
    | null;
  dictionaryItems?: Prisma.DictionaryItemListRelationFilter;
};

export type DictionaryOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  cover?: Prisma.SortOrderInput | Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  dictionaryItems?: Prisma.DictionaryItemOrderByRelationAggregateInput;
};

export type DictionaryWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    name?: string;
    code?: string;
    AND?: Prisma.DictionaryWhereInput | Prisma.DictionaryWhereInput[];
    OR?: Prisma.DictionaryWhereInput[];
    NOT?: Prisma.DictionaryWhereInput | Prisma.DictionaryWhereInput[];
    cover?: Prisma.StringNullableFilter<'Dictionary'> | string | null;
    isEnabled?: Prisma.BoolFilter<'Dictionary'> | boolean;
    description?: Prisma.StringNullableFilter<'Dictionary'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'Dictionary'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Dictionary'> | Date | string;
    deletedAt?:
      | Prisma.DateTimeNullableFilter<'Dictionary'>
      | Date
      | string
      | null;
    dictionaryItems?: Prisma.DictionaryItemListRelationFilter;
  },
  'id' | 'name' | 'code'
>;

export type DictionaryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  cover?: Prisma.SortOrderInput | Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.DictionaryCountOrderByAggregateInput;
  _avg?: Prisma.DictionaryAvgOrderByAggregateInput;
  _max?: Prisma.DictionaryMaxOrderByAggregateInput;
  _min?: Prisma.DictionaryMinOrderByAggregateInput;
  _sum?: Prisma.DictionarySumOrderByAggregateInput;
};

export type DictionaryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.DictionaryScalarWhereWithAggregatesInput
    | Prisma.DictionaryScalarWhereWithAggregatesInput[];
  OR?: Prisma.DictionaryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.DictionaryScalarWhereWithAggregatesInput
    | Prisma.DictionaryScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'Dictionary'> | number;
  name?: Prisma.StringWithAggregatesFilter<'Dictionary'> | string;
  code?: Prisma.StringWithAggregatesFilter<'Dictionary'> | string;
  cover?:
    | Prisma.StringNullableWithAggregatesFilter<'Dictionary'>
    | string
    | null;
  isEnabled?: Prisma.BoolWithAggregatesFilter<'Dictionary'> | boolean;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'Dictionary'>
    | string
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Dictionary'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Dictionary'> | Date | string;
  deletedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'Dictionary'>
    | Date
    | string
    | null;
};

export type DictionaryCreateInput = {
  name: string;
  code: string;
  cover?: string | null;
  isEnabled?: boolean;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
  dictionaryItems?: Prisma.DictionaryItemCreateNestedManyWithoutParentDictionaryInput;
};

export type DictionaryUncheckedCreateInput = {
  id?: number;
  name: string;
  code: string;
  cover?: string | null;
  isEnabled?: boolean;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
  dictionaryItems?: Prisma.DictionaryItemUncheckedCreateNestedManyWithoutParentDictionaryInput;
};

export type DictionaryUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  dictionaryItems?: Prisma.DictionaryItemUpdateManyWithoutParentDictionaryNestedInput;
};

export type DictionaryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  dictionaryItems?: Prisma.DictionaryItemUncheckedUpdateManyWithoutParentDictionaryNestedInput;
};

export type DictionaryCreateManyInput = {
  id?: number;
  name: string;
  code: string;
  cover?: string | null;
  isEnabled?: boolean;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
};

export type DictionaryUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type DictionaryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type DictionaryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  cover?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type DictionaryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type DictionaryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  cover?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type DictionaryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  code?: Prisma.SortOrder;
  cover?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type DictionarySumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type DictionaryScalarRelationFilter = {
  is?: Prisma.DictionaryWhereInput;
  isNot?: Prisma.DictionaryWhereInput;
};

export type DictionaryCreateNestedOneWithoutDictionaryItemsInput = {
  create?: Prisma.XOR<
    Prisma.DictionaryCreateWithoutDictionaryItemsInput,
    Prisma.DictionaryUncheckedCreateWithoutDictionaryItemsInput
  >;
  connectOrCreate?: Prisma.DictionaryCreateOrConnectWithoutDictionaryItemsInput;
  connect?: Prisma.DictionaryWhereUniqueInput;
};

export type DictionaryUpdateOneRequiredWithoutDictionaryItemsNestedInput = {
  create?: Prisma.XOR<
    Prisma.DictionaryCreateWithoutDictionaryItemsInput,
    Prisma.DictionaryUncheckedCreateWithoutDictionaryItemsInput
  >;
  connectOrCreate?: Prisma.DictionaryCreateOrConnectWithoutDictionaryItemsInput;
  upsert?: Prisma.DictionaryUpsertWithoutDictionaryItemsInput;
  connect?: Prisma.DictionaryWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.DictionaryUpdateToOneWithWhereWithoutDictionaryItemsInput,
      Prisma.DictionaryUpdateWithoutDictionaryItemsInput
    >,
    Prisma.DictionaryUncheckedUpdateWithoutDictionaryItemsInput
  >;
};

export type DictionaryCreateWithoutDictionaryItemsInput = {
  name: string;
  code: string;
  cover?: string | null;
  isEnabled?: boolean;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
};

export type DictionaryUncheckedCreateWithoutDictionaryItemsInput = {
  id?: number;
  name: string;
  code: string;
  cover?: string | null;
  isEnabled?: boolean;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
};

export type DictionaryCreateOrConnectWithoutDictionaryItemsInput = {
  where: Prisma.DictionaryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DictionaryCreateWithoutDictionaryItemsInput,
    Prisma.DictionaryUncheckedCreateWithoutDictionaryItemsInput
  >;
};

export type DictionaryUpsertWithoutDictionaryItemsInput = {
  update: Prisma.XOR<
    Prisma.DictionaryUpdateWithoutDictionaryItemsInput,
    Prisma.DictionaryUncheckedUpdateWithoutDictionaryItemsInput
  >;
  create: Prisma.XOR<
    Prisma.DictionaryCreateWithoutDictionaryItemsInput,
    Prisma.DictionaryUncheckedCreateWithoutDictionaryItemsInput
  >;
  where?: Prisma.DictionaryWhereInput;
};

export type DictionaryUpdateToOneWithWhereWithoutDictionaryItemsInput = {
  where?: Prisma.DictionaryWhereInput;
  data: Prisma.XOR<
    Prisma.DictionaryUpdateWithoutDictionaryItemsInput,
    Prisma.DictionaryUncheckedUpdateWithoutDictionaryItemsInput
  >;
};

export type DictionaryUpdateWithoutDictionaryItemsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type DictionaryUncheckedUpdateWithoutDictionaryItemsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  code?: Prisma.StringFieldUpdateOperationsInput | string;
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

/**
 * Count Type DictionaryCountOutputType
 */

export type DictionaryCountOutputType = {
  dictionaryItems: number;
};

export type DictionaryCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  dictionaryItems?: boolean | DictionaryCountOutputTypeCountDictionaryItemsArgs;
};

/**
 * DictionaryCountOutputType without action
 */
export type DictionaryCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the DictionaryCountOutputType
   */
  select?: Prisma.DictionaryCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * DictionaryCountOutputType without action
 */
export type DictionaryCountOutputTypeCountDictionaryItemsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.DictionaryItemWhereInput;
};

export type DictionarySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    code?: boolean;
    cover?: boolean;
    isEnabled?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    deletedAt?: boolean;
    dictionaryItems?: boolean | Prisma.Dictionary$dictionaryItemsArgs<ExtArgs>;
    _count?: boolean | Prisma.DictionaryCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['dictionary']
>;

export type DictionarySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    code?: boolean;
    cover?: boolean;
    isEnabled?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    deletedAt?: boolean;
  },
  ExtArgs['result']['dictionary']
>;

export type DictionarySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    code?: boolean;
    cover?: boolean;
    isEnabled?: boolean;
    description?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    deletedAt?: boolean;
  },
  ExtArgs['result']['dictionary']
>;

export type DictionarySelectScalar = {
  id?: boolean;
  name?: boolean;
  code?: boolean;
  cover?: boolean;
  isEnabled?: boolean;
  description?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  deletedAt?: boolean;
};

export type DictionaryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'name'
  | 'code'
  | 'cover'
  | 'isEnabled'
  | 'description'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt',
  ExtArgs['result']['dictionary']
>;
export type DictionaryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  dictionaryItems?: boolean | Prisma.Dictionary$dictionaryItemsArgs<ExtArgs>;
  _count?: boolean | Prisma.DictionaryCountOutputTypeDefaultArgs<ExtArgs>;
};
export type DictionaryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type DictionaryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $DictionaryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Dictionary';
  objects: {
    /**
     * 字典项列表
     */
    dictionaryItems: Prisma.$DictionaryItemPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      /**
       * 字典名称
       */
      name: string;
      /**
       * 字典编码
       */
      code: string;
      /**
       * 字典封面图片URL
       */
      cover: string | null;
      /**
       * 字典状态：true=启用，false=禁用
       */
      isEnabled: boolean;
      /**
       * 字典描述信息
       */
      description: string | null;
      /**
       * 创建时间
       */
      createdAt: Date;
      /**
       * 更新时间
       */
      updatedAt: Date;
      /**
       * 软删除时间
       */
      deletedAt: Date | null;
    },
    ExtArgs['result']['dictionary']
  >;
  composites: {};
};

export type DictionaryGetPayload<
  S extends boolean | null | undefined | DictionaryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$DictionaryPayload, S>;

export type DictionaryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  DictionaryFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'
> & {
  select?: DictionaryCountAggregateInputType | true;
};

export interface DictionaryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Dictionary'];
    meta: { name: 'Dictionary' };
  };
  /**
   * Find zero or one Dictionary that matches the filter.
   * @param {DictionaryFindUniqueArgs} args - Arguments to find a Dictionary
   * @example
   * // Get one Dictionary
   * const dictionary = await prisma.dictionary.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DictionaryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, DictionaryFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__DictionaryClient<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Dictionary that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DictionaryFindUniqueOrThrowArgs} args - Arguments to find a Dictionary
   * @example
   * // Get one Dictionary
   * const dictionary = await prisma.dictionary.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DictionaryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, DictionaryFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__DictionaryClient<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Dictionary that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryFindFirstArgs} args - Arguments to find a Dictionary
   * @example
   * // Get one Dictionary
   * const dictionary = await prisma.dictionary.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DictionaryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, DictionaryFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__DictionaryClient<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Dictionary that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryFindFirstOrThrowArgs} args - Arguments to find a Dictionary
   * @example
   * // Get one Dictionary
   * const dictionary = await prisma.dictionary.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DictionaryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, DictionaryFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__DictionaryClient<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Dictionaries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Dictionaries
   * const dictionaries = await prisma.dictionary.findMany()
   *
   * // Get first 10 Dictionaries
   * const dictionaries = await prisma.dictionary.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const dictionaryWithIdOnly = await prisma.dictionary.findMany({ select: { id: true } })
   *
   */
  findMany<T extends DictionaryFindManyArgs>(
    args?: Prisma.SelectSubset<T, DictionaryFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Dictionary.
   * @param {DictionaryCreateArgs} args - Arguments to create a Dictionary.
   * @example
   * // Create one Dictionary
   * const Dictionary = await prisma.dictionary.create({
   *   data: {
   *     // ... data to create a Dictionary
   *   }
   * })
   *
   */
  create<T extends DictionaryCreateArgs>(
    args: Prisma.SelectSubset<T, DictionaryCreateArgs<ExtArgs>>
  ): Prisma.Prisma__DictionaryClient<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Dictionaries.
   * @param {DictionaryCreateManyArgs} args - Arguments to create many Dictionaries.
   * @example
   * // Create many Dictionaries
   * const dictionary = await prisma.dictionary.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends DictionaryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, DictionaryCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Dictionaries and returns the data saved in the database.
   * @param {DictionaryCreateManyAndReturnArgs} args - Arguments to create many Dictionaries.
   * @example
   * // Create many Dictionaries
   * const dictionary = await prisma.dictionary.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Dictionaries and only return the `id`
   * const dictionaryWithIdOnly = await prisma.dictionary.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends DictionaryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, DictionaryCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Dictionary.
   * @param {DictionaryDeleteArgs} args - Arguments to delete one Dictionary.
   * @example
   * // Delete one Dictionary
   * const Dictionary = await prisma.dictionary.delete({
   *   where: {
   *     // ... filter to delete one Dictionary
   *   }
   * })
   *
   */
  delete<T extends DictionaryDeleteArgs>(
    args: Prisma.SelectSubset<T, DictionaryDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__DictionaryClient<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Dictionary.
   * @param {DictionaryUpdateArgs} args - Arguments to update one Dictionary.
   * @example
   * // Update one Dictionary
   * const dictionary = await prisma.dictionary.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends DictionaryUpdateArgs>(
    args: Prisma.SelectSubset<T, DictionaryUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__DictionaryClient<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Dictionaries.
   * @param {DictionaryDeleteManyArgs} args - Arguments to filter Dictionaries to delete.
   * @example
   * // Delete a few Dictionaries
   * const { count } = await prisma.dictionary.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends DictionaryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, DictionaryDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Dictionaries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Dictionaries
   * const dictionary = await prisma.dictionary.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends DictionaryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, DictionaryUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Dictionaries and returns the data updated in the database.
   * @param {DictionaryUpdateManyAndReturnArgs} args - Arguments to update many Dictionaries.
   * @example
   * // Update many Dictionaries
   * const dictionary = await prisma.dictionary.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Dictionaries and only return the `id`
   * const dictionaryWithIdOnly = await prisma.dictionary.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends DictionaryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, DictionaryUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Dictionary.
   * @param {DictionaryUpsertArgs} args - Arguments to update or create a Dictionary.
   * @example
   * // Update or create a Dictionary
   * const dictionary = await prisma.dictionary.upsert({
   *   create: {
   *     // ... data to create a Dictionary
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Dictionary we want to update
   *   }
   * })
   */
  upsert<T extends DictionaryUpsertArgs>(
    args: Prisma.SelectSubset<T, DictionaryUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__DictionaryClient<
    runtime.Types.Result.GetResult<
      Prisma.$DictionaryPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Dictionaries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryCountArgs} args - Arguments to filter Dictionaries to count.
   * @example
   * // Count the number of Dictionaries
   * const count = await prisma.dictionary.count({
   *   where: {
   *     // ... the filter for the Dictionaries we want to count
   *   }
   * })
   **/
  count<T extends DictionaryCountArgs>(
    args?: Prisma.Subset<T, DictionaryCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DictionaryCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Dictionary.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends DictionaryAggregateArgs>(
    args: Prisma.Subset<T, DictionaryAggregateArgs>
  ): Prisma.PrismaPromise<GetDictionaryAggregateType<T>>;

  /**
   * Group by Dictionary.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends DictionaryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DictionaryGroupByArgs['orderBy'] }
      : { orderBy?: DictionaryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, DictionaryGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetDictionaryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Dictionary model
   */
  readonly fields: DictionaryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Dictionary.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DictionaryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  dictionaryItems<
    T extends Prisma.Dictionary$dictionaryItemsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.Dictionary$dictionaryItemsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$DictionaryItemPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Dictionary model
 */
export interface DictionaryFieldRefs {
  readonly id: Prisma.FieldRef<'Dictionary', 'Int'>;
  readonly name: Prisma.FieldRef<'Dictionary', 'String'>;
  readonly code: Prisma.FieldRef<'Dictionary', 'String'>;
  readonly cover: Prisma.FieldRef<'Dictionary', 'String'>;
  readonly isEnabled: Prisma.FieldRef<'Dictionary', 'Boolean'>;
  readonly description: Prisma.FieldRef<'Dictionary', 'String'>;
  readonly createdAt: Prisma.FieldRef<'Dictionary', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'Dictionary', 'DateTime'>;
  readonly deletedAt: Prisma.FieldRef<'Dictionary', 'DateTime'>;
}

// Custom InputTypes
/**
 * Dictionary findUnique
 */
export type DictionaryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * Filter, which Dictionary to fetch.
   */
  where: Prisma.DictionaryWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary findUniqueOrThrow
 */
export type DictionaryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * Filter, which Dictionary to fetch.
   */
  where: Prisma.DictionaryWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary findFirst
 */
export type DictionaryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * Filter, which Dictionary to fetch.
   */
  where?: Prisma.DictionaryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Dictionaries to fetch.
   */
  orderBy?:
    | Prisma.DictionaryOrderByWithRelationInput
    | Prisma.DictionaryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Dictionaries.
   */
  cursor?: Prisma.DictionaryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` Dictionaries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Dictionaries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Dictionaries.
   */
  distinct?:
    | Prisma.DictionaryScalarFieldEnum
    | Prisma.DictionaryScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary findFirstOrThrow
 */
export type DictionaryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * Filter, which Dictionary to fetch.
   */
  where?: Prisma.DictionaryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Dictionaries to fetch.
   */
  orderBy?:
    | Prisma.DictionaryOrderByWithRelationInput
    | Prisma.DictionaryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Dictionaries.
   */
  cursor?: Prisma.DictionaryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` Dictionaries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Dictionaries.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Dictionaries.
   */
  distinct?:
    | Prisma.DictionaryScalarFieldEnum
    | Prisma.DictionaryScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary findMany
 */
export type DictionaryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * Filter, which Dictionaries to fetch.
   */
  where?: Prisma.DictionaryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Dictionaries to fetch.
   */
  orderBy?:
    | Prisma.DictionaryOrderByWithRelationInput
    | Prisma.DictionaryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Dictionaries.
   */
  cursor?: Prisma.DictionaryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` Dictionaries from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Dictionaries.
   */
  skip?: number;
  distinct?:
    | Prisma.DictionaryScalarFieldEnum
    | Prisma.DictionaryScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary create
 */
export type DictionaryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * The data needed to create a Dictionary.
   */
  data: Prisma.XOR<
    Prisma.DictionaryCreateInput,
    Prisma.DictionaryUncheckedCreateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary createMany
 */
export type DictionaryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Dictionaries.
   */
  data: Prisma.DictionaryCreateManyInput | Prisma.DictionaryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Dictionary createManyAndReturn
 */
export type DictionaryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * The data used to create many Dictionaries.
   */
  data: Prisma.DictionaryCreateManyInput | Prisma.DictionaryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Dictionary update
 */
export type DictionaryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * The data needed to update a Dictionary.
   */
  data: Prisma.XOR<
    Prisma.DictionaryUpdateInput,
    Prisma.DictionaryUncheckedUpdateInput
  >;
  /**
   * Choose, which Dictionary to update.
   */
  where: Prisma.DictionaryWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary updateMany
 */
export type DictionaryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Dictionaries.
   */
  data: Prisma.XOR<
    Prisma.DictionaryUpdateManyMutationInput,
    Prisma.DictionaryUncheckedUpdateManyInput
  >;
  /**
   * Filter which Dictionaries to update
   */
  where?: Prisma.DictionaryWhereInput;
  /**
   * Limit how many Dictionaries to update.
   */
  limit?: number;
};

/**
 * Dictionary updateManyAndReturn
 */
export type DictionaryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * The data used to update Dictionaries.
   */
  data: Prisma.XOR<
    Prisma.DictionaryUpdateManyMutationInput,
    Prisma.DictionaryUncheckedUpdateManyInput
  >;
  /**
   * Filter which Dictionaries to update
   */
  where?: Prisma.DictionaryWhereInput;
  /**
   * Limit how many Dictionaries to update.
   */
  limit?: number;
};

/**
 * Dictionary upsert
 */
export type DictionaryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * The filter to search for the Dictionary to update in case it exists.
   */
  where: Prisma.DictionaryWhereUniqueInput;
  /**
   * In case the Dictionary found by the `where` argument doesn't exist, create a new Dictionary with this data.
   */
  create: Prisma.XOR<
    Prisma.DictionaryCreateInput,
    Prisma.DictionaryUncheckedCreateInput
  >;
  /**
   * In case the Dictionary was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.DictionaryUpdateInput,
    Prisma.DictionaryUncheckedUpdateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary delete
 */
export type DictionaryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
  /**
   * Filter which Dictionary to delete.
   */
  where: Prisma.DictionaryWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * Dictionary deleteMany
 */
export type DictionaryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Dictionaries to delete
   */
  where?: Prisma.DictionaryWhereInput;
  /**
   * Limit how many Dictionaries to delete.
   */
  limit?: number;
};

/**
 * Dictionary.dictionaryItems
 */
export type Dictionary$dictionaryItemsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null;
  where?: Prisma.DictionaryItemWhereInput;
  orderBy?:
    | Prisma.DictionaryItemOrderByWithRelationInput
    | Prisma.DictionaryItemOrderByWithRelationInput[];
  cursor?: Prisma.DictionaryItemWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.DictionaryItemScalarFieldEnum
    | Prisma.DictionaryItemScalarFieldEnum[];
};

/**
 * Dictionary without action
 */
export type DictionaryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dictionary
   */
  select?: Prisma.DictionarySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dictionary
   */
  omit?: Prisma.DictionaryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryInclude<ExtArgs> | null;
};
