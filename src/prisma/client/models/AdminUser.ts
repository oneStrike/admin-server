/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `AdminUser` model and its related types.
 *
 * 🟢 You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model AdminUser
 *
 */
export type AdminUserModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AdminUserPayload>;

export type AggregateAdminUser = {
  _count: AdminUserCountAggregateOutputType | null;
  _avg: AdminUserAvgAggregateOutputType | null;
  _sum: AdminUserSumAggregateOutputType | null;
  _min: AdminUserMinAggregateOutputType | null;
  _max: AdminUserMaxAggregateOutputType | null;
};

export type AdminUserAvgAggregateOutputType = {
  id: number | null;
  role: number | null;
  loginFailCount: number | null;
};

export type AdminUserSumAggregateOutputType = {
  id: number | null;
  role: number | null;
  loginFailCount: number | null;
};

export type AdminUserMinAggregateOutputType = {
  id: number | null;
  username: string | null;
  password: string | null;
  avatar: string | null;
  mobile: string | null;
  isEnabled: boolean | null;
  role: number | null;
  lastLoginAt: Date | null;
  lastLoginIp: string | null;
  loginFailCount: number | null;
  isLocked: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AdminUserMaxAggregateOutputType = {
  id: number | null;
  username: string | null;
  password: string | null;
  avatar: string | null;
  mobile: string | null;
  isEnabled: boolean | null;
  role: number | null;
  lastLoginAt: Date | null;
  lastLoginIp: string | null;
  loginFailCount: number | null;
  isLocked: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AdminUserCountAggregateOutputType = {
  id: number;
  username: number;
  password: number;
  avatar: number;
  mobile: number;
  isEnabled: number;
  role: number;
  lastLoginAt: number;
  lastLoginIp: number;
  loginFailCount: number;
  isLocked: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type AdminUserAvgAggregateInputType = {
  id?: true;
  role?: true;
  loginFailCount?: true;
};

export type AdminUserSumAggregateInputType = {
  id?: true;
  role?: true;
  loginFailCount?: true;
};

export type AdminUserMinAggregateInputType = {
  id?: true;
  username?: true;
  password?: true;
  avatar?: true;
  mobile?: true;
  isEnabled?: true;
  role?: true;
  lastLoginAt?: true;
  lastLoginIp?: true;
  loginFailCount?: true;
  isLocked?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AdminUserMaxAggregateInputType = {
  id?: true;
  username?: true;
  password?: true;
  avatar?: true;
  mobile?: true;
  isEnabled?: true;
  role?: true;
  lastLoginAt?: true;
  lastLoginIp?: true;
  loginFailCount?: true;
  isLocked?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AdminUserCountAggregateInputType = {
  id?: true;
  username?: true;
  password?: true;
  avatar?: true;
  mobile?: true;
  isEnabled?: true;
  role?: true;
  lastLoginAt?: true;
  lastLoginIp?: true;
  loginFailCount?: true;
  isLocked?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type AdminUserAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AdminUser to aggregate.
   */
  where?: Prisma.AdminUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AdminUsers to fetch.
   */
  orderBy?:
    | Prisma.AdminUserOrderByWithRelationInput
    | Prisma.AdminUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AdminUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` AdminUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AdminUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AdminUsers
   **/
  _count?: true | AdminUserCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AdminUserAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AdminUserSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AdminUserMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AdminUserMaxAggregateInputType;
};

export type GetAdminUserAggregateType<T extends AdminUserAggregateArgs> = {
  [P in keyof T & keyof AggregateAdminUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdminUser[P]>
    : Prisma.GetScalarType<T[P], AggregateAdminUser[P]>;
};

export type AdminUserGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AdminUserWhereInput;
  orderBy?:
    | Prisma.AdminUserOrderByWithAggregationInput
    | Prisma.AdminUserOrderByWithAggregationInput[];
  by: Prisma.AdminUserScalarFieldEnum[] | Prisma.AdminUserScalarFieldEnum;
  having?: Prisma.AdminUserScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AdminUserCountAggregateInputType | true;
  _avg?: AdminUserAvgAggregateInputType;
  _sum?: AdminUserSumAggregateInputType;
  _min?: AdminUserMinAggregateInputType;
  _max?: AdminUserMaxAggregateInputType;
};

export type AdminUserGroupByOutputType = {
  id: number;
  username: string;
  password: string;
  avatar: string | null;
  mobile: string | null;
  isEnabled: boolean;
  role: number;
  lastLoginAt: Date | null;
  lastLoginIp: string | null;
  loginFailCount: number;
  isLocked: boolean;
  createdAt: Date;
  updatedAt: Date;
  _count: AdminUserCountAggregateOutputType | null;
  _avg: AdminUserAvgAggregateOutputType | null;
  _sum: AdminUserSumAggregateOutputType | null;
  _min: AdminUserMinAggregateOutputType | null;
  _max: AdminUserMaxAggregateOutputType | null;
};

type GetAdminUserGroupByPayload<T extends AdminUserGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AdminUserGroupByOutputType, T['by']> & {
        [P in keyof T & keyof AdminUserGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdminUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdminUserGroupByOutputType[P]>;
      }
    >
  >;

export type AdminUserWhereInput = {
  AND?: Prisma.AdminUserWhereInput | Prisma.AdminUserWhereInput[];
  OR?: Prisma.AdminUserWhereInput[];
  NOT?: Prisma.AdminUserWhereInput | Prisma.AdminUserWhereInput[];
  id?: Prisma.IntFilter<'AdminUser'> | number;
  username?: Prisma.StringFilter<'AdminUser'> | string;
  password?: Prisma.StringFilter<'AdminUser'> | string;
  avatar?: Prisma.StringNullableFilter<'AdminUser'> | string | null;
  mobile?: Prisma.StringNullableFilter<'AdminUser'> | string | null;
  isEnabled?: Prisma.BoolFilter<'AdminUser'> | boolean;
  role?: Prisma.IntFilter<'AdminUser'> | number;
  lastLoginAt?:
    | Prisma.DateTimeNullableFilter<'AdminUser'>
    | Date
    | string
    | null;
  lastLoginIp?: Prisma.StringNullableFilter<'AdminUser'> | string | null;
  loginFailCount?: Prisma.IntFilter<'AdminUser'> | number;
  isLocked?: Prisma.BoolFilter<'AdminUser'> | boolean;
  createdAt?: Prisma.DateTimeFilter<'AdminUser'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'AdminUser'> | Date | string;
};

export type AdminUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  password?: Prisma.SortOrder;
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder;
  mobile?: Prisma.SortOrderInput | Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  lastLoginAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastLoginIp?: Prisma.SortOrderInput | Prisma.SortOrder;
  loginFailCount?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AdminUserWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    username?: string;
    AND?: Prisma.AdminUserWhereInput | Prisma.AdminUserWhereInput[];
    OR?: Prisma.AdminUserWhereInput[];
    NOT?: Prisma.AdminUserWhereInput | Prisma.AdminUserWhereInput[];
    password?: Prisma.StringFilter<'AdminUser'> | string;
    avatar?: Prisma.StringNullableFilter<'AdminUser'> | string | null;
    mobile?: Prisma.StringNullableFilter<'AdminUser'> | string | null;
    isEnabled?: Prisma.BoolFilter<'AdminUser'> | boolean;
    role?: Prisma.IntFilter<'AdminUser'> | number;
    lastLoginAt?:
      | Prisma.DateTimeNullableFilter<'AdminUser'>
      | Date
      | string
      | null;
    lastLoginIp?: Prisma.StringNullableFilter<'AdminUser'> | string | null;
    loginFailCount?: Prisma.IntFilter<'AdminUser'> | number;
    isLocked?: Prisma.BoolFilter<'AdminUser'> | boolean;
    createdAt?: Prisma.DateTimeFilter<'AdminUser'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'AdminUser'> | Date | string;
  },
  'id' | 'username'
>;

export type AdminUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  password?: Prisma.SortOrder;
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder;
  mobile?: Prisma.SortOrderInput | Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  lastLoginAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastLoginIp?: Prisma.SortOrderInput | Prisma.SortOrder;
  loginFailCount?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.AdminUserCountOrderByAggregateInput;
  _avg?: Prisma.AdminUserAvgOrderByAggregateInput;
  _max?: Prisma.AdminUserMaxOrderByAggregateInput;
  _min?: Prisma.AdminUserMinOrderByAggregateInput;
  _sum?: Prisma.AdminUserSumOrderByAggregateInput;
};

export type AdminUserScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AdminUserScalarWhereWithAggregatesInput
    | Prisma.AdminUserScalarWhereWithAggregatesInput[];
  OR?: Prisma.AdminUserScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AdminUserScalarWhereWithAggregatesInput
    | Prisma.AdminUserScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'AdminUser'> | number;
  username?: Prisma.StringWithAggregatesFilter<'AdminUser'> | string;
  password?: Prisma.StringWithAggregatesFilter<'AdminUser'> | string;
  avatar?:
    | Prisma.StringNullableWithAggregatesFilter<'AdminUser'>
    | string
    | null;
  mobile?:
    | Prisma.StringNullableWithAggregatesFilter<'AdminUser'>
    | string
    | null;
  isEnabled?: Prisma.BoolWithAggregatesFilter<'AdminUser'> | boolean;
  role?: Prisma.IntWithAggregatesFilter<'AdminUser'> | number;
  lastLoginAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'AdminUser'>
    | Date
    | string
    | null;
  lastLoginIp?:
    | Prisma.StringNullableWithAggregatesFilter<'AdminUser'>
    | string
    | null;
  loginFailCount?: Prisma.IntWithAggregatesFilter<'AdminUser'> | number;
  isLocked?: Prisma.BoolWithAggregatesFilter<'AdminUser'> | boolean;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'AdminUser'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'AdminUser'> | Date | string;
};

export type AdminUserCreateInput = {
  username: string;
  password: string;
  avatar?: string | null;
  mobile?: string | null;
  isEnabled?: boolean;
  role?: number;
  lastLoginAt?: Date | string | null;
  lastLoginIp?: string | null;
  loginFailCount?: number;
  isLocked?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AdminUserUncheckedCreateInput = {
  id?: number;
  username: string;
  password: string;
  avatar?: string | null;
  mobile?: string | null;
  isEnabled?: boolean;
  role?: number;
  lastLoginAt?: Date | string | null;
  lastLoginIp?: string | null;
  loginFailCount?: number;
  isLocked?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AdminUserUpdateInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  password?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  mobile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.IntFieldUpdateOperationsInput | number;
  lastLoginAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastLoginIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  loginFailCount?: Prisma.IntFieldUpdateOperationsInput | number;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AdminUserUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  password?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  mobile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.IntFieldUpdateOperationsInput | number;
  lastLoginAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastLoginIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  loginFailCount?: Prisma.IntFieldUpdateOperationsInput | number;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AdminUserCreateManyInput = {
  id?: number;
  username: string;
  password: string;
  avatar?: string | null;
  mobile?: string | null;
  isEnabled?: boolean;
  role?: number;
  lastLoginAt?: Date | string | null;
  lastLoginIp?: string | null;
  loginFailCount?: number;
  isLocked?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AdminUserUpdateManyMutationInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  password?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  mobile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.IntFieldUpdateOperationsInput | number;
  lastLoginAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastLoginIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  loginFailCount?: Prisma.IntFieldUpdateOperationsInput | number;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AdminUserUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  username?: Prisma.StringFieldUpdateOperationsInput | string;
  password?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  mobile?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  role?: Prisma.IntFieldUpdateOperationsInput | number;
  lastLoginAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  lastLoginIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  loginFailCount?: Prisma.IntFieldUpdateOperationsInput | number;
  isLocked?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AdminUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  password?: Prisma.SortOrder;
  avatar?: Prisma.SortOrder;
  mobile?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  lastLoginAt?: Prisma.SortOrder;
  lastLoginIp?: Prisma.SortOrder;
  loginFailCount?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AdminUserAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  loginFailCount?: Prisma.SortOrder;
};

export type AdminUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  password?: Prisma.SortOrder;
  avatar?: Prisma.SortOrder;
  mobile?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  lastLoginAt?: Prisma.SortOrder;
  lastLoginIp?: Prisma.SortOrder;
  loginFailCount?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AdminUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  username?: Prisma.SortOrder;
  password?: Prisma.SortOrder;
  avatar?: Prisma.SortOrder;
  mobile?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  lastLoginAt?: Prisma.SortOrder;
  lastLoginIp?: Prisma.SortOrder;
  loginFailCount?: Prisma.SortOrder;
  isLocked?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AdminUserSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  role?: Prisma.SortOrder;
  loginFailCount?: Prisma.SortOrder;
};

export type StringFieldUpdateOperationsInput = {
  set?: string;
};

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null;
};

export type BoolFieldUpdateOperationsInput = {
  set?: boolean;
};

export type IntFieldUpdateOperationsInput = {
  set?: number;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null;
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string;
};

export type AdminUserSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    username?: boolean;
    password?: boolean;
    avatar?: boolean;
    mobile?: boolean;
    isEnabled?: boolean;
    role?: boolean;
    lastLoginAt?: boolean;
    lastLoginIp?: boolean;
    loginFailCount?: boolean;
    isLocked?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['adminUser']
>;

export type AdminUserSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    username?: boolean;
    password?: boolean;
    avatar?: boolean;
    mobile?: boolean;
    isEnabled?: boolean;
    role?: boolean;
    lastLoginAt?: boolean;
    lastLoginIp?: boolean;
    loginFailCount?: boolean;
    isLocked?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['adminUser']
>;

export type AdminUserSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    username?: boolean;
    password?: boolean;
    avatar?: boolean;
    mobile?: boolean;
    isEnabled?: boolean;
    role?: boolean;
    lastLoginAt?: boolean;
    lastLoginIp?: boolean;
    loginFailCount?: boolean;
    isLocked?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['adminUser']
>;

export type AdminUserSelectScalar = {
  id?: boolean;
  username?: boolean;
  password?: boolean;
  avatar?: boolean;
  mobile?: boolean;
  isEnabled?: boolean;
  role?: boolean;
  lastLoginAt?: boolean;
  lastLoginIp?: boolean;
  loginFailCount?: boolean;
  isLocked?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type AdminUserOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'username'
  | 'password'
  | 'avatar'
  | 'mobile'
  | 'isEnabled'
  | 'role'
  | 'lastLoginAt'
  | 'lastLoginIp'
  | 'loginFailCount'
  | 'isLocked'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['adminUser']
>;

export type $AdminUserPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'AdminUser';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * 主键id
       */
      id: number;
      /**
       * 账号
       */
      username: string;
      /**
       * 密码
       */
      password: string;
      /**
       * 头像
       */
      avatar: string | null;
      /**
       * 手机号码
       */
      mobile: string | null;
      /**
       * 是否启用账号
       */
      isEnabled: boolean;
      /**
       * 账号角色
       */
      role: number;
      /**
       * 最后登录时间
       */
      lastLoginAt: Date | null;
      /**
       * 最后登录IP
       */
      lastLoginIp: string | null;
      /**
       * 登录失败次数
       */
      loginFailCount: number;
      /**
       * 账户锁定状态
       */
      isLocked: boolean;
      /**
       * 创建时间
       */
      createdAt: Date;
      /**
       * 更新时间
       */
      updatedAt: Date;
    },
    ExtArgs['result']['adminUser']
  >;
  composites: {};
};

export type AdminUserGetPayload<
  S extends boolean | null | undefined | AdminUserDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AdminUserPayload, S>;

export type AdminUserCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AdminUserFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'
> & {
  select?: AdminUserCountAggregateInputType | true;
};

export interface AdminUserDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['AdminUser'];
    meta: { name: 'AdminUser' };
  };
  /**
   * Find zero or one AdminUser that matches the filter.
   * @param {AdminUserFindUniqueArgs} args - Arguments to find a AdminUser
   * @example
   * // Get one AdminUser
   * const adminUser = await prisma.adminUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdminUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AdminUserFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__AdminUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AdminUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdminUserFindUniqueOrThrowArgs} args - Arguments to find a AdminUser
   * @example
   * // Get one AdminUser
   * const adminUser = await prisma.adminUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdminUserFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AdminUserFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AdminUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AdminUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminUserFindFirstArgs} args - Arguments to find a AdminUser
   * @example
   * // Get one AdminUser
   * const adminUser = await prisma.adminUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdminUserFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AdminUserFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__AdminUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AdminUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminUserFindFirstOrThrowArgs} args - Arguments to find a AdminUser
   * @example
   * // Get one AdminUser
   * const adminUser = await prisma.adminUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdminUserFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AdminUserFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__AdminUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AdminUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AdminUsers
   * const adminUsers = await prisma.adminUser.findMany()
   *
   * // Get first 10 AdminUsers
   * const adminUsers = await prisma.adminUser.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const adminUserWithIdOnly = await prisma.adminUser.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AdminUserFindManyArgs>(
    args?: Prisma.SelectSubset<T, AdminUserFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AdminUser.
   * @param {AdminUserCreateArgs} args - Arguments to create a AdminUser.
   * @example
   * // Create one AdminUser
   * const AdminUser = await prisma.adminUser.create({
   *   data: {
   *     // ... data to create a AdminUser
   *   }
   * })
   *
   */
  create<T extends AdminUserCreateArgs>(
    args: Prisma.SelectSubset<T, AdminUserCreateArgs<ExtArgs>>
  ): Prisma.Prisma__AdminUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AdminUsers.
   * @param {AdminUserCreateManyArgs} args - Arguments to create many AdminUsers.
   * @example
   * // Create many AdminUsers
   * const adminUser = await prisma.adminUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AdminUserCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AdminUserCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AdminUsers and returns the data saved in the database.
   * @param {AdminUserCreateManyAndReturnArgs} args - Arguments to create many AdminUsers.
   * @example
   * // Create many AdminUsers
   * const adminUser = await prisma.adminUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AdminUsers and only return the `id`
   * const adminUserWithIdOnly = await prisma.adminUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AdminUserCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AdminUserCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AdminUser.
   * @param {AdminUserDeleteArgs} args - Arguments to delete one AdminUser.
   * @example
   * // Delete one AdminUser
   * const AdminUser = await prisma.adminUser.delete({
   *   where: {
   *     // ... filter to delete one AdminUser
   *   }
   * })
   *
   */
  delete<T extends AdminUserDeleteArgs>(
    args: Prisma.SelectSubset<T, AdminUserDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__AdminUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AdminUser.
   * @param {AdminUserUpdateArgs} args - Arguments to update one AdminUser.
   * @example
   * // Update one AdminUser
   * const adminUser = await prisma.adminUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AdminUserUpdateArgs>(
    args: Prisma.SelectSubset<T, AdminUserUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__AdminUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AdminUsers.
   * @param {AdminUserDeleteManyArgs} args - Arguments to filter AdminUsers to delete.
   * @example
   * // Delete a few AdminUsers
   * const { count } = await prisma.adminUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AdminUserDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AdminUserDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AdminUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AdminUsers
   * const adminUser = await prisma.adminUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AdminUserUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AdminUserUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AdminUsers and returns the data updated in the database.
   * @param {AdminUserUpdateManyAndReturnArgs} args - Arguments to update many AdminUsers.
   * @example
   * // Update many AdminUsers
   * const adminUser = await prisma.adminUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AdminUsers and only return the `id`
   * const adminUserWithIdOnly = await prisma.adminUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AdminUserUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AdminUserUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AdminUser.
   * @param {AdminUserUpsertArgs} args - Arguments to update or create a AdminUser.
   * @example
   * // Update or create a AdminUser
   * const adminUser = await prisma.adminUser.upsert({
   *   create: {
   *     // ... data to create a AdminUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AdminUser we want to update
   *   }
   * })
   */
  upsert<T extends AdminUserUpsertArgs>(
    args: Prisma.SelectSubset<T, AdminUserUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__AdminUserClient<
    runtime.Types.Result.GetResult<
      Prisma.$AdminUserPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AdminUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminUserCountArgs} args - Arguments to filter AdminUsers to count.
   * @example
   * // Count the number of AdminUsers
   * const count = await prisma.adminUser.count({
   *   where: {
   *     // ... the filter for the AdminUsers we want to count
   *   }
   * })
   **/
  count<T extends AdminUserCountArgs>(
    args?: Prisma.Subset<T, AdminUserCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdminUserCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AdminUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AdminUserAggregateArgs>(
    args: Prisma.Subset<T, AdminUserAggregateArgs>
  ): Prisma.PrismaPromise<GetAdminUserAggregateType<T>>;

  /**
   * Group by AdminUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AdminUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdminUserGroupByArgs['orderBy'] }
      : { orderBy?: AdminUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AdminUserGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetAdminUserGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AdminUser model
   */
  readonly fields: AdminUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AdminUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdminUserClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AdminUser model
 */
export interface AdminUserFieldRefs {
  readonly id: Prisma.FieldRef<'AdminUser', 'Int'>;
  readonly username: Prisma.FieldRef<'AdminUser', 'String'>;
  readonly password: Prisma.FieldRef<'AdminUser', 'String'>;
  readonly avatar: Prisma.FieldRef<'AdminUser', 'String'>;
  readonly mobile: Prisma.FieldRef<'AdminUser', 'String'>;
  readonly isEnabled: Prisma.FieldRef<'AdminUser', 'Boolean'>;
  readonly role: Prisma.FieldRef<'AdminUser', 'Int'>;
  readonly lastLoginAt: Prisma.FieldRef<'AdminUser', 'DateTime'>;
  readonly lastLoginIp: Prisma.FieldRef<'AdminUser', 'String'>;
  readonly loginFailCount: Prisma.FieldRef<'AdminUser', 'Int'>;
  readonly isLocked: Prisma.FieldRef<'AdminUser', 'Boolean'>;
  readonly createdAt: Prisma.FieldRef<'AdminUser', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'AdminUser', 'DateTime'>;
}

// Custom InputTypes
/**
 * AdminUser findUnique
 */
export type AdminUserFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * Filter, which AdminUser to fetch.
   */
  where: Prisma.AdminUserWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser findUniqueOrThrow
 */
export type AdminUserFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * Filter, which AdminUser to fetch.
   */
  where: Prisma.AdminUserWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser findFirst
 */
export type AdminUserFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * Filter, which AdminUser to fetch.
   */
  where?: Prisma.AdminUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AdminUsers to fetch.
   */
  orderBy?:
    | Prisma.AdminUserOrderByWithRelationInput
    | Prisma.AdminUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AdminUsers.
   */
  cursor?: Prisma.AdminUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` AdminUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AdminUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AdminUsers.
   */
  distinct?:
    | Prisma.AdminUserScalarFieldEnum
    | Prisma.AdminUserScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser findFirstOrThrow
 */
export type AdminUserFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * Filter, which AdminUser to fetch.
   */
  where?: Prisma.AdminUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AdminUsers to fetch.
   */
  orderBy?:
    | Prisma.AdminUserOrderByWithRelationInput
    | Prisma.AdminUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AdminUsers.
   */
  cursor?: Prisma.AdminUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` AdminUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AdminUsers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AdminUsers.
   */
  distinct?:
    | Prisma.AdminUserScalarFieldEnum
    | Prisma.AdminUserScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser findMany
 */
export type AdminUserFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * Filter, which AdminUsers to fetch.
   */
  where?: Prisma.AdminUserWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AdminUsers to fetch.
   */
  orderBy?:
    | Prisma.AdminUserOrderByWithRelationInput
    | Prisma.AdminUserOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AdminUsers.
   */
  cursor?: Prisma.AdminUserWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` AdminUsers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AdminUsers.
   */
  skip?: number;
  distinct?:
    | Prisma.AdminUserScalarFieldEnum
    | Prisma.AdminUserScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser create
 */
export type AdminUserCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * The data needed to create a AdminUser.
   */
  data: Prisma.XOR<
    Prisma.AdminUserCreateInput,
    Prisma.AdminUserUncheckedCreateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser createMany
 */
export type AdminUserCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AdminUsers.
   */
  data: Prisma.AdminUserCreateManyInput | Prisma.AdminUserCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AdminUser createManyAndReturn
 */
export type AdminUserCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * The data used to create many AdminUsers.
   */
  data: Prisma.AdminUserCreateManyInput | Prisma.AdminUserCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AdminUser update
 */
export type AdminUserUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * The data needed to update a AdminUser.
   */
  data: Prisma.XOR<
    Prisma.AdminUserUpdateInput,
    Prisma.AdminUserUncheckedUpdateInput
  >;
  /**
   * Choose, which AdminUser to update.
   */
  where: Prisma.AdminUserWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser updateMany
 */
export type AdminUserUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AdminUsers.
   */
  data: Prisma.XOR<
    Prisma.AdminUserUpdateManyMutationInput,
    Prisma.AdminUserUncheckedUpdateManyInput
  >;
  /**
   * Filter which AdminUsers to update
   */
  where?: Prisma.AdminUserWhereInput;
  /**
   * Limit how many AdminUsers to update.
   */
  limit?: number;
};

/**
 * AdminUser updateManyAndReturn
 */
export type AdminUserUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * The data used to update AdminUsers.
   */
  data: Prisma.XOR<
    Prisma.AdminUserUpdateManyMutationInput,
    Prisma.AdminUserUncheckedUpdateManyInput
  >;
  /**
   * Filter which AdminUsers to update
   */
  where?: Prisma.AdminUserWhereInput;
  /**
   * Limit how many AdminUsers to update.
   */
  limit?: number;
};

/**
 * AdminUser upsert
 */
export type AdminUserUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * The filter to search for the AdminUser to update in case it exists.
   */
  where: Prisma.AdminUserWhereUniqueInput;
  /**
   * In case the AdminUser found by the `where` argument doesn't exist, create a new AdminUser with this data.
   */
  create: Prisma.XOR<
    Prisma.AdminUserCreateInput,
    Prisma.AdminUserUncheckedCreateInput
  >;
  /**
   * In case the AdminUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AdminUserUpdateInput,
    Prisma.AdminUserUncheckedUpdateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser delete
 */
export type AdminUserDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
  /**
   * Filter which AdminUser to delete.
   */
  where: Prisma.AdminUserWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * AdminUser deleteMany
 */
export type AdminUserDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AdminUsers to delete
   */
  where?: Prisma.AdminUserWhereInput;
  /**
   * Limit how many AdminUsers to delete.
   */
  limit?: number;
};

/**
 * AdminUser without action
 */
export type AdminUserDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AdminUser
   */
  select?: Prisma.AdminUserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AdminUser
   */
  omit?: Prisma.AdminUserOmit<ExtArgs> | null;
};
