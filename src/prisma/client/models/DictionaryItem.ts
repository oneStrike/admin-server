
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `DictionaryItem` model and its related types.
 *
 * 🟢 You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model DictionaryItem
 * 
 */
export type DictionaryItemModel = runtime.Types.Result.DefaultSelection<Prisma.$DictionaryItemPayload>

export type AggregateDictionaryItem = {
  _count: DictionaryItemCountAggregateOutputType | null
  _avg: DictionaryItemAvgAggregateOutputType | null
  _sum: DictionaryItemSumAggregateOutputType | null
  _min: DictionaryItemMinAggregateOutputType | null
  _max: DictionaryItemMaxAggregateOutputType | null
}

export type DictionaryItemAvgAggregateOutputType = {
  id: number | null
  order: number | null
}

export type DictionaryItemSumAggregateOutputType = {
  id: number | null
  order: number | null
}

export type DictionaryItemMinAggregateOutputType = {
  id: number | null
  dictionaryCode: string | null
  name: string | null
  code: string | null
  order: number | null
  cover: string | null
  isEnabled: boolean | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type DictionaryItemMaxAggregateOutputType = {
  id: number | null
  dictionaryCode: string | null
  name: string | null
  code: string | null
  order: number | null
  cover: string | null
  isEnabled: boolean | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type DictionaryItemCountAggregateOutputType = {
  id: number
  dictionaryCode: number
  name: number
  code: number
  order: number
  cover: number
  isEnabled: number
  description: number
  createdAt: number
  updatedAt: number
  deletedAt: number
  _all: number
}


export type DictionaryItemAvgAggregateInputType = {
  id?: true
  order?: true
}

export type DictionaryItemSumAggregateInputType = {
  id?: true
  order?: true
}

export type DictionaryItemMinAggregateInputType = {
  id?: true
  dictionaryCode?: true
  name?: true
  code?: true
  order?: true
  cover?: true
  isEnabled?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type DictionaryItemMaxAggregateInputType = {
  id?: true
  dictionaryCode?: true
  name?: true
  code?: true
  order?: true
  cover?: true
  isEnabled?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type DictionaryItemCountAggregateInputType = {
  id?: true
  dictionaryCode?: true
  name?: true
  code?: true
  order?: true
  cover?: true
  isEnabled?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  _all?: true
}

export type DictionaryItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DictionaryItem to aggregate.
   */
  where?: Prisma.DictionaryItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DictionaryItems to fetch.
   */
  orderBy?: Prisma.DictionaryItemOrderByWithRelationInput | Prisma.DictionaryItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DictionaryItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` DictionaryItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DictionaryItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned DictionaryItems
  **/
  _count?: true | DictionaryItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DictionaryItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DictionaryItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DictionaryItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DictionaryItemMaxAggregateInputType
}

export type GetDictionaryItemAggregateType<T extends DictionaryItemAggregateArgs> = {
      [P in keyof T & keyof AggregateDictionaryItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDictionaryItem[P]>
    : Prisma.GetScalarType<T[P], AggregateDictionaryItem[P]>
}




export type DictionaryItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DictionaryItemWhereInput
  orderBy?: Prisma.DictionaryItemOrderByWithAggregationInput | Prisma.DictionaryItemOrderByWithAggregationInput[]
  by: Prisma.DictionaryItemScalarFieldEnum[] | Prisma.DictionaryItemScalarFieldEnum
  having?: Prisma.DictionaryItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DictionaryItemCountAggregateInputType | true
  _avg?: DictionaryItemAvgAggregateInputType
  _sum?: DictionaryItemSumAggregateInputType
  _min?: DictionaryItemMinAggregateInputType
  _max?: DictionaryItemMaxAggregateInputType
}

export type DictionaryItemGroupByOutputType = {
  id: number
  dictionaryCode: string
  name: string
  code: string
  order: number | null
  cover: string | null
  isEnabled: boolean
  description: string | null
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
  _count: DictionaryItemCountAggregateOutputType | null
  _avg: DictionaryItemAvgAggregateOutputType | null
  _sum: DictionaryItemSumAggregateOutputType | null
  _min: DictionaryItemMinAggregateOutputType | null
  _max: DictionaryItemMaxAggregateOutputType | null
}

type GetDictionaryItemGroupByPayload<T extends DictionaryItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DictionaryItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DictionaryItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DictionaryItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DictionaryItemGroupByOutputType[P]>
      }
    >
  >



export type DictionaryItemWhereInput = {
  AND?: Prisma.DictionaryItemWhereInput | Prisma.DictionaryItemWhereInput[]
  OR?: Prisma.DictionaryItemWhereInput[]
  NOT?: Prisma.DictionaryItemWhereInput | Prisma.DictionaryItemWhereInput[]
  id?: Prisma.IntFilter<"DictionaryItem"> | number
  dictionaryCode?: Prisma.StringFilter<"DictionaryItem"> | string
  name?: Prisma.StringFilter<"DictionaryItem"> | string
  code?: Prisma.StringFilter<"DictionaryItem"> | string
  order?: Prisma.IntNullableFilter<"DictionaryItem"> | number | null
  cover?: Prisma.StringNullableFilter<"DictionaryItem"> | string | null
  isEnabled?: Prisma.BoolFilter<"DictionaryItem"> | boolean
  description?: Prisma.StringNullableFilter<"DictionaryItem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DictionaryItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DictionaryItem"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"DictionaryItem"> | Date | string | null
  parentDictionary?: Prisma.XOR<Prisma.DictionaryScalarRelationFilter, Prisma.DictionaryWhereInput>
}

export type DictionaryItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  dictionaryCode?: Prisma.SortOrder
  name?: Prisma.SortOrder
  code?: Prisma.SortOrder
  order?: Prisma.SortOrderInput | Prisma.SortOrder
  cover?: Prisma.SortOrderInput | Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  parentDictionary?: Prisma.DictionaryOrderByWithRelationInput
}

export type DictionaryItemWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  dictionaryCode_code?: Prisma.DictionaryItemDictionaryCodeCodeCompoundUniqueInput
  AND?: Prisma.DictionaryItemWhereInput | Prisma.DictionaryItemWhereInput[]
  OR?: Prisma.DictionaryItemWhereInput[]
  NOT?: Prisma.DictionaryItemWhereInput | Prisma.DictionaryItemWhereInput[]
  dictionaryCode?: Prisma.StringFilter<"DictionaryItem"> | string
  name?: Prisma.StringFilter<"DictionaryItem"> | string
  code?: Prisma.StringFilter<"DictionaryItem"> | string
  order?: Prisma.IntNullableFilter<"DictionaryItem"> | number | null
  cover?: Prisma.StringNullableFilter<"DictionaryItem"> | string | null
  isEnabled?: Prisma.BoolFilter<"DictionaryItem"> | boolean
  description?: Prisma.StringNullableFilter<"DictionaryItem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DictionaryItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DictionaryItem"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"DictionaryItem"> | Date | string | null
  parentDictionary?: Prisma.XOR<Prisma.DictionaryScalarRelationFilter, Prisma.DictionaryWhereInput>
}, "id" | "dictionaryCode_code">

export type DictionaryItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  dictionaryCode?: Prisma.SortOrder
  name?: Prisma.SortOrder
  code?: Prisma.SortOrder
  order?: Prisma.SortOrderInput | Prisma.SortOrder
  cover?: Prisma.SortOrderInput | Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.DictionaryItemCountOrderByAggregateInput
  _avg?: Prisma.DictionaryItemAvgOrderByAggregateInput
  _max?: Prisma.DictionaryItemMaxOrderByAggregateInput
  _min?: Prisma.DictionaryItemMinOrderByAggregateInput
  _sum?: Prisma.DictionaryItemSumOrderByAggregateInput
}

export type DictionaryItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.DictionaryItemScalarWhereWithAggregatesInput | Prisma.DictionaryItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.DictionaryItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DictionaryItemScalarWhereWithAggregatesInput | Prisma.DictionaryItemScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"DictionaryItem"> | number
  dictionaryCode?: Prisma.StringWithAggregatesFilter<"DictionaryItem"> | string
  name?: Prisma.StringWithAggregatesFilter<"DictionaryItem"> | string
  code?: Prisma.StringWithAggregatesFilter<"DictionaryItem"> | string
  order?: Prisma.IntNullableWithAggregatesFilter<"DictionaryItem"> | number | null
  cover?: Prisma.StringNullableWithAggregatesFilter<"DictionaryItem"> | string | null
  isEnabled?: Prisma.BoolWithAggregatesFilter<"DictionaryItem"> | boolean
  description?: Prisma.StringNullableWithAggregatesFilter<"DictionaryItem"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"DictionaryItem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"DictionaryItem"> | Date | string
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"DictionaryItem"> | Date | string | null
}

export type DictionaryItemCreateInput = {
  name: string
  code: string
  order?: number | null
  cover?: string | null
  isEnabled?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
  parentDictionary: Prisma.DictionaryCreateNestedOneWithoutDictionaryItemsInput
}

export type DictionaryItemUncheckedCreateInput = {
  id?: number
  dictionaryCode: string
  name: string
  code: string
  order?: number | null
  cover?: string | null
  isEnabled?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type DictionaryItemUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  parentDictionary?: Prisma.DictionaryUpdateOneRequiredWithoutDictionaryItemsNestedInput
}

export type DictionaryItemUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  dictionaryCode?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type DictionaryItemCreateManyInput = {
  id?: number
  dictionaryCode: string
  name: string
  code: string
  order?: number | null
  cover?: string | null
  isEnabled?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type DictionaryItemUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type DictionaryItemUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  dictionaryCode?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type DictionaryItemListRelationFilter = {
  every?: Prisma.DictionaryItemWhereInput
  some?: Prisma.DictionaryItemWhereInput
  none?: Prisma.DictionaryItemWhereInput
}

export type DictionaryItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DictionaryItemDictionaryCodeCodeCompoundUniqueInput = {
  dictionaryCode: string
  code: string
}

export type DictionaryItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dictionaryCode?: Prisma.SortOrder
  name?: Prisma.SortOrder
  code?: Prisma.SortOrder
  order?: Prisma.SortOrder
  cover?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type DictionaryItemAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type DictionaryItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dictionaryCode?: Prisma.SortOrder
  name?: Prisma.SortOrder
  code?: Prisma.SortOrder
  order?: Prisma.SortOrder
  cover?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type DictionaryItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dictionaryCode?: Prisma.SortOrder
  name?: Prisma.SortOrder
  code?: Prisma.SortOrder
  order?: Prisma.SortOrder
  cover?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type DictionaryItemSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order?: Prisma.SortOrder
}

export type DictionaryItemCreateNestedManyWithoutParentDictionaryInput = {
  create?: Prisma.XOR<Prisma.DictionaryItemCreateWithoutParentDictionaryInput, Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput> | Prisma.DictionaryItemCreateWithoutParentDictionaryInput[] | Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput[]
  connectOrCreate?: Prisma.DictionaryItemCreateOrConnectWithoutParentDictionaryInput | Prisma.DictionaryItemCreateOrConnectWithoutParentDictionaryInput[]
  createMany?: Prisma.DictionaryItemCreateManyParentDictionaryInputEnvelope
  connect?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
}

export type DictionaryItemUncheckedCreateNestedManyWithoutParentDictionaryInput = {
  create?: Prisma.XOR<Prisma.DictionaryItemCreateWithoutParentDictionaryInput, Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput> | Prisma.DictionaryItemCreateWithoutParentDictionaryInput[] | Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput[]
  connectOrCreate?: Prisma.DictionaryItemCreateOrConnectWithoutParentDictionaryInput | Prisma.DictionaryItemCreateOrConnectWithoutParentDictionaryInput[]
  createMany?: Prisma.DictionaryItemCreateManyParentDictionaryInputEnvelope
  connect?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
}

export type DictionaryItemUpdateManyWithoutParentDictionaryNestedInput = {
  create?: Prisma.XOR<Prisma.DictionaryItemCreateWithoutParentDictionaryInput, Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput> | Prisma.DictionaryItemCreateWithoutParentDictionaryInput[] | Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput[]
  connectOrCreate?: Prisma.DictionaryItemCreateOrConnectWithoutParentDictionaryInput | Prisma.DictionaryItemCreateOrConnectWithoutParentDictionaryInput[]
  upsert?: Prisma.DictionaryItemUpsertWithWhereUniqueWithoutParentDictionaryInput | Prisma.DictionaryItemUpsertWithWhereUniqueWithoutParentDictionaryInput[]
  createMany?: Prisma.DictionaryItemCreateManyParentDictionaryInputEnvelope
  set?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
  disconnect?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
  delete?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
  connect?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
  update?: Prisma.DictionaryItemUpdateWithWhereUniqueWithoutParentDictionaryInput | Prisma.DictionaryItemUpdateWithWhereUniqueWithoutParentDictionaryInput[]
  updateMany?: Prisma.DictionaryItemUpdateManyWithWhereWithoutParentDictionaryInput | Prisma.DictionaryItemUpdateManyWithWhereWithoutParentDictionaryInput[]
  deleteMany?: Prisma.DictionaryItemScalarWhereInput | Prisma.DictionaryItemScalarWhereInput[]
}

export type DictionaryItemUncheckedUpdateManyWithoutParentDictionaryNestedInput = {
  create?: Prisma.XOR<Prisma.DictionaryItemCreateWithoutParentDictionaryInput, Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput> | Prisma.DictionaryItemCreateWithoutParentDictionaryInput[] | Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput[]
  connectOrCreate?: Prisma.DictionaryItemCreateOrConnectWithoutParentDictionaryInput | Prisma.DictionaryItemCreateOrConnectWithoutParentDictionaryInput[]
  upsert?: Prisma.DictionaryItemUpsertWithWhereUniqueWithoutParentDictionaryInput | Prisma.DictionaryItemUpsertWithWhereUniqueWithoutParentDictionaryInput[]
  createMany?: Prisma.DictionaryItemCreateManyParentDictionaryInputEnvelope
  set?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
  disconnect?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
  delete?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
  connect?: Prisma.DictionaryItemWhereUniqueInput | Prisma.DictionaryItemWhereUniqueInput[]
  update?: Prisma.DictionaryItemUpdateWithWhereUniqueWithoutParentDictionaryInput | Prisma.DictionaryItemUpdateWithWhereUniqueWithoutParentDictionaryInput[]
  updateMany?: Prisma.DictionaryItemUpdateManyWithWhereWithoutParentDictionaryInput | Prisma.DictionaryItemUpdateManyWithWhereWithoutParentDictionaryInput[]
  deleteMany?: Prisma.DictionaryItemScalarWhereInput | Prisma.DictionaryItemScalarWhereInput[]
}

export type DictionaryItemCreateWithoutParentDictionaryInput = {
  name: string
  code: string
  order?: number | null
  cover?: string | null
  isEnabled?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type DictionaryItemUncheckedCreateWithoutParentDictionaryInput = {
  id?: number
  name: string
  code: string
  order?: number | null
  cover?: string | null
  isEnabled?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type DictionaryItemCreateOrConnectWithoutParentDictionaryInput = {
  where: Prisma.DictionaryItemWhereUniqueInput
  create: Prisma.XOR<Prisma.DictionaryItemCreateWithoutParentDictionaryInput, Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput>
}

export type DictionaryItemCreateManyParentDictionaryInputEnvelope = {
  data: Prisma.DictionaryItemCreateManyParentDictionaryInput | Prisma.DictionaryItemCreateManyParentDictionaryInput[]
  skipDuplicates?: boolean
}

export type DictionaryItemUpsertWithWhereUniqueWithoutParentDictionaryInput = {
  where: Prisma.DictionaryItemWhereUniqueInput
  update: Prisma.XOR<Prisma.DictionaryItemUpdateWithoutParentDictionaryInput, Prisma.DictionaryItemUncheckedUpdateWithoutParentDictionaryInput>
  create: Prisma.XOR<Prisma.DictionaryItemCreateWithoutParentDictionaryInput, Prisma.DictionaryItemUncheckedCreateWithoutParentDictionaryInput>
}

export type DictionaryItemUpdateWithWhereUniqueWithoutParentDictionaryInput = {
  where: Prisma.DictionaryItemWhereUniqueInput
  data: Prisma.XOR<Prisma.DictionaryItemUpdateWithoutParentDictionaryInput, Prisma.DictionaryItemUncheckedUpdateWithoutParentDictionaryInput>
}

export type DictionaryItemUpdateManyWithWhereWithoutParentDictionaryInput = {
  where: Prisma.DictionaryItemScalarWhereInput
  data: Prisma.XOR<Prisma.DictionaryItemUpdateManyMutationInput, Prisma.DictionaryItemUncheckedUpdateManyWithoutParentDictionaryInput>
}

export type DictionaryItemScalarWhereInput = {
  AND?: Prisma.DictionaryItemScalarWhereInput | Prisma.DictionaryItemScalarWhereInput[]
  OR?: Prisma.DictionaryItemScalarWhereInput[]
  NOT?: Prisma.DictionaryItemScalarWhereInput | Prisma.DictionaryItemScalarWhereInput[]
  id?: Prisma.IntFilter<"DictionaryItem"> | number
  dictionaryCode?: Prisma.StringFilter<"DictionaryItem"> | string
  name?: Prisma.StringFilter<"DictionaryItem"> | string
  code?: Prisma.StringFilter<"DictionaryItem"> | string
  order?: Prisma.IntNullableFilter<"DictionaryItem"> | number | null
  cover?: Prisma.StringNullableFilter<"DictionaryItem"> | string | null
  isEnabled?: Prisma.BoolFilter<"DictionaryItem"> | boolean
  description?: Prisma.StringNullableFilter<"DictionaryItem"> | string | null
  createdAt?: Prisma.DateTimeFilter<"DictionaryItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"DictionaryItem"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"DictionaryItem"> | Date | string | null
}

export type DictionaryItemCreateManyParentDictionaryInput = {
  id?: number
  name: string
  code: string
  order?: number | null
  cover?: string | null
  isEnabled?: boolean
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type DictionaryItemUpdateWithoutParentDictionaryInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type DictionaryItemUncheckedUpdateWithoutParentDictionaryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type DictionaryItemUncheckedUpdateManyWithoutParentDictionaryInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  cover?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type DictionaryItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dictionaryCode?: boolean
  name?: boolean
  code?: boolean
  order?: boolean
  cover?: boolean
  isEnabled?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  parentDictionary?: boolean | Prisma.DictionaryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dictionaryItem"]>

export type DictionaryItemSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dictionaryCode?: boolean
  name?: boolean
  code?: boolean
  order?: boolean
  cover?: boolean
  isEnabled?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  parentDictionary?: boolean | Prisma.DictionaryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dictionaryItem"]>

export type DictionaryItemSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dictionaryCode?: boolean
  name?: boolean
  code?: boolean
  order?: boolean
  cover?: boolean
  isEnabled?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  parentDictionary?: boolean | Prisma.DictionaryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dictionaryItem"]>

export type DictionaryItemSelectScalar = {
  id?: boolean
  dictionaryCode?: boolean
  name?: boolean
  code?: boolean
  order?: boolean
  cover?: boolean
  isEnabled?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type DictionaryItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "dictionaryCode" | "name" | "code" | "order" | "cover" | "isEnabled" | "description" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["dictionaryItem"]>
export type DictionaryItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parentDictionary?: boolean | Prisma.DictionaryDefaultArgs<ExtArgs>
}
export type DictionaryItemIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parentDictionary?: boolean | Prisma.DictionaryDefaultArgs<ExtArgs>
}
export type DictionaryItemIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parentDictionary?: boolean | Prisma.DictionaryDefaultArgs<ExtArgs>
}

export type $DictionaryItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "DictionaryItem"
  objects: {
    /**
     * 所属字典关系
     */
    parentDictionary: Prisma.$DictionaryPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    /**
     * 所属字典编码
     */
    dictionaryCode: string
    /**
     * 字典项名称
     */
    name: string
    /**
     * 字典项编码
     */
    code: string
    /**
     * 显示排序（数值越小越靠前）
     */
    order: number | null
    /**
     * 字典项图标URL
     */
    cover: string | null
    /**
     * 字典项状态：true=启用，false=禁用
     */
    isEnabled: boolean
    /**
     * 字典项描述信息
     */
    description: string | null
    /**
     * 创建时间
     */
    createdAt: Date
    /**
     * 更新时间
     */
    updatedAt: Date
    /**
     * 软删除时间
     */
    deletedAt: Date | null
  }, ExtArgs["result"]["dictionaryItem"]>
  composites: {}
}

export type DictionaryItemGetPayload<S extends boolean | null | undefined | DictionaryItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload, S>

export type DictionaryItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DictionaryItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: DictionaryItemCountAggregateInputType | true
  }

export interface DictionaryItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DictionaryItem'], meta: { name: 'DictionaryItem' } }
  /**
   * Find zero or one DictionaryItem that matches the filter.
   * @param {DictionaryItemFindUniqueArgs} args - Arguments to find a DictionaryItem
   * @example
   * // Get one DictionaryItem
   * const dictionaryItem = await prisma.dictionaryItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DictionaryItemFindUniqueArgs>(args: Prisma.SelectSubset<T, DictionaryItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DictionaryItemClient<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one DictionaryItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DictionaryItemFindUniqueOrThrowArgs} args - Arguments to find a DictionaryItem
   * @example
   * // Get one DictionaryItem
   * const dictionaryItem = await prisma.dictionaryItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DictionaryItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DictionaryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DictionaryItemClient<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DictionaryItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryItemFindFirstArgs} args - Arguments to find a DictionaryItem
   * @example
   * // Get one DictionaryItem
   * const dictionaryItem = await prisma.dictionaryItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DictionaryItemFindFirstArgs>(args?: Prisma.SelectSubset<T, DictionaryItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__DictionaryItemClient<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first DictionaryItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryItemFindFirstOrThrowArgs} args - Arguments to find a DictionaryItem
   * @example
   * // Get one DictionaryItem
   * const dictionaryItem = await prisma.dictionaryItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DictionaryItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DictionaryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DictionaryItemClient<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more DictionaryItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all DictionaryItems
   * const dictionaryItems = await prisma.dictionaryItem.findMany()
   * 
   * // Get first 10 DictionaryItems
   * const dictionaryItems = await prisma.dictionaryItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dictionaryItemWithIdOnly = await prisma.dictionaryItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DictionaryItemFindManyArgs>(args?: Prisma.SelectSubset<T, DictionaryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a DictionaryItem.
   * @param {DictionaryItemCreateArgs} args - Arguments to create a DictionaryItem.
   * @example
   * // Create one DictionaryItem
   * const DictionaryItem = await prisma.dictionaryItem.create({
   *   data: {
   *     // ... data to create a DictionaryItem
   *   }
   * })
   * 
   */
  create<T extends DictionaryItemCreateArgs>(args: Prisma.SelectSubset<T, DictionaryItemCreateArgs<ExtArgs>>): Prisma.Prisma__DictionaryItemClient<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many DictionaryItems.
   * @param {DictionaryItemCreateManyArgs} args - Arguments to create many DictionaryItems.
   * @example
   * // Create many DictionaryItems
   * const dictionaryItem = await prisma.dictionaryItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DictionaryItemCreateManyArgs>(args?: Prisma.SelectSubset<T, DictionaryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many DictionaryItems and returns the data saved in the database.
   * @param {DictionaryItemCreateManyAndReturnArgs} args - Arguments to create many DictionaryItems.
   * @example
   * // Create many DictionaryItems
   * const dictionaryItem = await prisma.dictionaryItem.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many DictionaryItems and only return the `id`
   * const dictionaryItemWithIdOnly = await prisma.dictionaryItem.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DictionaryItemCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DictionaryItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a DictionaryItem.
   * @param {DictionaryItemDeleteArgs} args - Arguments to delete one DictionaryItem.
   * @example
   * // Delete one DictionaryItem
   * const DictionaryItem = await prisma.dictionaryItem.delete({
   *   where: {
   *     // ... filter to delete one DictionaryItem
   *   }
   * })
   * 
   */
  delete<T extends DictionaryItemDeleteArgs>(args: Prisma.SelectSubset<T, DictionaryItemDeleteArgs<ExtArgs>>): Prisma.Prisma__DictionaryItemClient<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one DictionaryItem.
   * @param {DictionaryItemUpdateArgs} args - Arguments to update one DictionaryItem.
   * @example
   * // Update one DictionaryItem
   * const dictionaryItem = await prisma.dictionaryItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DictionaryItemUpdateArgs>(args: Prisma.SelectSubset<T, DictionaryItemUpdateArgs<ExtArgs>>): Prisma.Prisma__DictionaryItemClient<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more DictionaryItems.
   * @param {DictionaryItemDeleteManyArgs} args - Arguments to filter DictionaryItems to delete.
   * @example
   * // Delete a few DictionaryItems
   * const { count } = await prisma.dictionaryItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DictionaryItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, DictionaryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DictionaryItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many DictionaryItems
   * const dictionaryItem = await prisma.dictionaryItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DictionaryItemUpdateManyArgs>(args: Prisma.SelectSubset<T, DictionaryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more DictionaryItems and returns the data updated in the database.
   * @param {DictionaryItemUpdateManyAndReturnArgs} args - Arguments to update many DictionaryItems.
   * @example
   * // Update many DictionaryItems
   * const dictionaryItem = await prisma.dictionaryItem.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more DictionaryItems and only return the `id`
   * const dictionaryItemWithIdOnly = await prisma.dictionaryItem.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DictionaryItemUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DictionaryItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one DictionaryItem.
   * @param {DictionaryItemUpsertArgs} args - Arguments to update or create a DictionaryItem.
   * @example
   * // Update or create a DictionaryItem
   * const dictionaryItem = await prisma.dictionaryItem.upsert({
   *   create: {
   *     // ... data to create a DictionaryItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the DictionaryItem we want to update
   *   }
   * })
   */
  upsert<T extends DictionaryItemUpsertArgs>(args: Prisma.SelectSubset<T, DictionaryItemUpsertArgs<ExtArgs>>): Prisma.Prisma__DictionaryItemClient<runtime.Types.Result.GetResult<Prisma.$DictionaryItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of DictionaryItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryItemCountArgs} args - Arguments to filter DictionaryItems to count.
   * @example
   * // Count the number of DictionaryItems
   * const count = await prisma.dictionaryItem.count({
   *   where: {
   *     // ... the filter for the DictionaryItems we want to count
   *   }
   * })
  **/
  count<T extends DictionaryItemCountArgs>(
    args?: Prisma.Subset<T, DictionaryItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DictionaryItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a DictionaryItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DictionaryItemAggregateArgs>(args: Prisma.Subset<T, DictionaryItemAggregateArgs>): Prisma.PrismaPromise<GetDictionaryItemAggregateType<T>>

  /**
   * Group by DictionaryItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DictionaryItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DictionaryItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DictionaryItemGroupByArgs['orderBy'] }
      : { orderBy?: DictionaryItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DictionaryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDictionaryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the DictionaryItem model
 */
readonly fields: DictionaryItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for DictionaryItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DictionaryItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  parentDictionary<T extends Prisma.DictionaryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DictionaryDefaultArgs<ExtArgs>>): Prisma.Prisma__DictionaryClient<runtime.Types.Result.GetResult<Prisma.$DictionaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the DictionaryItem model
 */
export interface DictionaryItemFieldRefs {
  readonly id: Prisma.FieldRef<"DictionaryItem", 'Int'>
  readonly dictionaryCode: Prisma.FieldRef<"DictionaryItem", 'String'>
  readonly name: Prisma.FieldRef<"DictionaryItem", 'String'>
  readonly code: Prisma.FieldRef<"DictionaryItem", 'String'>
  readonly order: Prisma.FieldRef<"DictionaryItem", 'Int'>
  readonly cover: Prisma.FieldRef<"DictionaryItem", 'String'>
  readonly isEnabled: Prisma.FieldRef<"DictionaryItem", 'Boolean'>
  readonly description: Prisma.FieldRef<"DictionaryItem", 'String'>
  readonly createdAt: Prisma.FieldRef<"DictionaryItem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"DictionaryItem", 'DateTime'>
  readonly deletedAt: Prisma.FieldRef<"DictionaryItem", 'DateTime'>
}
    

// Custom InputTypes
/**
 * DictionaryItem findUnique
 */
export type DictionaryItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * Filter, which DictionaryItem to fetch.
   */
  where: Prisma.DictionaryItemWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem findUniqueOrThrow
 */
export type DictionaryItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * Filter, which DictionaryItem to fetch.
   */
  where: Prisma.DictionaryItemWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem findFirst
 */
export type DictionaryItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * Filter, which DictionaryItem to fetch.
   */
  where?: Prisma.DictionaryItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DictionaryItems to fetch.
   */
  orderBy?: Prisma.DictionaryItemOrderByWithRelationInput | Prisma.DictionaryItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DictionaryItems.
   */
  cursor?: Prisma.DictionaryItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` DictionaryItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DictionaryItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DictionaryItems.
   */
  distinct?: Prisma.DictionaryItemScalarFieldEnum | Prisma.DictionaryItemScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem findFirstOrThrow
 */
export type DictionaryItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * Filter, which DictionaryItem to fetch.
   */
  where?: Prisma.DictionaryItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DictionaryItems to fetch.
   */
  orderBy?: Prisma.DictionaryItemOrderByWithRelationInput | Prisma.DictionaryItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for DictionaryItems.
   */
  cursor?: Prisma.DictionaryItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` DictionaryItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DictionaryItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of DictionaryItems.
   */
  distinct?: Prisma.DictionaryItemScalarFieldEnum | Prisma.DictionaryItemScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem findMany
 */
export type DictionaryItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * Filter, which DictionaryItems to fetch.
   */
  where?: Prisma.DictionaryItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of DictionaryItems to fetch.
   */
  orderBy?: Prisma.DictionaryItemOrderByWithRelationInput | Prisma.DictionaryItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing DictionaryItems.
   */
  cursor?: Prisma.DictionaryItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` DictionaryItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` DictionaryItems.
   */
  skip?: number
  distinct?: Prisma.DictionaryItemScalarFieldEnum | Prisma.DictionaryItemScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem create
 */
export type DictionaryItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * The data needed to create a DictionaryItem.
   */
  data: Prisma.XOR<Prisma.DictionaryItemCreateInput, Prisma.DictionaryItemUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem createMany
 */
export type DictionaryItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many DictionaryItems.
   */
  data: Prisma.DictionaryItemCreateManyInput | Prisma.DictionaryItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * DictionaryItem createManyAndReturn
 */
export type DictionaryItemCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * The data used to create many DictionaryItems.
   */
  data: Prisma.DictionaryItemCreateManyInput | Prisma.DictionaryItemCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * DictionaryItem update
 */
export type DictionaryItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * The data needed to update a DictionaryItem.
   */
  data: Prisma.XOR<Prisma.DictionaryItemUpdateInput, Prisma.DictionaryItemUncheckedUpdateInput>
  /**
   * Choose, which DictionaryItem to update.
   */
  where: Prisma.DictionaryItemWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem updateMany
 */
export type DictionaryItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update DictionaryItems.
   */
  data: Prisma.XOR<Prisma.DictionaryItemUpdateManyMutationInput, Prisma.DictionaryItemUncheckedUpdateManyInput>
  /**
   * Filter which DictionaryItems to update
   */
  where?: Prisma.DictionaryItemWhereInput
  /**
   * Limit how many DictionaryItems to update.
   */
  limit?: number
}

/**
 * DictionaryItem updateManyAndReturn
 */
export type DictionaryItemUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * The data used to update DictionaryItems.
   */
  data: Prisma.XOR<Prisma.DictionaryItemUpdateManyMutationInput, Prisma.DictionaryItemUncheckedUpdateManyInput>
  /**
   * Filter which DictionaryItems to update
   */
  where?: Prisma.DictionaryItemWhereInput
  /**
   * Limit how many DictionaryItems to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * DictionaryItem upsert
 */
export type DictionaryItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * The filter to search for the DictionaryItem to update in case it exists.
   */
  where: Prisma.DictionaryItemWhereUniqueInput
  /**
   * In case the DictionaryItem found by the `where` argument doesn't exist, create a new DictionaryItem with this data.
   */
  create: Prisma.XOR<Prisma.DictionaryItemCreateInput, Prisma.DictionaryItemUncheckedCreateInput>
  /**
   * In case the DictionaryItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DictionaryItemUpdateInput, Prisma.DictionaryItemUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem delete
 */
export type DictionaryItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
  /**
   * Filter which DictionaryItem to delete.
   */
  where: Prisma.DictionaryItemWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * DictionaryItem deleteMany
 */
export type DictionaryItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which DictionaryItems to delete
   */
  where?: Prisma.DictionaryItemWhereInput
  /**
   * Limit how many DictionaryItems to delete.
   */
  limit?: number
}

/**
 * DictionaryItem without action
 */
export type DictionaryItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DictionaryItem
   */
  select?: Prisma.DictionaryItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DictionaryItem
   */
  omit?: Prisma.DictionaryItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DictionaryItemInclude<ExtArgs> | null
}
