/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `WorkAuthor` model and its related types.
 *
 * üü¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model WorkAuthor
 * ‰ΩúËÄÖ‰ø°ÊÅØÊ®°Âûã
 */
export type WorkAuthorModel =
  runtime.Types.Result.DefaultSelection<Prisma.$WorkAuthorPayload>;

export type AggregateWorkAuthor = {
  _count: WorkAuthorCountAggregateOutputType | null;
  _avg: WorkAuthorAvgAggregateOutputType | null;
  _sum: WorkAuthorSumAggregateOutputType | null;
  _min: WorkAuthorMinAggregateOutputType | null;
  _max: WorkAuthorMaxAggregateOutputType | null;
};

export type WorkAuthorAvgAggregateOutputType = {
  id: number | null;
  roles: number | null;
  gender: number | null;
  worksCount: number | null;
  followersCount: number | null;
};

export type WorkAuthorSumAggregateOutputType = {
  id: number | null;
  roles: number | null;
  gender: number | null;
  worksCount: number | null;
  followersCount: number | null;
};

export type WorkAuthorMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  avatar: string | null;
  description: string | null;
  isEnabled: boolean | null;
  roles: number | null;
  nationality: string | null;
  gender: number | null;
  worksCount: number | null;
  followersCount: number | null;
  featured: boolean | null;
  socialLinks: string | null;
  remark: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  deletedAt: Date | null;
};

export type WorkAuthorMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  avatar: string | null;
  description: string | null;
  isEnabled: boolean | null;
  roles: number | null;
  nationality: string | null;
  gender: number | null;
  worksCount: number | null;
  followersCount: number | null;
  featured: boolean | null;
  socialLinks: string | null;
  remark: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  deletedAt: Date | null;
};

export type WorkAuthorCountAggregateOutputType = {
  id: number;
  name: number;
  avatar: number;
  description: number;
  isEnabled: number;
  roles: number;
  nationality: number;
  gender: number;
  worksCount: number;
  followersCount: number;
  featured: number;
  socialLinks: number;
  remark: number;
  createdAt: number;
  updatedAt: number;
  deletedAt: number;
  _all: number;
};

export type WorkAuthorAvgAggregateInputType = {
  id?: true;
  roles?: true;
  gender?: true;
  worksCount?: true;
  followersCount?: true;
};

export type WorkAuthorSumAggregateInputType = {
  id?: true;
  roles?: true;
  gender?: true;
  worksCount?: true;
  followersCount?: true;
};

export type WorkAuthorMinAggregateInputType = {
  id?: true;
  name?: true;
  avatar?: true;
  description?: true;
  isEnabled?: true;
  roles?: true;
  nationality?: true;
  gender?: true;
  worksCount?: true;
  followersCount?: true;
  featured?: true;
  socialLinks?: true;
  remark?: true;
  createdAt?: true;
  updatedAt?: true;
  deletedAt?: true;
};

export type WorkAuthorMaxAggregateInputType = {
  id?: true;
  name?: true;
  avatar?: true;
  description?: true;
  isEnabled?: true;
  roles?: true;
  nationality?: true;
  gender?: true;
  worksCount?: true;
  followersCount?: true;
  featured?: true;
  socialLinks?: true;
  remark?: true;
  createdAt?: true;
  updatedAt?: true;
  deletedAt?: true;
};

export type WorkAuthorCountAggregateInputType = {
  id?: true;
  name?: true;
  avatar?: true;
  description?: true;
  isEnabled?: true;
  roles?: true;
  nationality?: true;
  gender?: true;
  worksCount?: true;
  followersCount?: true;
  featured?: true;
  socialLinks?: true;
  remark?: true;
  createdAt?: true;
  updatedAt?: true;
  deletedAt?: true;
  _all?: true;
};

export type WorkAuthorAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which WorkAuthor to aggregate.
   */
  where?: Prisma.WorkAuthorWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkAuthors to fetch.
   */
  orderBy?:
    | Prisma.WorkAuthorOrderByWithRelationInput
    | Prisma.WorkAuthorOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.WorkAuthorWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `¬±n` WorkAuthors from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkAuthors.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned WorkAuthors
   **/
  _count?: true | WorkAuthorCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: WorkAuthorAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: WorkAuthorSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: WorkAuthorMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: WorkAuthorMaxAggregateInputType;
};

export type GetWorkAuthorAggregateType<T extends WorkAuthorAggregateArgs> = {
  [P in keyof T & keyof AggregateWorkAuthor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkAuthor[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkAuthor[P]>;
};

export type WorkAuthorGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.WorkAuthorWhereInput;
  orderBy?:
    | Prisma.WorkAuthorOrderByWithAggregationInput
    | Prisma.WorkAuthorOrderByWithAggregationInput[];
  by: Prisma.WorkAuthorScalarFieldEnum[] | Prisma.WorkAuthorScalarFieldEnum;
  having?: Prisma.WorkAuthorScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: WorkAuthorCountAggregateInputType | true;
  _avg?: WorkAuthorAvgAggregateInputType;
  _sum?: WorkAuthorSumAggregateInputType;
  _min?: WorkAuthorMinAggregateInputType;
  _max?: WorkAuthorMaxAggregateInputType;
};

export type WorkAuthorGroupByOutputType = {
  id: number;
  name: string;
  avatar: string | null;
  description: string | null;
  isEnabled: boolean;
  roles: number | null;
  nationality: string | null;
  gender: number;
  worksCount: number;
  followersCount: number;
  featured: boolean;
  socialLinks: string | null;
  remark: string | null;
  createdAt: Date;
  updatedAt: Date;
  deletedAt: Date | null;
  _count: WorkAuthorCountAggregateOutputType | null;
  _avg: WorkAuthorAvgAggregateOutputType | null;
  _sum: WorkAuthorSumAggregateOutputType | null;
  _min: WorkAuthorMinAggregateOutputType | null;
  _max: WorkAuthorMaxAggregateOutputType | null;
};

type GetWorkAuthorGroupByPayload<T extends WorkAuthorGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<WorkAuthorGroupByOutputType, T['by']> & {
        [P in keyof T & keyof WorkAuthorGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkAuthorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkAuthorGroupByOutputType[P]>;
      }
    >
  >;

export type WorkAuthorWhereInput = {
  AND?: Prisma.WorkAuthorWhereInput | Prisma.WorkAuthorWhereInput[];
  OR?: Prisma.WorkAuthorWhereInput[];
  NOT?: Prisma.WorkAuthorWhereInput | Prisma.WorkAuthorWhereInput[];
  id?: Prisma.IntFilter<'WorkAuthor'> | number;
  name?: Prisma.StringFilter<'WorkAuthor'> | string;
  avatar?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
  description?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
  isEnabled?: Prisma.BoolFilter<'WorkAuthor'> | boolean;
  roles?: Prisma.IntNullableFilter<'WorkAuthor'> | number | null;
  nationality?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
  gender?: Prisma.IntFilter<'WorkAuthor'> | number;
  worksCount?: Prisma.IntFilter<'WorkAuthor'> | number;
  followersCount?: Prisma.IntFilter<'WorkAuthor'> | number;
  featured?: Prisma.BoolFilter<'WorkAuthor'> | boolean;
  socialLinks?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
  remark?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
  createdAt?: Prisma.DateTimeFilter<'WorkAuthor'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'WorkAuthor'> | Date | string;
  deletedAt?:
    | Prisma.DateTimeNullableFilter<'WorkAuthor'>
    | Date
    | string
    | null;
  comicAuthors?: Prisma.WorkComicAuthorListRelationFilter;
};

export type WorkAuthorOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  roles?: Prisma.SortOrderInput | Prisma.SortOrder;
  nationality?: Prisma.SortOrderInput | Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  worksCount?: Prisma.SortOrder;
  followersCount?: Prisma.SortOrder;
  featured?: Prisma.SortOrder;
  socialLinks?: Prisma.SortOrderInput | Prisma.SortOrder;
  remark?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  comicAuthors?: Prisma.WorkComicAuthorOrderByRelationAggregateInput;
};

export type WorkAuthorWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    name?: string;
    AND?: Prisma.WorkAuthorWhereInput | Prisma.WorkAuthorWhereInput[];
    OR?: Prisma.WorkAuthorWhereInput[];
    NOT?: Prisma.WorkAuthorWhereInput | Prisma.WorkAuthorWhereInput[];
    avatar?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
    description?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
    isEnabled?: Prisma.BoolFilter<'WorkAuthor'> | boolean;
    roles?: Prisma.IntNullableFilter<'WorkAuthor'> | number | null;
    nationality?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
    gender?: Prisma.IntFilter<'WorkAuthor'> | number;
    worksCount?: Prisma.IntFilter<'WorkAuthor'> | number;
    followersCount?: Prisma.IntFilter<'WorkAuthor'> | number;
    featured?: Prisma.BoolFilter<'WorkAuthor'> | boolean;
    socialLinks?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
    remark?: Prisma.StringNullableFilter<'WorkAuthor'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'WorkAuthor'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'WorkAuthor'> | Date | string;
    deletedAt?:
      | Prisma.DateTimeNullableFilter<'WorkAuthor'>
      | Date
      | string
      | null;
    comicAuthors?: Prisma.WorkComicAuthorListRelationFilter;
  },
  'id' | 'name'
>;

export type WorkAuthorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  roles?: Prisma.SortOrderInput | Prisma.SortOrder;
  nationality?: Prisma.SortOrderInput | Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  worksCount?: Prisma.SortOrder;
  followersCount?: Prisma.SortOrder;
  featured?: Prisma.SortOrder;
  socialLinks?: Prisma.SortOrderInput | Prisma.SortOrder;
  remark?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.WorkAuthorCountOrderByAggregateInput;
  _avg?: Prisma.WorkAuthorAvgOrderByAggregateInput;
  _max?: Prisma.WorkAuthorMaxOrderByAggregateInput;
  _min?: Prisma.WorkAuthorMinOrderByAggregateInput;
  _sum?: Prisma.WorkAuthorSumOrderByAggregateInput;
};

export type WorkAuthorScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.WorkAuthorScalarWhereWithAggregatesInput
    | Prisma.WorkAuthorScalarWhereWithAggregatesInput[];
  OR?: Prisma.WorkAuthorScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.WorkAuthorScalarWhereWithAggregatesInput
    | Prisma.WorkAuthorScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'WorkAuthor'> | number;
  name?: Prisma.StringWithAggregatesFilter<'WorkAuthor'> | string;
  avatar?:
    | Prisma.StringNullableWithAggregatesFilter<'WorkAuthor'>
    | string
    | null;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'WorkAuthor'>
    | string
    | null;
  isEnabled?: Prisma.BoolWithAggregatesFilter<'WorkAuthor'> | boolean;
  roles?: Prisma.IntNullableWithAggregatesFilter<'WorkAuthor'> | number | null;
  nationality?:
    | Prisma.StringNullableWithAggregatesFilter<'WorkAuthor'>
    | string
    | null;
  gender?: Prisma.IntWithAggregatesFilter<'WorkAuthor'> | number;
  worksCount?: Prisma.IntWithAggregatesFilter<'WorkAuthor'> | number;
  followersCount?: Prisma.IntWithAggregatesFilter<'WorkAuthor'> | number;
  featured?: Prisma.BoolWithAggregatesFilter<'WorkAuthor'> | boolean;
  socialLinks?:
    | Prisma.StringNullableWithAggregatesFilter<'WorkAuthor'>
    | string
    | null;
  remark?:
    | Prisma.StringNullableWithAggregatesFilter<'WorkAuthor'>
    | string
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'WorkAuthor'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'WorkAuthor'> | Date | string;
  deletedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'WorkAuthor'>
    | Date
    | string
    | null;
};

export type WorkAuthorCreateInput = {
  name: string;
  avatar?: string | null;
  description?: string | null;
  isEnabled?: boolean;
  roles?: number | null;
  nationality?: string | null;
  gender?: number;
  worksCount?: number;
  followersCount?: number;
  featured?: boolean;
  socialLinks?: string | null;
  remark?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
  comicAuthors?: Prisma.WorkComicAuthorCreateNestedManyWithoutAuthorInput;
};

export type WorkAuthorUncheckedCreateInput = {
  id?: number;
  name: string;
  avatar?: string | null;
  description?: string | null;
  isEnabled?: boolean;
  roles?: number | null;
  nationality?: string | null;
  gender?: number;
  worksCount?: number;
  followersCount?: number;
  featured?: boolean;
  socialLinks?: string | null;
  remark?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
  comicAuthors?: Prisma.WorkComicAuthorUncheckedCreateNestedManyWithoutAuthorInput;
};

export type WorkAuthorUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  roles?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  nationality?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.IntFieldUpdateOperationsInput | number;
  worksCount?: Prisma.IntFieldUpdateOperationsInput | number;
  followersCount?: Prisma.IntFieldUpdateOperationsInput | number;
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  socialLinks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  comicAuthors?: Prisma.WorkComicAuthorUpdateManyWithoutAuthorNestedInput;
};

export type WorkAuthorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  roles?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  nationality?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.IntFieldUpdateOperationsInput | number;
  worksCount?: Prisma.IntFieldUpdateOperationsInput | number;
  followersCount?: Prisma.IntFieldUpdateOperationsInput | number;
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  socialLinks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  comicAuthors?: Prisma.WorkComicAuthorUncheckedUpdateManyWithoutAuthorNestedInput;
};

export type WorkAuthorCreateManyInput = {
  id?: number;
  name: string;
  avatar?: string | null;
  description?: string | null;
  isEnabled?: boolean;
  roles?: number | null;
  nationality?: string | null;
  gender?: number;
  worksCount?: number;
  followersCount?: number;
  featured?: boolean;
  socialLinks?: string | null;
  remark?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
};

export type WorkAuthorUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  roles?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  nationality?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.IntFieldUpdateOperationsInput | number;
  worksCount?: Prisma.IntFieldUpdateOperationsInput | number;
  followersCount?: Prisma.IntFieldUpdateOperationsInput | number;
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  socialLinks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type WorkAuthorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  roles?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  nationality?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.IntFieldUpdateOperationsInput | number;
  worksCount?: Prisma.IntFieldUpdateOperationsInput | number;
  followersCount?: Prisma.IntFieldUpdateOperationsInput | number;
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  socialLinks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type WorkAuthorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  avatar?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  roles?: Prisma.SortOrder;
  nationality?: Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  worksCount?: Prisma.SortOrder;
  followersCount?: Prisma.SortOrder;
  featured?: Prisma.SortOrder;
  socialLinks?: Prisma.SortOrder;
  remark?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type WorkAuthorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  roles?: Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  worksCount?: Prisma.SortOrder;
  followersCount?: Prisma.SortOrder;
};

export type WorkAuthorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  avatar?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  roles?: Prisma.SortOrder;
  nationality?: Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  worksCount?: Prisma.SortOrder;
  followersCount?: Prisma.SortOrder;
  featured?: Prisma.SortOrder;
  socialLinks?: Prisma.SortOrder;
  remark?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type WorkAuthorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  avatar?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  roles?: Prisma.SortOrder;
  nationality?: Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  worksCount?: Prisma.SortOrder;
  followersCount?: Prisma.SortOrder;
  featured?: Prisma.SortOrder;
  socialLinks?: Prisma.SortOrder;
  remark?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  deletedAt?: Prisma.SortOrder;
};

export type WorkAuthorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  roles?: Prisma.SortOrder;
  gender?: Prisma.SortOrder;
  worksCount?: Prisma.SortOrder;
  followersCount?: Prisma.SortOrder;
};

export type WorkAuthorScalarRelationFilter = {
  is?: Prisma.WorkAuthorWhereInput;
  isNot?: Prisma.WorkAuthorWhereInput;
};

export type WorkAuthorCreateNestedOneWithoutComicAuthorsInput = {
  create?: Prisma.XOR<
    Prisma.WorkAuthorCreateWithoutComicAuthorsInput,
    Prisma.WorkAuthorUncheckedCreateWithoutComicAuthorsInput
  >;
  connectOrCreate?: Prisma.WorkAuthorCreateOrConnectWithoutComicAuthorsInput;
  connect?: Prisma.WorkAuthorWhereUniqueInput;
};

export type WorkAuthorUpdateOneRequiredWithoutComicAuthorsNestedInput = {
  create?: Prisma.XOR<
    Prisma.WorkAuthorCreateWithoutComicAuthorsInput,
    Prisma.WorkAuthorUncheckedCreateWithoutComicAuthorsInput
  >;
  connectOrCreate?: Prisma.WorkAuthorCreateOrConnectWithoutComicAuthorsInput;
  upsert?: Prisma.WorkAuthorUpsertWithoutComicAuthorsInput;
  connect?: Prisma.WorkAuthorWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.WorkAuthorUpdateToOneWithWhereWithoutComicAuthorsInput,
      Prisma.WorkAuthorUpdateWithoutComicAuthorsInput
    >,
    Prisma.WorkAuthorUncheckedUpdateWithoutComicAuthorsInput
  >;
};

export type WorkAuthorCreateWithoutComicAuthorsInput = {
  name: string;
  avatar?: string | null;
  description?: string | null;
  isEnabled?: boolean;
  roles?: number | null;
  nationality?: string | null;
  gender?: number;
  worksCount?: number;
  followersCount?: number;
  featured?: boolean;
  socialLinks?: string | null;
  remark?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
};

export type WorkAuthorUncheckedCreateWithoutComicAuthorsInput = {
  id?: number;
  name: string;
  avatar?: string | null;
  description?: string | null;
  isEnabled?: boolean;
  roles?: number | null;
  nationality?: string | null;
  gender?: number;
  worksCount?: number;
  followersCount?: number;
  featured?: boolean;
  socialLinks?: string | null;
  remark?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  deletedAt?: Date | string | null;
};

export type WorkAuthorCreateOrConnectWithoutComicAuthorsInput = {
  where: Prisma.WorkAuthorWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkAuthorCreateWithoutComicAuthorsInput,
    Prisma.WorkAuthorUncheckedCreateWithoutComicAuthorsInput
  >;
};

export type WorkAuthorUpsertWithoutComicAuthorsInput = {
  update: Prisma.XOR<
    Prisma.WorkAuthorUpdateWithoutComicAuthorsInput,
    Prisma.WorkAuthorUncheckedUpdateWithoutComicAuthorsInput
  >;
  create: Prisma.XOR<
    Prisma.WorkAuthorCreateWithoutComicAuthorsInput,
    Prisma.WorkAuthorUncheckedCreateWithoutComicAuthorsInput
  >;
  where?: Prisma.WorkAuthorWhereInput;
};

export type WorkAuthorUpdateToOneWithWhereWithoutComicAuthorsInput = {
  where?: Prisma.WorkAuthorWhereInput;
  data: Prisma.XOR<
    Prisma.WorkAuthorUpdateWithoutComicAuthorsInput,
    Prisma.WorkAuthorUncheckedUpdateWithoutComicAuthorsInput
  >;
};

export type WorkAuthorUpdateWithoutComicAuthorsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  roles?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  nationality?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.IntFieldUpdateOperationsInput | number;
  worksCount?: Prisma.IntFieldUpdateOperationsInput | number;
  followersCount?: Prisma.IntFieldUpdateOperationsInput | number;
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  socialLinks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

export type WorkAuthorUncheckedUpdateWithoutComicAuthorsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  roles?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  nationality?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  gender?: Prisma.IntFieldUpdateOperationsInput | number;
  worksCount?: Prisma.IntFieldUpdateOperationsInput | number;
  followersCount?: Prisma.IntFieldUpdateOperationsInput | number;
  featured?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  socialLinks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  remark?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  deletedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
};

/**
 * Count Type WorkAuthorCountOutputType
 */

export type WorkAuthorCountOutputType = {
  comicAuthors: number;
};

export type WorkAuthorCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  comicAuthors?: boolean | WorkAuthorCountOutputTypeCountComicAuthorsArgs;
};

/**
 * WorkAuthorCountOutputType without action
 */
export type WorkAuthorCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthorCountOutputType
   */
  select?: Prisma.WorkAuthorCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * WorkAuthorCountOutputType without action
 */
export type WorkAuthorCountOutputTypeCountComicAuthorsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.WorkComicAuthorWhereInput;
};

export type WorkAuthorSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    avatar?: boolean;
    description?: boolean;
    isEnabled?: boolean;
    roles?: boolean;
    nationality?: boolean;
    gender?: boolean;
    worksCount?: boolean;
    followersCount?: boolean;
    featured?: boolean;
    socialLinks?: boolean;
    remark?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    deletedAt?: boolean;
    comicAuthors?: boolean | Prisma.WorkAuthor$comicAuthorsArgs<ExtArgs>;
    _count?: boolean | Prisma.WorkAuthorCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['workAuthor']
>;

export type WorkAuthorSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    avatar?: boolean;
    description?: boolean;
    isEnabled?: boolean;
    roles?: boolean;
    nationality?: boolean;
    gender?: boolean;
    worksCount?: boolean;
    followersCount?: boolean;
    featured?: boolean;
    socialLinks?: boolean;
    remark?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    deletedAt?: boolean;
  },
  ExtArgs['result']['workAuthor']
>;

export type WorkAuthorSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    avatar?: boolean;
    description?: boolean;
    isEnabled?: boolean;
    roles?: boolean;
    nationality?: boolean;
    gender?: boolean;
    worksCount?: boolean;
    followersCount?: boolean;
    featured?: boolean;
    socialLinks?: boolean;
    remark?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    deletedAt?: boolean;
  },
  ExtArgs['result']['workAuthor']
>;

export type WorkAuthorSelectScalar = {
  id?: boolean;
  name?: boolean;
  avatar?: boolean;
  description?: boolean;
  isEnabled?: boolean;
  roles?: boolean;
  nationality?: boolean;
  gender?: boolean;
  worksCount?: boolean;
  followersCount?: boolean;
  featured?: boolean;
  socialLinks?: boolean;
  remark?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  deletedAt?: boolean;
};

export type WorkAuthorOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'name'
  | 'avatar'
  | 'description'
  | 'isEnabled'
  | 'roles'
  | 'nationality'
  | 'gender'
  | 'worksCount'
  | 'followersCount'
  | 'featured'
  | 'socialLinks'
  | 'remark'
  | 'createdAt'
  | 'updatedAt'
  | 'deletedAt',
  ExtArgs['result']['workAuthor']
>;
export type WorkAuthorInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  comicAuthors?: boolean | Prisma.WorkAuthor$comicAuthorsArgs<ExtArgs>;
  _count?: boolean | Prisma.WorkAuthorCountOutputTypeDefaultArgs<ExtArgs>;
};
export type WorkAuthorIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type WorkAuthorIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $WorkAuthorPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'WorkAuthor';
  objects: {
    comicAuthors: Prisma.$WorkComicAuthorPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * ‰∏ªÈîÆID
       */
      id: number;
      /**
       * ‰ΩúËÄÖÂßìÂêç
       */
      name: string;
      /**
       * ‰ΩúËÄÖÂ§¥ÂÉèURL
       */
      avatar: string | null;
      /**
       * ‰ΩúËÄÖÊèèËø∞
       */
      description: string | null;
      /**
       * ÂêØÁî®Áä∂ÊÄÅÔºàtrue: ÂêØÁî®, false: Á¶ÅÁî®Ôºâ
       */
      isEnabled: boolean;
      /**
       * ‰ΩúËÄÖË∫´‰ªΩËßíËâ≤Ôºà‰ΩçËøêÁÆóÔºö1=Êº´ÁîªÂÆ∂, 2=‰ΩúÂÆ∂, 4=ÊèíÁîªÂ∏à, 8=Ê®°ÁâπÔºâ
       */
      roles: number | null;
      /**
       * ÂõΩÁ±ç
       */
      nationality: string | null;
      /**
       * ÊÄßÂà´Ôºà0: Êú™Áü•, 1: Áî∑ÊÄß, 2: Â•≥ÊÄß, 3: ÂÖ∂‰ªñÔºâ
       */
      gender: number;
      /**
       * ‰ΩúÂìÅÊï∞ÈáèÔºàÂÜó‰ΩôÂ≠óÊÆµÔºåÁî®‰∫éÊèêÂçáÊü•ËØ¢ÊÄßËÉΩÔºâ
       */
      worksCount: number;
      /**
       * Á≤â‰∏ùÊï∞ÈáèÔºàÂÜó‰ΩôÂ≠óÊÆµÔºåÁî®‰∫éÂâçÂè∞Â±ïÁ§∫Ôºâ
       */
      followersCount: number;
      /**
       * ÊòØÂê¶‰∏∫Êé®Ëçê‰ΩúËÄÖÔºàÁî®‰∫éÂâçÂè∞Êé®ËçêÂ±ïÁ§∫Ôºâ
       */
      featured: boolean;
      /**
       * Á§æ‰∫§Â™í‰ΩìÈìæÊé•ÔºàJSONÊ†ºÂºèÂ≠òÂÇ®Â§ö‰∏™Âπ≥Âè∞ÈìæÊé•Ôºâ
       */
      socialLinks: string | null;
      /**
       * ÁÆ°ÁêÜÂëòÂ§áÊ≥®
       */
      remark: string | null;
      /**
       * ÂàõÂª∫Êó∂Èó¥
       */
      createdAt: Date;
      /**
       * Êõ¥Êñ∞Êó∂Èó¥
       */
      updatedAt: Date;
      /**
       * ËΩØÂà†Èô§Êó∂Èó¥ÔºàÁî®‰∫éÊï∞ÊçÆÊÅ¢Â§çÊàñÂΩíÊ°£Ôºâ
       */
      deletedAt: Date | null;
    },
    ExtArgs['result']['workAuthor']
  >;
  composites: {};
};

export type WorkAuthorGetPayload<
  S extends boolean | null | undefined | WorkAuthorDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$WorkAuthorPayload, S>;

export type WorkAuthorCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  WorkAuthorFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'
> & {
  select?: WorkAuthorCountAggregateInputType | true;
};

export interface WorkAuthorDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['WorkAuthor'];
    meta: { name: 'WorkAuthor' };
  };
  /**
   * Find zero or one WorkAuthor that matches the filter.
   * @param {WorkAuthorFindUniqueArgs} args - Arguments to find a WorkAuthor
   * @example
   * // Get one WorkAuthor
   * const workAuthor = await prisma.workAuthor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkAuthorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, WorkAuthorFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__WorkAuthorClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one WorkAuthor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkAuthorFindUniqueOrThrowArgs} args - Arguments to find a WorkAuthor
   * @example
   * // Get one WorkAuthor
   * const workAuthor = await prisma.workAuthor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkAuthorFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, WorkAuthorFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkAuthorClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkAuthor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkAuthorFindFirstArgs} args - Arguments to find a WorkAuthor
   * @example
   * // Get one WorkAuthor
   * const workAuthor = await prisma.workAuthor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkAuthorFindFirstArgs>(
    args?: Prisma.SelectSubset<T, WorkAuthorFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__WorkAuthorClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkAuthor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkAuthorFindFirstOrThrowArgs} args - Arguments to find a WorkAuthor
   * @example
   * // Get one WorkAuthor
   * const workAuthor = await prisma.workAuthor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkAuthorFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, WorkAuthorFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__WorkAuthorClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more WorkAuthors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkAuthorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkAuthors
   * const workAuthors = await prisma.workAuthor.findMany()
   *
   * // Get first 10 WorkAuthors
   * const workAuthors = await prisma.workAuthor.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const workAuthorWithIdOnly = await prisma.workAuthor.findMany({ select: { id: true } })
   *
   */
  findMany<T extends WorkAuthorFindManyArgs>(
    args?: Prisma.SelectSubset<T, WorkAuthorFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a WorkAuthor.
   * @param {WorkAuthorCreateArgs} args - Arguments to create a WorkAuthor.
   * @example
   * // Create one WorkAuthor
   * const WorkAuthor = await prisma.workAuthor.create({
   *   data: {
   *     // ... data to create a WorkAuthor
   *   }
   * })
   *
   */
  create<T extends WorkAuthorCreateArgs>(
    args: Prisma.SelectSubset<T, WorkAuthorCreateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkAuthorClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many WorkAuthors.
   * @param {WorkAuthorCreateManyArgs} args - Arguments to create many WorkAuthors.
   * @example
   * // Create many WorkAuthors
   * const workAuthor = await prisma.workAuthor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends WorkAuthorCreateManyArgs>(
    args?: Prisma.SelectSubset<T, WorkAuthorCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many WorkAuthors and returns the data saved in the database.
   * @param {WorkAuthorCreateManyAndReturnArgs} args - Arguments to create many WorkAuthors.
   * @example
   * // Create many WorkAuthors
   * const workAuthor = await prisma.workAuthor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many WorkAuthors and only return the `id`
   * const workAuthorWithIdOnly = await prisma.workAuthor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends WorkAuthorCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, WorkAuthorCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a WorkAuthor.
   * @param {WorkAuthorDeleteArgs} args - Arguments to delete one WorkAuthor.
   * @example
   * // Delete one WorkAuthor
   * const WorkAuthor = await prisma.workAuthor.delete({
   *   where: {
   *     // ... filter to delete one WorkAuthor
   *   }
   * })
   *
   */
  delete<T extends WorkAuthorDeleteArgs>(
    args: Prisma.SelectSubset<T, WorkAuthorDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__WorkAuthorClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one WorkAuthor.
   * @param {WorkAuthorUpdateArgs} args - Arguments to update one WorkAuthor.
   * @example
   * // Update one WorkAuthor
   * const workAuthor = await prisma.workAuthor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends WorkAuthorUpdateArgs>(
    args: Prisma.SelectSubset<T, WorkAuthorUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkAuthorClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more WorkAuthors.
   * @param {WorkAuthorDeleteManyArgs} args - Arguments to filter WorkAuthors to delete.
   * @example
   * // Delete a few WorkAuthors
   * const { count } = await prisma.workAuthor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends WorkAuthorDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, WorkAuthorDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkAuthors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkAuthorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkAuthors
   * const workAuthor = await prisma.workAuthor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends WorkAuthorUpdateManyArgs>(
    args: Prisma.SelectSubset<T, WorkAuthorUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkAuthors and returns the data updated in the database.
   * @param {WorkAuthorUpdateManyAndReturnArgs} args - Arguments to update many WorkAuthors.
   * @example
   * // Update many WorkAuthors
   * const workAuthor = await prisma.workAuthor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more WorkAuthors and only return the `id`
   * const workAuthorWithIdOnly = await prisma.workAuthor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends WorkAuthorUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, WorkAuthorUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one WorkAuthor.
   * @param {WorkAuthorUpsertArgs} args - Arguments to update or create a WorkAuthor.
   * @example
   * // Update or create a WorkAuthor
   * const workAuthor = await prisma.workAuthor.upsert({
   *   create: {
   *     // ... data to create a WorkAuthor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkAuthor we want to update
   *   }
   * })
   */
  upsert<T extends WorkAuthorUpsertArgs>(
    args: Prisma.SelectSubset<T, WorkAuthorUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__WorkAuthorClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkAuthorPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of WorkAuthors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkAuthorCountArgs} args - Arguments to filter WorkAuthors to count.
   * @example
   * // Count the number of WorkAuthors
   * const count = await prisma.workAuthor.count({
   *   where: {
   *     // ... the filter for the WorkAuthors we want to count
   *   }
   * })
   **/
  count<T extends WorkAuthorCountArgs>(
    args?: Prisma.Subset<T, WorkAuthorCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkAuthorCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a WorkAuthor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkAuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends WorkAuthorAggregateArgs>(
    args: Prisma.Subset<T, WorkAuthorAggregateArgs>
  ): Prisma.PrismaPromise<GetWorkAuthorAggregateType<T>>;

  /**
   * Group by WorkAuthor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkAuthorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends WorkAuthorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkAuthorGroupByArgs['orderBy'] }
      : { orderBy?: WorkAuthorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, WorkAuthorGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetWorkAuthorGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the WorkAuthor model
   */
  readonly fields: WorkAuthorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkAuthor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkAuthorClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  comicAuthors<T extends Prisma.WorkAuthor$comicAuthorsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.WorkAuthor$comicAuthorsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkComicAuthorPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the WorkAuthor model
 */
export interface WorkAuthorFieldRefs {
  readonly id: Prisma.FieldRef<'WorkAuthor', 'Int'>;
  readonly name: Prisma.FieldRef<'WorkAuthor', 'String'>;
  readonly avatar: Prisma.FieldRef<'WorkAuthor', 'String'>;
  readonly description: Prisma.FieldRef<'WorkAuthor', 'String'>;
  readonly isEnabled: Prisma.FieldRef<'WorkAuthor', 'Boolean'>;
  readonly roles: Prisma.FieldRef<'WorkAuthor', 'Int'>;
  readonly nationality: Prisma.FieldRef<'WorkAuthor', 'String'>;
  readonly gender: Prisma.FieldRef<'WorkAuthor', 'Int'>;
  readonly worksCount: Prisma.FieldRef<'WorkAuthor', 'Int'>;
  readonly followersCount: Prisma.FieldRef<'WorkAuthor', 'Int'>;
  readonly featured: Prisma.FieldRef<'WorkAuthor', 'Boolean'>;
  readonly socialLinks: Prisma.FieldRef<'WorkAuthor', 'String'>;
  readonly remark: Prisma.FieldRef<'WorkAuthor', 'String'>;
  readonly createdAt: Prisma.FieldRef<'WorkAuthor', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'WorkAuthor', 'DateTime'>;
  readonly deletedAt: Prisma.FieldRef<'WorkAuthor', 'DateTime'>;
}

// Custom InputTypes
/**
 * WorkAuthor findUnique
 */
export type WorkAuthorFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * Filter, which WorkAuthor to fetch.
   */
  where: Prisma.WorkAuthorWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor findUniqueOrThrow
 */
export type WorkAuthorFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * Filter, which WorkAuthor to fetch.
   */
  where: Prisma.WorkAuthorWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor findFirst
 */
export type WorkAuthorFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * Filter, which WorkAuthor to fetch.
   */
  where?: Prisma.WorkAuthorWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkAuthors to fetch.
   */
  orderBy?:
    | Prisma.WorkAuthorOrderByWithRelationInput
    | Prisma.WorkAuthorOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkAuthors.
   */
  cursor?: Prisma.WorkAuthorWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `¬±n` WorkAuthors from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkAuthors.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkAuthors.
   */
  distinct?:
    | Prisma.WorkAuthorScalarFieldEnum
    | Prisma.WorkAuthorScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor findFirstOrThrow
 */
export type WorkAuthorFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * Filter, which WorkAuthor to fetch.
   */
  where?: Prisma.WorkAuthorWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkAuthors to fetch.
   */
  orderBy?:
    | Prisma.WorkAuthorOrderByWithRelationInput
    | Prisma.WorkAuthorOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkAuthors.
   */
  cursor?: Prisma.WorkAuthorWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `¬±n` WorkAuthors from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkAuthors.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkAuthors.
   */
  distinct?:
    | Prisma.WorkAuthorScalarFieldEnum
    | Prisma.WorkAuthorScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor findMany
 */
export type WorkAuthorFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * Filter, which WorkAuthors to fetch.
   */
  where?: Prisma.WorkAuthorWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkAuthors to fetch.
   */
  orderBy?:
    | Prisma.WorkAuthorOrderByWithRelationInput
    | Prisma.WorkAuthorOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing WorkAuthors.
   */
  cursor?: Prisma.WorkAuthorWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `¬±n` WorkAuthors from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkAuthors.
   */
  skip?: number;
  distinct?:
    | Prisma.WorkAuthorScalarFieldEnum
    | Prisma.WorkAuthorScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor create
 */
export type WorkAuthorCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * The data needed to create a WorkAuthor.
   */
  data: Prisma.XOR<
    Prisma.WorkAuthorCreateInput,
    Prisma.WorkAuthorUncheckedCreateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor createMany
 */
export type WorkAuthorCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many WorkAuthors.
   */
  data: Prisma.WorkAuthorCreateManyInput | Prisma.WorkAuthorCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * WorkAuthor createManyAndReturn
 */
export type WorkAuthorCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * The data used to create many WorkAuthors.
   */
  data: Prisma.WorkAuthorCreateManyInput | Prisma.WorkAuthorCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * WorkAuthor update
 */
export type WorkAuthorUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * The data needed to update a WorkAuthor.
   */
  data: Prisma.XOR<
    Prisma.WorkAuthorUpdateInput,
    Prisma.WorkAuthorUncheckedUpdateInput
  >;
  /**
   * Choose, which WorkAuthor to update.
   */
  where: Prisma.WorkAuthorWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor updateMany
 */
export type WorkAuthorUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update WorkAuthors.
   */
  data: Prisma.XOR<
    Prisma.WorkAuthorUpdateManyMutationInput,
    Prisma.WorkAuthorUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkAuthors to update
   */
  where?: Prisma.WorkAuthorWhereInput;
  /**
   * Limit how many WorkAuthors to update.
   */
  limit?: number;
};

/**
 * WorkAuthor updateManyAndReturn
 */
export type WorkAuthorUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * The data used to update WorkAuthors.
   */
  data: Prisma.XOR<
    Prisma.WorkAuthorUpdateManyMutationInput,
    Prisma.WorkAuthorUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkAuthors to update
   */
  where?: Prisma.WorkAuthorWhereInput;
  /**
   * Limit how many WorkAuthors to update.
   */
  limit?: number;
};

/**
 * WorkAuthor upsert
 */
export type WorkAuthorUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * The filter to search for the WorkAuthor to update in case it exists.
   */
  where: Prisma.WorkAuthorWhereUniqueInput;
  /**
   * In case the WorkAuthor found by the `where` argument doesn't exist, create a new WorkAuthor with this data.
   */
  create: Prisma.XOR<
    Prisma.WorkAuthorCreateInput,
    Prisma.WorkAuthorUncheckedCreateInput
  >;
  /**
   * In case the WorkAuthor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.WorkAuthorUpdateInput,
    Prisma.WorkAuthorUncheckedUpdateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor delete
 */
export type WorkAuthorDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
  /**
   * Filter which WorkAuthor to delete.
   */
  where: Prisma.WorkAuthorWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkAuthor deleteMany
 */
export type WorkAuthorDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which WorkAuthors to delete
   */
  where?: Prisma.WorkAuthorWhereInput;
  /**
   * Limit how many WorkAuthors to delete.
   */
  limit?: number;
};

/**
 * WorkAuthor.comicAuthors
 */
export type WorkAuthor$comicAuthorsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicAuthor
   */
  select?: Prisma.WorkComicAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicAuthor
   */
  omit?: Prisma.WorkComicAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicAuthorInclude<ExtArgs> | null;
  where?: Prisma.WorkComicAuthorWhereInput;
  orderBy?:
    | Prisma.WorkComicAuthorOrderByWithRelationInput
    | Prisma.WorkComicAuthorOrderByWithRelationInput[];
  cursor?: Prisma.WorkComicAuthorWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.WorkComicAuthorScalarFieldEnum
    | Prisma.WorkComicAuthorScalarFieldEnum[];
};

/**
 * WorkAuthor without action
 */
export type WorkAuthorDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkAuthor
   */
  select?: Prisma.WorkAuthorSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkAuthor
   */
  omit?: Prisma.WorkAuthorOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkAuthorInclude<ExtArgs> | null;
};
