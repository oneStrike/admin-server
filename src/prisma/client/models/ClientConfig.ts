/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `ClientConfig` model and its related types.
 *
 * üü¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model ClientConfig
 * ÂÆ¢Êà∑Á´ØÁ≥ªÁªüÈÖçÁΩÆ
 */
export type ClientConfigModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ClientConfigPayload>;

export type AggregateClientConfig = {
  _count: ClientConfigCountAggregateOutputType | null;
  _avg: ClientConfigAvgAggregateOutputType | null;
  _sum: ClientConfigSumAggregateOutputType | null;
  _min: ClientConfigMinAggregateOutputType | null;
  _max: ClientConfigMaxAggregateOutputType | null;
};

export type ClientConfigAvgAggregateOutputType = {
  id: number | null;
  novelStatus: number | null;
  comicStatus: number | null;
  photoStatus: number | null;
  videoStatus: number | null;
  clientStatus: number | null;
  createdBy: number | null;
  updatedBy: number | null;
};

export type ClientConfigSumAggregateOutputType = {
  id: number | null;
  novelStatus: number | null;
  comicStatus: number | null;
  photoStatus: number | null;
  videoStatus: number | null;
  clientStatus: number | null;
  createdBy: number | null;
  updatedBy: number | null;
};

export type ClientConfigMinAggregateOutputType = {
  id: number | null;
  appLogo: string | null;
  appName: string | null;
  appDesc: string | null;
  appVersion: string | null;
  novelStatus: number | null;
  comicStatus: number | null;
  photoStatus: number | null;
  videoStatus: number | null;
  themeColor: string | null;
  darkMode: boolean | null;
  language: string | null;
  allowRegister: boolean | null;
  guestMode: boolean | null;
  maintenanceMsg: string | null;
  clientStatus: number | null;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdBy: number | null;
  updatedBy: number | null;
};

export type ClientConfigMaxAggregateOutputType = {
  id: number | null;
  appLogo: string | null;
  appName: string | null;
  appDesc: string | null;
  appVersion: string | null;
  novelStatus: number | null;
  comicStatus: number | null;
  photoStatus: number | null;
  videoStatus: number | null;
  themeColor: string | null;
  darkMode: boolean | null;
  language: string | null;
  allowRegister: boolean | null;
  guestMode: boolean | null;
  maintenanceMsg: string | null;
  clientStatus: number | null;
  isActive: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  createdBy: number | null;
  updatedBy: number | null;
};

export type ClientConfigCountAggregateOutputType = {
  id: number;
  appLogo: number;
  appName: number;
  appDesc: number;
  appVersion: number;
  novelStatus: number;
  comicStatus: number;
  photoStatus: number;
  videoStatus: number;
  themeColor: number;
  darkMode: number;
  language: number;
  allowRegister: number;
  guestMode: number;
  maintenanceMsg: number;
  clientStatus: number;
  isActive: number;
  createdAt: number;
  updatedAt: number;
  createdBy: number;
  updatedBy: number;
  _all: number;
};

export type ClientConfigAvgAggregateInputType = {
  id?: true;
  novelStatus?: true;
  comicStatus?: true;
  photoStatus?: true;
  videoStatus?: true;
  clientStatus?: true;
  createdBy?: true;
  updatedBy?: true;
};

export type ClientConfigSumAggregateInputType = {
  id?: true;
  novelStatus?: true;
  comicStatus?: true;
  photoStatus?: true;
  videoStatus?: true;
  clientStatus?: true;
  createdBy?: true;
  updatedBy?: true;
};

export type ClientConfigMinAggregateInputType = {
  id?: true;
  appLogo?: true;
  appName?: true;
  appDesc?: true;
  appVersion?: true;
  novelStatus?: true;
  comicStatus?: true;
  photoStatus?: true;
  videoStatus?: true;
  themeColor?: true;
  darkMode?: true;
  language?: true;
  allowRegister?: true;
  guestMode?: true;
  maintenanceMsg?: true;
  clientStatus?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
};

export type ClientConfigMaxAggregateInputType = {
  id?: true;
  appLogo?: true;
  appName?: true;
  appDesc?: true;
  appVersion?: true;
  novelStatus?: true;
  comicStatus?: true;
  photoStatus?: true;
  videoStatus?: true;
  themeColor?: true;
  darkMode?: true;
  language?: true;
  allowRegister?: true;
  guestMode?: true;
  maintenanceMsg?: true;
  clientStatus?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
};

export type ClientConfigCountAggregateInputType = {
  id?: true;
  appLogo?: true;
  appName?: true;
  appDesc?: true;
  appVersion?: true;
  novelStatus?: true;
  comicStatus?: true;
  photoStatus?: true;
  videoStatus?: true;
  themeColor?: true;
  darkMode?: true;
  language?: true;
  allowRegister?: true;
  guestMode?: true;
  maintenanceMsg?: true;
  clientStatus?: true;
  isActive?: true;
  createdAt?: true;
  updatedAt?: true;
  createdBy?: true;
  updatedBy?: true;
  _all?: true;
};

export type ClientConfigAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ClientConfig to aggregate.
   */
  where?: Prisma.ClientConfigWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClientConfigs to fetch.
   */
  orderBy?:
    | Prisma.ClientConfigOrderByWithRelationInput
    | Prisma.ClientConfigOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ClientConfigWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `¬±n` ClientConfigs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClientConfigs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ClientConfigs
   **/
  _count?: true | ClientConfigCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ClientConfigAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ClientConfigSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ClientConfigMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ClientConfigMaxAggregateInputType;
};

export type GetClientConfigAggregateType<T extends ClientConfigAggregateArgs> =
  {
    [P in keyof T & keyof AggregateClientConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateClientConfig[P]>
      : Prisma.GetScalarType<T[P], AggregateClientConfig[P]>;
  };

export type ClientConfigGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ClientConfigWhereInput;
  orderBy?:
    | Prisma.ClientConfigOrderByWithAggregationInput
    | Prisma.ClientConfigOrderByWithAggregationInput[];
  by: Prisma.ClientConfigScalarFieldEnum[] | Prisma.ClientConfigScalarFieldEnum;
  having?: Prisma.ClientConfigScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ClientConfigCountAggregateInputType | true;
  _avg?: ClientConfigAvgAggregateInputType;
  _sum?: ClientConfigSumAggregateInputType;
  _min?: ClientConfigMinAggregateInputType;
  _max?: ClientConfigMaxAggregateInputType;
};

export type ClientConfigGroupByOutputType = {
  id: number;
  appLogo: string;
  appName: string;
  appDesc: string | null;
  appVersion: string;
  novelStatus: number;
  comicStatus: number;
  photoStatus: number;
  videoStatus: number;
  themeColor: string;
  darkMode: boolean;
  language: string;
  allowRegister: boolean;
  guestMode: boolean;
  maintenanceMsg: string | null;
  clientStatus: number;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  createdBy: number | null;
  updatedBy: number | null;
  _count: ClientConfigCountAggregateOutputType | null;
  _avg: ClientConfigAvgAggregateOutputType | null;
  _sum: ClientConfigSumAggregateOutputType | null;
  _min: ClientConfigMinAggregateOutputType | null;
  _max: ClientConfigMaxAggregateOutputType | null;
};

type GetClientConfigGroupByPayload<T extends ClientConfigGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ClientConfigGroupByOutputType, T['by']> & {
        [P in keyof T & keyof ClientConfigGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClientConfigGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClientConfigGroupByOutputType[P]>;
      }
    >
  >;

export type ClientConfigWhereInput = {
  AND?: Prisma.ClientConfigWhereInput | Prisma.ClientConfigWhereInput[];
  OR?: Prisma.ClientConfigWhereInput[];
  NOT?: Prisma.ClientConfigWhereInput | Prisma.ClientConfigWhereInput[];
  id?: Prisma.IntFilter<'ClientConfig'> | number;
  appLogo?: Prisma.StringFilter<'ClientConfig'> | string;
  appName?: Prisma.StringFilter<'ClientConfig'> | string;
  appDesc?: Prisma.StringNullableFilter<'ClientConfig'> | string | null;
  appVersion?: Prisma.StringFilter<'ClientConfig'> | string;
  novelStatus?: Prisma.IntFilter<'ClientConfig'> | number;
  comicStatus?: Prisma.IntFilter<'ClientConfig'> | number;
  photoStatus?: Prisma.IntFilter<'ClientConfig'> | number;
  videoStatus?: Prisma.IntFilter<'ClientConfig'> | number;
  themeColor?: Prisma.StringFilter<'ClientConfig'> | string;
  darkMode?: Prisma.BoolFilter<'ClientConfig'> | boolean;
  language?: Prisma.StringFilter<'ClientConfig'> | string;
  allowRegister?: Prisma.BoolFilter<'ClientConfig'> | boolean;
  guestMode?: Prisma.BoolFilter<'ClientConfig'> | boolean;
  maintenanceMsg?: Prisma.StringNullableFilter<'ClientConfig'> | string | null;
  clientStatus?: Prisma.IntFilter<'ClientConfig'> | number;
  isActive?: Prisma.BoolFilter<'ClientConfig'> | boolean;
  createdAt?: Prisma.DateTimeFilter<'ClientConfig'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'ClientConfig'> | Date | string;
  createdBy?: Prisma.IntNullableFilter<'ClientConfig'> | number | null;
  updatedBy?: Prisma.IntNullableFilter<'ClientConfig'> | number | null;
};

export type ClientConfigOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  appLogo?: Prisma.SortOrder;
  appName?: Prisma.SortOrder;
  appDesc?: Prisma.SortOrderInput | Prisma.SortOrder;
  appVersion?: Prisma.SortOrder;
  novelStatus?: Prisma.SortOrder;
  comicStatus?: Prisma.SortOrder;
  photoStatus?: Prisma.SortOrder;
  videoStatus?: Prisma.SortOrder;
  themeColor?: Prisma.SortOrder;
  darkMode?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  allowRegister?: Prisma.SortOrder;
  guestMode?: Prisma.SortOrder;
  maintenanceMsg?: Prisma.SortOrderInput | Prisma.SortOrder;
  clientStatus?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
};

export type ClientConfigWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ClientConfigWhereInput | Prisma.ClientConfigWhereInput[];
    OR?: Prisma.ClientConfigWhereInput[];
    NOT?: Prisma.ClientConfigWhereInput | Prisma.ClientConfigWhereInput[];
    appLogo?: Prisma.StringFilter<'ClientConfig'> | string;
    appName?: Prisma.StringFilter<'ClientConfig'> | string;
    appDesc?: Prisma.StringNullableFilter<'ClientConfig'> | string | null;
    appVersion?: Prisma.StringFilter<'ClientConfig'> | string;
    novelStatus?: Prisma.IntFilter<'ClientConfig'> | number;
    comicStatus?: Prisma.IntFilter<'ClientConfig'> | number;
    photoStatus?: Prisma.IntFilter<'ClientConfig'> | number;
    videoStatus?: Prisma.IntFilter<'ClientConfig'> | number;
    themeColor?: Prisma.StringFilter<'ClientConfig'> | string;
    darkMode?: Prisma.BoolFilter<'ClientConfig'> | boolean;
    language?: Prisma.StringFilter<'ClientConfig'> | string;
    allowRegister?: Prisma.BoolFilter<'ClientConfig'> | boolean;
    guestMode?: Prisma.BoolFilter<'ClientConfig'> | boolean;
    maintenanceMsg?:
      | Prisma.StringNullableFilter<'ClientConfig'>
      | string
      | null;
    clientStatus?: Prisma.IntFilter<'ClientConfig'> | number;
    isActive?: Prisma.BoolFilter<'ClientConfig'> | boolean;
    createdAt?: Prisma.DateTimeFilter<'ClientConfig'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'ClientConfig'> | Date | string;
    createdBy?: Prisma.IntNullableFilter<'ClientConfig'> | number | null;
    updatedBy?: Prisma.IntNullableFilter<'ClientConfig'> | number | null;
  },
  'id'
>;

export type ClientConfigOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  appLogo?: Prisma.SortOrder;
  appName?: Prisma.SortOrder;
  appDesc?: Prisma.SortOrderInput | Prisma.SortOrder;
  appVersion?: Prisma.SortOrder;
  novelStatus?: Prisma.SortOrder;
  comicStatus?: Prisma.SortOrder;
  photoStatus?: Prisma.SortOrder;
  videoStatus?: Prisma.SortOrder;
  themeColor?: Prisma.SortOrder;
  darkMode?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  allowRegister?: Prisma.SortOrder;
  guestMode?: Prisma.SortOrder;
  maintenanceMsg?: Prisma.SortOrderInput | Prisma.SortOrder;
  clientStatus?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  updatedBy?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.ClientConfigCountOrderByAggregateInput;
  _avg?: Prisma.ClientConfigAvgOrderByAggregateInput;
  _max?: Prisma.ClientConfigMaxOrderByAggregateInput;
  _min?: Prisma.ClientConfigMinOrderByAggregateInput;
  _sum?: Prisma.ClientConfigSumOrderByAggregateInput;
};

export type ClientConfigScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ClientConfigScalarWhereWithAggregatesInput
    | Prisma.ClientConfigScalarWhereWithAggregatesInput[];
  OR?: Prisma.ClientConfigScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ClientConfigScalarWhereWithAggregatesInput
    | Prisma.ClientConfigScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'ClientConfig'> | number;
  appLogo?: Prisma.StringWithAggregatesFilter<'ClientConfig'> | string;
  appName?: Prisma.StringWithAggregatesFilter<'ClientConfig'> | string;
  appDesc?:
    | Prisma.StringNullableWithAggregatesFilter<'ClientConfig'>
    | string
    | null;
  appVersion?: Prisma.StringWithAggregatesFilter<'ClientConfig'> | string;
  novelStatus?: Prisma.IntWithAggregatesFilter<'ClientConfig'> | number;
  comicStatus?: Prisma.IntWithAggregatesFilter<'ClientConfig'> | number;
  photoStatus?: Prisma.IntWithAggregatesFilter<'ClientConfig'> | number;
  videoStatus?: Prisma.IntWithAggregatesFilter<'ClientConfig'> | number;
  themeColor?: Prisma.StringWithAggregatesFilter<'ClientConfig'> | string;
  darkMode?: Prisma.BoolWithAggregatesFilter<'ClientConfig'> | boolean;
  language?: Prisma.StringWithAggregatesFilter<'ClientConfig'> | string;
  allowRegister?: Prisma.BoolWithAggregatesFilter<'ClientConfig'> | boolean;
  guestMode?: Prisma.BoolWithAggregatesFilter<'ClientConfig'> | boolean;
  maintenanceMsg?:
    | Prisma.StringNullableWithAggregatesFilter<'ClientConfig'>
    | string
    | null;
  clientStatus?: Prisma.IntWithAggregatesFilter<'ClientConfig'> | number;
  isActive?: Prisma.BoolWithAggregatesFilter<'ClientConfig'> | boolean;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'ClientConfig'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'ClientConfig'>
    | Date
    | string;
  createdBy?:
    | Prisma.IntNullableWithAggregatesFilter<'ClientConfig'>
    | number
    | null;
  updatedBy?:
    | Prisma.IntNullableWithAggregatesFilter<'ClientConfig'>
    | number
    | null;
};

export type ClientConfigCreateInput = {
  appLogo: string;
  appName: string;
  appDesc?: string | null;
  appVersion?: string;
  novelStatus?: number;
  comicStatus?: number;
  photoStatus?: number;
  videoStatus?: number;
  themeColor?: string;
  darkMode?: boolean;
  language?: string;
  allowRegister?: boolean;
  guestMode?: boolean;
  maintenanceMsg?: string | null;
  clientStatus?: number;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: number | null;
  updatedBy?: number | null;
};

export type ClientConfigUncheckedCreateInput = {
  id?: number;
  appLogo: string;
  appName: string;
  appDesc?: string | null;
  appVersion?: string;
  novelStatus?: number;
  comicStatus?: number;
  photoStatus?: number;
  videoStatus?: number;
  themeColor?: string;
  darkMode?: boolean;
  language?: string;
  allowRegister?: boolean;
  guestMode?: boolean;
  maintenanceMsg?: string | null;
  clientStatus?: number;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: number | null;
  updatedBy?: number | null;
};

export type ClientConfigUpdateInput = {
  appLogo?: Prisma.StringFieldUpdateOperationsInput | string;
  appName?: Prisma.StringFieldUpdateOperationsInput | string;
  appDesc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  appVersion?: Prisma.StringFieldUpdateOperationsInput | string;
  novelStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  comicStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  photoStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  videoStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  themeColor?: Prisma.StringFieldUpdateOperationsInput | string;
  darkMode?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  language?: Prisma.StringFieldUpdateOperationsInput | string;
  allowRegister?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  guestMode?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  maintenanceMsg?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  clientStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  updatedBy?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type ClientConfigUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  appLogo?: Prisma.StringFieldUpdateOperationsInput | string;
  appName?: Prisma.StringFieldUpdateOperationsInput | string;
  appDesc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  appVersion?: Prisma.StringFieldUpdateOperationsInput | string;
  novelStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  comicStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  photoStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  videoStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  themeColor?: Prisma.StringFieldUpdateOperationsInput | string;
  darkMode?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  language?: Prisma.StringFieldUpdateOperationsInput | string;
  allowRegister?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  guestMode?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  maintenanceMsg?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  clientStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  updatedBy?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type ClientConfigCreateManyInput = {
  id?: number;
  appLogo: string;
  appName: string;
  appDesc?: string | null;
  appVersion?: string;
  novelStatus?: number;
  comicStatus?: number;
  photoStatus?: number;
  videoStatus?: number;
  themeColor?: string;
  darkMode?: boolean;
  language?: string;
  allowRegister?: boolean;
  guestMode?: boolean;
  maintenanceMsg?: string | null;
  clientStatus?: number;
  isActive?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdBy?: number | null;
  updatedBy?: number | null;
};

export type ClientConfigUpdateManyMutationInput = {
  appLogo?: Prisma.StringFieldUpdateOperationsInput | string;
  appName?: Prisma.StringFieldUpdateOperationsInput | string;
  appDesc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  appVersion?: Prisma.StringFieldUpdateOperationsInput | string;
  novelStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  comicStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  photoStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  videoStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  themeColor?: Prisma.StringFieldUpdateOperationsInput | string;
  darkMode?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  language?: Prisma.StringFieldUpdateOperationsInput | string;
  allowRegister?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  guestMode?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  maintenanceMsg?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  clientStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  updatedBy?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type ClientConfigUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  appLogo?: Prisma.StringFieldUpdateOperationsInput | string;
  appName?: Prisma.StringFieldUpdateOperationsInput | string;
  appDesc?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  appVersion?: Prisma.StringFieldUpdateOperationsInput | string;
  novelStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  comicStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  photoStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  videoStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  themeColor?: Prisma.StringFieldUpdateOperationsInput | string;
  darkMode?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  language?: Prisma.StringFieldUpdateOperationsInput | string;
  allowRegister?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  guestMode?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  maintenanceMsg?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  clientStatus?: Prisma.IntFieldUpdateOperationsInput | number;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdBy?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
  updatedBy?: Prisma.NullableIntFieldUpdateOperationsInput | number | null;
};

export type ClientConfigCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  appLogo?: Prisma.SortOrder;
  appName?: Prisma.SortOrder;
  appDesc?: Prisma.SortOrder;
  appVersion?: Prisma.SortOrder;
  novelStatus?: Prisma.SortOrder;
  comicStatus?: Prisma.SortOrder;
  photoStatus?: Prisma.SortOrder;
  videoStatus?: Prisma.SortOrder;
  themeColor?: Prisma.SortOrder;
  darkMode?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  allowRegister?: Prisma.SortOrder;
  guestMode?: Prisma.SortOrder;
  maintenanceMsg?: Prisma.SortOrder;
  clientStatus?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
};

export type ClientConfigAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  novelStatus?: Prisma.SortOrder;
  comicStatus?: Prisma.SortOrder;
  photoStatus?: Prisma.SortOrder;
  videoStatus?: Prisma.SortOrder;
  clientStatus?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
};

export type ClientConfigMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  appLogo?: Prisma.SortOrder;
  appName?: Prisma.SortOrder;
  appDesc?: Prisma.SortOrder;
  appVersion?: Prisma.SortOrder;
  novelStatus?: Prisma.SortOrder;
  comicStatus?: Prisma.SortOrder;
  photoStatus?: Prisma.SortOrder;
  videoStatus?: Prisma.SortOrder;
  themeColor?: Prisma.SortOrder;
  darkMode?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  allowRegister?: Prisma.SortOrder;
  guestMode?: Prisma.SortOrder;
  maintenanceMsg?: Prisma.SortOrder;
  clientStatus?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
};

export type ClientConfigMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  appLogo?: Prisma.SortOrder;
  appName?: Prisma.SortOrder;
  appDesc?: Prisma.SortOrder;
  appVersion?: Prisma.SortOrder;
  novelStatus?: Prisma.SortOrder;
  comicStatus?: Prisma.SortOrder;
  photoStatus?: Prisma.SortOrder;
  videoStatus?: Prisma.SortOrder;
  themeColor?: Prisma.SortOrder;
  darkMode?: Prisma.SortOrder;
  language?: Prisma.SortOrder;
  allowRegister?: Prisma.SortOrder;
  guestMode?: Prisma.SortOrder;
  maintenanceMsg?: Prisma.SortOrder;
  clientStatus?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
};

export type ClientConfigSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  novelStatus?: Prisma.SortOrder;
  comicStatus?: Prisma.SortOrder;
  photoStatus?: Prisma.SortOrder;
  videoStatus?: Prisma.SortOrder;
  clientStatus?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
};

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type ClientConfigSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    appLogo?: boolean;
    appName?: boolean;
    appDesc?: boolean;
    appVersion?: boolean;
    novelStatus?: boolean;
    comicStatus?: boolean;
    photoStatus?: boolean;
    videoStatus?: boolean;
    themeColor?: boolean;
    darkMode?: boolean;
    language?: boolean;
    allowRegister?: boolean;
    guestMode?: boolean;
    maintenanceMsg?: boolean;
    clientStatus?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
  },
  ExtArgs['result']['clientConfig']
>;

export type ClientConfigSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    appLogo?: boolean;
    appName?: boolean;
    appDesc?: boolean;
    appVersion?: boolean;
    novelStatus?: boolean;
    comicStatus?: boolean;
    photoStatus?: boolean;
    videoStatus?: boolean;
    themeColor?: boolean;
    darkMode?: boolean;
    language?: boolean;
    allowRegister?: boolean;
    guestMode?: boolean;
    maintenanceMsg?: boolean;
    clientStatus?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
  },
  ExtArgs['result']['clientConfig']
>;

export type ClientConfigSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    appLogo?: boolean;
    appName?: boolean;
    appDesc?: boolean;
    appVersion?: boolean;
    novelStatus?: boolean;
    comicStatus?: boolean;
    photoStatus?: boolean;
    videoStatus?: boolean;
    themeColor?: boolean;
    darkMode?: boolean;
    language?: boolean;
    allowRegister?: boolean;
    guestMode?: boolean;
    maintenanceMsg?: boolean;
    clientStatus?: boolean;
    isActive?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
  },
  ExtArgs['result']['clientConfig']
>;

export type ClientConfigSelectScalar = {
  id?: boolean;
  appLogo?: boolean;
  appName?: boolean;
  appDesc?: boolean;
  appVersion?: boolean;
  novelStatus?: boolean;
  comicStatus?: boolean;
  photoStatus?: boolean;
  videoStatus?: boolean;
  themeColor?: boolean;
  darkMode?: boolean;
  language?: boolean;
  allowRegister?: boolean;
  guestMode?: boolean;
  maintenanceMsg?: boolean;
  clientStatus?: boolean;
  isActive?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
};

export type ClientConfigOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'appLogo'
  | 'appName'
  | 'appDesc'
  | 'appVersion'
  | 'novelStatus'
  | 'comicStatus'
  | 'photoStatus'
  | 'videoStatus'
  | 'themeColor'
  | 'darkMode'
  | 'language'
  | 'allowRegister'
  | 'guestMode'
  | 'maintenanceMsg'
  | 'clientStatus'
  | 'isActive'
  | 'createdAt'
  | 'updatedAt'
  | 'createdBy'
  | 'updatedBy',
  ExtArgs['result']['clientConfig']
>;

export type $ClientConfigPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'ClientConfig';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * ‰∏ªÈîÆid
       */
      id: number;
      /**
       * ÂÆ¢Êà∑Á´Ølogo URL
       */
      appLogo: string;
      /**
       * ÂÆ¢Êà∑Á´ØÂêçÁß∞
       */
      appName: string;
      /**
       * ÂÆ¢Êà∑Á´ØÊèèËø∞
       */
      appDesc: string | null;
      /**
       * ÂÆ¢Êà∑Á´ØÁâàÊú¨Âè∑
       */
      appVersion: string;
      /**
       * Â∞èËØ¥ÊùøÂùóÁä∂ÊÄÅ 0Á¶ÅÁî® 1ÂêØÁî® 2ÂºÄÂèë‰∏≠ 3Áª¥Êä§‰∏≠
       */
      novelStatus: number;
      /**
       * Êº´ÁîªÊùøÂùóÁä∂ÊÄÅ 0Á¶ÅÁî® 1ÂêØÁî® 2ÂºÄÂèë‰∏≠ 3Áª¥Êä§‰∏≠
       */
      comicStatus: number;
      /**
       * ÂÜôÁúüÊùøÂùóÁä∂ÊÄÅ 0Á¶ÅÁî® 1ÂêØÁî® 2ÂºÄÂèë‰∏≠ 3Áª¥Êä§‰∏≠
       */
      photoStatus: number;
      /**
       * ËßÜÈ¢ëÊùøÂùóÁä∂ÊÄÅ 0Á¶ÅÁî® 1ÂêØÁî® 2ÂºÄÂèë‰∏≠ 3Áª¥Êä§‰∏≠
       */
      videoStatus: number;
      /**
       * ‰∏ªÈ¢òËâ≤ÈÖçÁΩÆ
       */
      themeColor: string;
      /**
       * ÊòØÂê¶ÂêØÁî®ÊöóÈªëÊ®°Âºè
       */
      darkMode: boolean;
      /**
       * ÂÆ¢Êà∑Á´ØËØ≠Ë®Ä zh-CN en-US ja-JP
       */
      language: string;
      /**
       * ÊòØÂê¶ÂêØÁî®Áî®Êà∑Ê≥®ÂÜå
       */
      allowRegister: boolean;
      /**
       * ÊòØÂê¶ÂêØÁî®Ê∏∏ÂÆ¢Ê®°Âºè
       */
      guestMode: boolean;
      /**
       * Áª¥Êä§ÂÖ¨ÂëäÂÜÖÂÆπ
       */
      maintenanceMsg: string | null;
      /**
       * ÂÆ¢Êà∑Á´ØÁä∂ÊÄÅ 0Ê≠£Â∏∏ 1Áª¥Êä§‰∏≠ 2ÂÅúÁî®
       */
      clientStatus: number;
      /**
       * ÈÖçÁΩÆÊòØÂê¶ÁîüÊïà
       */
      isActive: boolean;
      /**
       * ÂàõÂª∫Êó∂Èó¥
       */
      createdAt: Date;
      /**
       * Êõ¥Êñ∞Êó∂Èó¥
       */
      updatedAt: Date;
      /**
       * ÂàõÂª∫ËÄÖID
       */
      createdBy: number | null;
      /**
       * Êõ¥Êñ∞ËÄÖID
       */
      updatedBy: number | null;
    },
    ExtArgs['result']['clientConfig']
  >;
  composites: {};
};

export type ClientConfigGetPayload<
  S extends boolean | null | undefined | ClientConfigDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ClientConfigPayload, S>;

export type ClientConfigCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ClientConfigFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'
> & {
  select?: ClientConfigCountAggregateInputType | true;
};

export interface ClientConfigDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['ClientConfig'];
    meta: { name: 'ClientConfig' };
  };
  /**
   * Find zero or one ClientConfig that matches the filter.
   * @param {ClientConfigFindUniqueArgs} args - Arguments to find a ClientConfig
   * @example
   * // Get one ClientConfig
   * const clientConfig = await prisma.clientConfig.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClientConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ClientConfigFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ClientConfigClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ClientConfig that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClientConfigFindUniqueOrThrowArgs} args - Arguments to find a ClientConfig
   * @example
   * // Get one ClientConfig
   * const clientConfig = await prisma.clientConfig.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClientConfigFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ClientConfigFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ClientConfigClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ClientConfig that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientConfigFindFirstArgs} args - Arguments to find a ClientConfig
   * @example
   * // Get one ClientConfig
   * const clientConfig = await prisma.clientConfig.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClientConfigFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ClientConfigFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ClientConfigClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ClientConfig that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientConfigFindFirstOrThrowArgs} args - Arguments to find a ClientConfig
   * @example
   * // Get one ClientConfig
   * const clientConfig = await prisma.clientConfig.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClientConfigFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ClientConfigFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ClientConfigClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ClientConfigs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientConfigFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ClientConfigs
   * const clientConfigs = await prisma.clientConfig.findMany()
   *
   * // Get first 10 ClientConfigs
   * const clientConfigs = await prisma.clientConfig.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const clientConfigWithIdOnly = await prisma.clientConfig.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ClientConfigFindManyArgs>(
    args?: Prisma.SelectSubset<T, ClientConfigFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ClientConfig.
   * @param {ClientConfigCreateArgs} args - Arguments to create a ClientConfig.
   * @example
   * // Create one ClientConfig
   * const ClientConfig = await prisma.clientConfig.create({
   *   data: {
   *     // ... data to create a ClientConfig
   *   }
   * })
   *
   */
  create<T extends ClientConfigCreateArgs>(
    args: Prisma.SelectSubset<T, ClientConfigCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ClientConfigClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ClientConfigs.
   * @param {ClientConfigCreateManyArgs} args - Arguments to create many ClientConfigs.
   * @example
   * // Create many ClientConfigs
   * const clientConfig = await prisma.clientConfig.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ClientConfigCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ClientConfigCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ClientConfigs and returns the data saved in the database.
   * @param {ClientConfigCreateManyAndReturnArgs} args - Arguments to create many ClientConfigs.
   * @example
   * // Create many ClientConfigs
   * const clientConfig = await prisma.clientConfig.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ClientConfigs and only return the `id`
   * const clientConfigWithIdOnly = await prisma.clientConfig.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ClientConfigCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ClientConfigCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ClientConfig.
   * @param {ClientConfigDeleteArgs} args - Arguments to delete one ClientConfig.
   * @example
   * // Delete one ClientConfig
   * const ClientConfig = await prisma.clientConfig.delete({
   *   where: {
   *     // ... filter to delete one ClientConfig
   *   }
   * })
   *
   */
  delete<T extends ClientConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, ClientConfigDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ClientConfigClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ClientConfig.
   * @param {ClientConfigUpdateArgs} args - Arguments to update one ClientConfig.
   * @example
   * // Update one ClientConfig
   * const clientConfig = await prisma.clientConfig.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ClientConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, ClientConfigUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ClientConfigClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ClientConfigs.
   * @param {ClientConfigDeleteManyArgs} args - Arguments to filter ClientConfigs to delete.
   * @example
   * // Delete a few ClientConfigs
   * const { count } = await prisma.clientConfig.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ClientConfigDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ClientConfigDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ClientConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientConfigUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ClientConfigs
   * const clientConfig = await prisma.clientConfig.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ClientConfigUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ClientConfigUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ClientConfigs and returns the data updated in the database.
   * @param {ClientConfigUpdateManyAndReturnArgs} args - Arguments to update many ClientConfigs.
   * @example
   * // Update many ClientConfigs
   * const clientConfig = await prisma.clientConfig.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ClientConfigs and only return the `id`
   * const clientConfigWithIdOnly = await prisma.clientConfig.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ClientConfigUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ClientConfigUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ClientConfig.
   * @param {ClientConfigUpsertArgs} args - Arguments to update or create a ClientConfig.
   * @example
   * // Update or create a ClientConfig
   * const clientConfig = await prisma.clientConfig.upsert({
   *   create: {
   *     // ... data to create a ClientConfig
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ClientConfig we want to update
   *   }
   * })
   */
  upsert<T extends ClientConfigUpsertArgs>(
    args: Prisma.SelectSubset<T, ClientConfigUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ClientConfigClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClientConfigPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ClientConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientConfigCountArgs} args - Arguments to filter ClientConfigs to count.
   * @example
   * // Count the number of ClientConfigs
   * const count = await prisma.clientConfig.count({
   *   where: {
   *     // ... the filter for the ClientConfigs we want to count
   *   }
   * })
   **/
  count<T extends ClientConfigCountArgs>(
    args?: Prisma.Subset<T, ClientConfigCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            ClientConfigCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ClientConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ClientConfigAggregateArgs>(
    args: Prisma.Subset<T, ClientConfigAggregateArgs>
  ): Prisma.PrismaPromise<GetClientConfigAggregateType<T>>;

  /**
   * Group by ClientConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientConfigGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ClientConfigGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClientConfigGroupByArgs['orderBy'] }
      : { orderBy?: ClientConfigGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ClientConfigGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetClientConfigGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ClientConfig model
   */
  readonly fields: ClientConfigFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ClientConfig.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClientConfigClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ClientConfig model
 */
export interface ClientConfigFieldRefs {
  readonly id: Prisma.FieldRef<'ClientConfig', 'Int'>;
  readonly appLogo: Prisma.FieldRef<'ClientConfig', 'String'>;
  readonly appName: Prisma.FieldRef<'ClientConfig', 'String'>;
  readonly appDesc: Prisma.FieldRef<'ClientConfig', 'String'>;
  readonly appVersion: Prisma.FieldRef<'ClientConfig', 'String'>;
  readonly novelStatus: Prisma.FieldRef<'ClientConfig', 'Int'>;
  readonly comicStatus: Prisma.FieldRef<'ClientConfig', 'Int'>;
  readonly photoStatus: Prisma.FieldRef<'ClientConfig', 'Int'>;
  readonly videoStatus: Prisma.FieldRef<'ClientConfig', 'Int'>;
  readonly themeColor: Prisma.FieldRef<'ClientConfig', 'String'>;
  readonly darkMode: Prisma.FieldRef<'ClientConfig', 'Boolean'>;
  readonly language: Prisma.FieldRef<'ClientConfig', 'String'>;
  readonly allowRegister: Prisma.FieldRef<'ClientConfig', 'Boolean'>;
  readonly guestMode: Prisma.FieldRef<'ClientConfig', 'Boolean'>;
  readonly maintenanceMsg: Prisma.FieldRef<'ClientConfig', 'String'>;
  readonly clientStatus: Prisma.FieldRef<'ClientConfig', 'Int'>;
  readonly isActive: Prisma.FieldRef<'ClientConfig', 'Boolean'>;
  readonly createdAt: Prisma.FieldRef<'ClientConfig', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'ClientConfig', 'DateTime'>;
  readonly createdBy: Prisma.FieldRef<'ClientConfig', 'Int'>;
  readonly updatedBy: Prisma.FieldRef<'ClientConfig', 'Int'>;
}

// Custom InputTypes
/**
 * ClientConfig findUnique
 */
export type ClientConfigFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * Filter, which ClientConfig to fetch.
   */
  where: Prisma.ClientConfigWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig findUniqueOrThrow
 */
export type ClientConfigFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * Filter, which ClientConfig to fetch.
   */
  where: Prisma.ClientConfigWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig findFirst
 */
export type ClientConfigFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * Filter, which ClientConfig to fetch.
   */
  where?: Prisma.ClientConfigWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClientConfigs to fetch.
   */
  orderBy?:
    | Prisma.ClientConfigOrderByWithRelationInput
    | Prisma.ClientConfigOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ClientConfigs.
   */
  cursor?: Prisma.ClientConfigWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `¬±n` ClientConfigs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClientConfigs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ClientConfigs.
   */
  distinct?:
    | Prisma.ClientConfigScalarFieldEnum
    | Prisma.ClientConfigScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig findFirstOrThrow
 */
export type ClientConfigFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * Filter, which ClientConfig to fetch.
   */
  where?: Prisma.ClientConfigWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClientConfigs to fetch.
   */
  orderBy?:
    | Prisma.ClientConfigOrderByWithRelationInput
    | Prisma.ClientConfigOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ClientConfigs.
   */
  cursor?: Prisma.ClientConfigWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `¬±n` ClientConfigs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClientConfigs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ClientConfigs.
   */
  distinct?:
    | Prisma.ClientConfigScalarFieldEnum
    | Prisma.ClientConfigScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig findMany
 */
export type ClientConfigFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * Filter, which ClientConfigs to fetch.
   */
  where?: Prisma.ClientConfigWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ClientConfigs to fetch.
   */
  orderBy?:
    | Prisma.ClientConfigOrderByWithRelationInput
    | Prisma.ClientConfigOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ClientConfigs.
   */
  cursor?: Prisma.ClientConfigWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `¬±n` ClientConfigs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ClientConfigs.
   */
  skip?: number;
  distinct?:
    | Prisma.ClientConfigScalarFieldEnum
    | Prisma.ClientConfigScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig create
 */
export type ClientConfigCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * The data needed to create a ClientConfig.
   */
  data: Prisma.XOR<
    Prisma.ClientConfigCreateInput,
    Prisma.ClientConfigUncheckedCreateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig createMany
 */
export type ClientConfigCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ClientConfigs.
   */
  data:
    | Prisma.ClientConfigCreateManyInput
    | Prisma.ClientConfigCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ClientConfig createManyAndReturn
 */
export type ClientConfigCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * The data used to create many ClientConfigs.
   */
  data:
    | Prisma.ClientConfigCreateManyInput
    | Prisma.ClientConfigCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ClientConfig update
 */
export type ClientConfigUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * The data needed to update a ClientConfig.
   */
  data: Prisma.XOR<
    Prisma.ClientConfigUpdateInput,
    Prisma.ClientConfigUncheckedUpdateInput
  >;
  /**
   * Choose, which ClientConfig to update.
   */
  where: Prisma.ClientConfigWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig updateMany
 */
export type ClientConfigUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ClientConfigs.
   */
  data: Prisma.XOR<
    Prisma.ClientConfigUpdateManyMutationInput,
    Prisma.ClientConfigUncheckedUpdateManyInput
  >;
  /**
   * Filter which ClientConfigs to update
   */
  where?: Prisma.ClientConfigWhereInput;
  /**
   * Limit how many ClientConfigs to update.
   */
  limit?: number;
};

/**
 * ClientConfig updateManyAndReturn
 */
export type ClientConfigUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * The data used to update ClientConfigs.
   */
  data: Prisma.XOR<
    Prisma.ClientConfigUpdateManyMutationInput,
    Prisma.ClientConfigUncheckedUpdateManyInput
  >;
  /**
   * Filter which ClientConfigs to update
   */
  where?: Prisma.ClientConfigWhereInput;
  /**
   * Limit how many ClientConfigs to update.
   */
  limit?: number;
};

/**
 * ClientConfig upsert
 */
export type ClientConfigUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * The filter to search for the ClientConfig to update in case it exists.
   */
  where: Prisma.ClientConfigWhereUniqueInput;
  /**
   * In case the ClientConfig found by the `where` argument doesn't exist, create a new ClientConfig with this data.
   */
  create: Prisma.XOR<
    Prisma.ClientConfigCreateInput,
    Prisma.ClientConfigUncheckedCreateInput
  >;
  /**
   * In case the ClientConfig was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ClientConfigUpdateInput,
    Prisma.ClientConfigUncheckedUpdateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig delete
 */
export type ClientConfigDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
  /**
   * Filter which ClientConfig to delete.
   */
  where: Prisma.ClientConfigWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * ClientConfig deleteMany
 */
export type ClientConfigDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ClientConfigs to delete
   */
  where?: Prisma.ClientConfigWhereInput;
  /**
   * Limit how many ClientConfigs to delete.
   */
  limit?: number;
};

/**
 * ClientConfig without action
 */
export type ClientConfigDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ClientConfig
   */
  select?: Prisma.ClientConfigSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ClientConfig
   */
  omit?: Prisma.ClientConfigOmit<ExtArgs> | null;
};
