
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WorkCategory` model and its related types.
 *
 * 🟢 You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WorkCategory
 * 
 */
export type WorkCategoryModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkCategoryPayload>

export type AggregateWorkCategory = {
  _count: WorkCategoryCountAggregateOutputType | null
  _avg: WorkCategoryAvgAggregateOutputType | null
  _sum: WorkCategorySumAggregateOutputType | null
  _min: WorkCategoryMinAggregateOutputType | null
  _max: WorkCategoryMaxAggregateOutputType | null
}

export type WorkCategoryAvgAggregateOutputType = {
  id: number | null
  popularity: number | null
  popularityWeight: number | null
  order: number | null
  novelCount: number | null
  comicCount: number | null
  imageSetCount: number | null
  illustrationCount: number | null
  contentTypes: number | null
}

export type WorkCategorySumAggregateOutputType = {
  id: number | null
  popularity: number | null
  popularityWeight: number | null
  order: number | null
  novelCount: number | null
  comicCount: number | null
  imageSetCount: number | null
  illustrationCount: number | null
  contentTypes: number | null
}

export type WorkCategoryMinAggregateOutputType = {
  id: number | null
  name: string | null
  icon: string | null
  popularity: number | null
  popularityWeight: number | null
  order: number | null
  novelCount: number | null
  comicCount: number | null
  imageSetCount: number | null
  illustrationCount: number | null
  isEnabled: boolean | null
  contentTypes: number | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type WorkCategoryMaxAggregateOutputType = {
  id: number | null
  name: string | null
  icon: string | null
  popularity: number | null
  popularityWeight: number | null
  order: number | null
  novelCount: number | null
  comicCount: number | null
  imageSetCount: number | null
  illustrationCount: number | null
  isEnabled: boolean | null
  contentTypes: number | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type WorkCategoryCountAggregateOutputType = {
  id: number
  name: number
  icon: number
  popularity: number
  popularityWeight: number
  order: number
  novelCount: number
  comicCount: number
  imageSetCount: number
  illustrationCount: number
  isEnabled: number
  contentTypes: number
  createdAt: number
  updatedAt: number
  deletedAt: number
  _all: number
}


export type WorkCategoryAvgAggregateInputType = {
  id?: true
  popularity?: true
  popularityWeight?: true
  order?: true
  novelCount?: true
  comicCount?: true
  imageSetCount?: true
  illustrationCount?: true
  contentTypes?: true
}

export type WorkCategorySumAggregateInputType = {
  id?: true
  popularity?: true
  popularityWeight?: true
  order?: true
  novelCount?: true
  comicCount?: true
  imageSetCount?: true
  illustrationCount?: true
  contentTypes?: true
}

export type WorkCategoryMinAggregateInputType = {
  id?: true
  name?: true
  icon?: true
  popularity?: true
  popularityWeight?: true
  order?: true
  novelCount?: true
  comicCount?: true
  imageSetCount?: true
  illustrationCount?: true
  isEnabled?: true
  contentTypes?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type WorkCategoryMaxAggregateInputType = {
  id?: true
  name?: true
  icon?: true
  popularity?: true
  popularityWeight?: true
  order?: true
  novelCount?: true
  comicCount?: true
  imageSetCount?: true
  illustrationCount?: true
  isEnabled?: true
  contentTypes?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type WorkCategoryCountAggregateInputType = {
  id?: true
  name?: true
  icon?: true
  popularity?: true
  popularityWeight?: true
  order?: true
  novelCount?: true
  comicCount?: true
  imageSetCount?: true
  illustrationCount?: true
  isEnabled?: true
  contentTypes?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  _all?: true
}

export type WorkCategoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkCategory to aggregate.
   */
  where?: Prisma.WorkCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkCategories to fetch.
   */
  orderBy?: Prisma.WorkCategoryOrderByWithRelationInput | Prisma.WorkCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` WorkCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkCategories
  **/
  _count?: true | WorkCategoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkCategoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkCategorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkCategoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkCategoryMaxAggregateInputType
}

export type GetWorkCategoryAggregateType<T extends WorkCategoryAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkCategory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkCategory[P]>
}




export type WorkCategoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkCategoryWhereInput
  orderBy?: Prisma.WorkCategoryOrderByWithAggregationInput | Prisma.WorkCategoryOrderByWithAggregationInput[]
  by: Prisma.WorkCategoryScalarFieldEnum[] | Prisma.WorkCategoryScalarFieldEnum
  having?: Prisma.WorkCategoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkCategoryCountAggregateInputType | true
  _avg?: WorkCategoryAvgAggregateInputType
  _sum?: WorkCategorySumAggregateInputType
  _min?: WorkCategoryMinAggregateInputType
  _max?: WorkCategoryMaxAggregateInputType
}

export type WorkCategoryGroupByOutputType = {
  id: number
  name: string
  icon: string | null
  popularity: number
  popularityWeight: number
  order: number
  novelCount: number
  comicCount: number
  imageSetCount: number
  illustrationCount: number
  isEnabled: boolean
  contentTypes: number
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
  _count: WorkCategoryCountAggregateOutputType | null
  _avg: WorkCategoryAvgAggregateOutputType | null
  _sum: WorkCategorySumAggregateOutputType | null
  _min: WorkCategoryMinAggregateOutputType | null
  _max: WorkCategoryMaxAggregateOutputType | null
}

type GetWorkCategoryGroupByPayload<T extends WorkCategoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkCategoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkCategoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkCategoryGroupByOutputType[P]>
      }
    >
  >



export type WorkCategoryWhereInput = {
  AND?: Prisma.WorkCategoryWhereInput | Prisma.WorkCategoryWhereInput[]
  OR?: Prisma.WorkCategoryWhereInput[]
  NOT?: Prisma.WorkCategoryWhereInput | Prisma.WorkCategoryWhereInput[]
  id?: Prisma.IntFilter<"WorkCategory"> | number
  name?: Prisma.StringFilter<"WorkCategory"> | string
  icon?: Prisma.StringNullableFilter<"WorkCategory"> | string | null
  popularity?: Prisma.IntFilter<"WorkCategory"> | number
  popularityWeight?: Prisma.IntFilter<"WorkCategory"> | number
  order?: Prisma.IntFilter<"WorkCategory"> | number
  novelCount?: Prisma.IntFilter<"WorkCategory"> | number
  comicCount?: Prisma.IntFilter<"WorkCategory"> | number
  imageSetCount?: Prisma.IntFilter<"WorkCategory"> | number
  illustrationCount?: Prisma.IntFilter<"WorkCategory"> | number
  isEnabled?: Prisma.BoolFilter<"WorkCategory"> | boolean
  contentTypes?: Prisma.IntFilter<"WorkCategory"> | number
  createdAt?: Prisma.DateTimeFilter<"WorkCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkCategory"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"WorkCategory"> | Date | string | null
  categoryComics?: Prisma.WorkComicCategoryListRelationFilter
}

export type WorkCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  icon?: Prisma.SortOrderInput | Prisma.SortOrder
  popularity?: Prisma.SortOrder
  popularityWeight?: Prisma.SortOrder
  order?: Prisma.SortOrder
  novelCount?: Prisma.SortOrder
  comicCount?: Prisma.SortOrder
  imageSetCount?: Prisma.SortOrder
  illustrationCount?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  contentTypes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  categoryComics?: Prisma.WorkComicCategoryOrderByRelationAggregateInput
}

export type WorkCategoryWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.WorkCategoryWhereInput | Prisma.WorkCategoryWhereInput[]
  OR?: Prisma.WorkCategoryWhereInput[]
  NOT?: Prisma.WorkCategoryWhereInput | Prisma.WorkCategoryWhereInput[]
  icon?: Prisma.StringNullableFilter<"WorkCategory"> | string | null
  popularity?: Prisma.IntFilter<"WorkCategory"> | number
  popularityWeight?: Prisma.IntFilter<"WorkCategory"> | number
  order?: Prisma.IntFilter<"WorkCategory"> | number
  novelCount?: Prisma.IntFilter<"WorkCategory"> | number
  comicCount?: Prisma.IntFilter<"WorkCategory"> | number
  imageSetCount?: Prisma.IntFilter<"WorkCategory"> | number
  illustrationCount?: Prisma.IntFilter<"WorkCategory"> | number
  isEnabled?: Prisma.BoolFilter<"WorkCategory"> | boolean
  contentTypes?: Prisma.IntFilter<"WorkCategory"> | number
  createdAt?: Prisma.DateTimeFilter<"WorkCategory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkCategory"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"WorkCategory"> | Date | string | null
  categoryComics?: Prisma.WorkComicCategoryListRelationFilter
}, "id" | "name">

export type WorkCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  icon?: Prisma.SortOrderInput | Prisma.SortOrder
  popularity?: Prisma.SortOrder
  popularityWeight?: Prisma.SortOrder
  order?: Prisma.SortOrder
  novelCount?: Prisma.SortOrder
  comicCount?: Prisma.SortOrder
  imageSetCount?: Prisma.SortOrder
  illustrationCount?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  contentTypes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.WorkCategoryCountOrderByAggregateInput
  _avg?: Prisma.WorkCategoryAvgOrderByAggregateInput
  _max?: Prisma.WorkCategoryMaxOrderByAggregateInput
  _min?: Prisma.WorkCategoryMinOrderByAggregateInput
  _sum?: Prisma.WorkCategorySumOrderByAggregateInput
}

export type WorkCategoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkCategoryScalarWhereWithAggregatesInput | Prisma.WorkCategoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkCategoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkCategoryScalarWhereWithAggregatesInput | Prisma.WorkCategoryScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  name?: Prisma.StringWithAggregatesFilter<"WorkCategory"> | string
  icon?: Prisma.StringNullableWithAggregatesFilter<"WorkCategory"> | string | null
  popularity?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  popularityWeight?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  order?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  novelCount?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  comicCount?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  imageSetCount?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  illustrationCount?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  isEnabled?: Prisma.BoolWithAggregatesFilter<"WorkCategory"> | boolean
  contentTypes?: Prisma.IntWithAggregatesFilter<"WorkCategory"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkCategory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkCategory"> | Date | string
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"WorkCategory"> | Date | string | null
}

export type WorkCategoryCreateInput = {
  name: string
  icon?: string | null
  popularity?: number
  popularityWeight?: number
  order?: number
  novelCount?: number
  comicCount?: number
  imageSetCount?: number
  illustrationCount?: number
  isEnabled?: boolean
  contentTypes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
  categoryComics?: Prisma.WorkComicCategoryCreateNestedManyWithoutCategoryInput
}

export type WorkCategoryUncheckedCreateInput = {
  id?: number
  name: string
  icon?: string | null
  popularity?: number
  popularityWeight?: number
  order?: number
  novelCount?: number
  comicCount?: number
  imageSetCount?: number
  illustrationCount?: number
  isEnabled?: boolean
  contentTypes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
  categoryComics?: Prisma.WorkComicCategoryUncheckedCreateNestedManyWithoutCategoryInput
}

export type WorkCategoryUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  popularity?: Prisma.IntFieldUpdateOperationsInput | number
  popularityWeight?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.IntFieldUpdateOperationsInput | number
  novelCount?: Prisma.IntFieldUpdateOperationsInput | number
  comicCount?: Prisma.IntFieldUpdateOperationsInput | number
  imageSetCount?: Prisma.IntFieldUpdateOperationsInput | number
  illustrationCount?: Prisma.IntFieldUpdateOperationsInput | number
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  contentTypes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categoryComics?: Prisma.WorkComicCategoryUpdateManyWithoutCategoryNestedInput
}

export type WorkCategoryUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  popularity?: Prisma.IntFieldUpdateOperationsInput | number
  popularityWeight?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.IntFieldUpdateOperationsInput | number
  novelCount?: Prisma.IntFieldUpdateOperationsInput | number
  comicCount?: Prisma.IntFieldUpdateOperationsInput | number
  imageSetCount?: Prisma.IntFieldUpdateOperationsInput | number
  illustrationCount?: Prisma.IntFieldUpdateOperationsInput | number
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  contentTypes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  categoryComics?: Prisma.WorkComicCategoryUncheckedUpdateManyWithoutCategoryNestedInput
}

export type WorkCategoryCreateManyInput = {
  id?: number
  name: string
  icon?: string | null
  popularity?: number
  popularityWeight?: number
  order?: number
  novelCount?: number
  comicCount?: number
  imageSetCount?: number
  illustrationCount?: number
  isEnabled?: boolean
  contentTypes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkCategoryUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  popularity?: Prisma.IntFieldUpdateOperationsInput | number
  popularityWeight?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.IntFieldUpdateOperationsInput | number
  novelCount?: Prisma.IntFieldUpdateOperationsInput | number
  comicCount?: Prisma.IntFieldUpdateOperationsInput | number
  imageSetCount?: Prisma.IntFieldUpdateOperationsInput | number
  illustrationCount?: Prisma.IntFieldUpdateOperationsInput | number
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  contentTypes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkCategoryUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  popularity?: Prisma.IntFieldUpdateOperationsInput | number
  popularityWeight?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.IntFieldUpdateOperationsInput | number
  novelCount?: Prisma.IntFieldUpdateOperationsInput | number
  comicCount?: Prisma.IntFieldUpdateOperationsInput | number
  imageSetCount?: Prisma.IntFieldUpdateOperationsInput | number
  illustrationCount?: Prisma.IntFieldUpdateOperationsInput | number
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  contentTypes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  popularity?: Prisma.SortOrder
  popularityWeight?: Prisma.SortOrder
  order?: Prisma.SortOrder
  novelCount?: Prisma.SortOrder
  comicCount?: Prisma.SortOrder
  imageSetCount?: Prisma.SortOrder
  illustrationCount?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  contentTypes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type WorkCategoryAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  popularity?: Prisma.SortOrder
  popularityWeight?: Prisma.SortOrder
  order?: Prisma.SortOrder
  novelCount?: Prisma.SortOrder
  comicCount?: Prisma.SortOrder
  imageSetCount?: Prisma.SortOrder
  illustrationCount?: Prisma.SortOrder
  contentTypes?: Prisma.SortOrder
}

export type WorkCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  popularity?: Prisma.SortOrder
  popularityWeight?: Prisma.SortOrder
  order?: Prisma.SortOrder
  novelCount?: Prisma.SortOrder
  comicCount?: Prisma.SortOrder
  imageSetCount?: Prisma.SortOrder
  illustrationCount?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  contentTypes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type WorkCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  popularity?: Prisma.SortOrder
  popularityWeight?: Prisma.SortOrder
  order?: Prisma.SortOrder
  novelCount?: Prisma.SortOrder
  comicCount?: Prisma.SortOrder
  imageSetCount?: Prisma.SortOrder
  illustrationCount?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  contentTypes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type WorkCategorySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  popularity?: Prisma.SortOrder
  popularityWeight?: Prisma.SortOrder
  order?: Prisma.SortOrder
  novelCount?: Prisma.SortOrder
  comicCount?: Prisma.SortOrder
  imageSetCount?: Prisma.SortOrder
  illustrationCount?: Prisma.SortOrder
  contentTypes?: Prisma.SortOrder
}

export type WorkCategoryScalarRelationFilter = {
  is?: Prisma.WorkCategoryWhereInput
  isNot?: Prisma.WorkCategoryWhereInput
}

export type WorkCategoryCreateNestedOneWithoutCategoryComicsInput = {
  create?: Prisma.XOR<Prisma.WorkCategoryCreateWithoutCategoryComicsInput, Prisma.WorkCategoryUncheckedCreateWithoutCategoryComicsInput>
  connectOrCreate?: Prisma.WorkCategoryCreateOrConnectWithoutCategoryComicsInput
  connect?: Prisma.WorkCategoryWhereUniqueInput
}

export type WorkCategoryUpdateOneRequiredWithoutCategoryComicsNestedInput = {
  create?: Prisma.XOR<Prisma.WorkCategoryCreateWithoutCategoryComicsInput, Prisma.WorkCategoryUncheckedCreateWithoutCategoryComicsInput>
  connectOrCreate?: Prisma.WorkCategoryCreateOrConnectWithoutCategoryComicsInput
  upsert?: Prisma.WorkCategoryUpsertWithoutCategoryComicsInput
  connect?: Prisma.WorkCategoryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkCategoryUpdateToOneWithWhereWithoutCategoryComicsInput, Prisma.WorkCategoryUpdateWithoutCategoryComicsInput>, Prisma.WorkCategoryUncheckedUpdateWithoutCategoryComicsInput>
}

export type WorkCategoryCreateWithoutCategoryComicsInput = {
  name: string
  icon?: string | null
  popularity?: number
  popularityWeight?: number
  order?: number
  novelCount?: number
  comicCount?: number
  imageSetCount?: number
  illustrationCount?: number
  isEnabled?: boolean
  contentTypes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkCategoryUncheckedCreateWithoutCategoryComicsInput = {
  id?: number
  name: string
  icon?: string | null
  popularity?: number
  popularityWeight?: number
  order?: number
  novelCount?: number
  comicCount?: number
  imageSetCount?: number
  illustrationCount?: number
  isEnabled?: boolean
  contentTypes?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type WorkCategoryCreateOrConnectWithoutCategoryComicsInput = {
  where: Prisma.WorkCategoryWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkCategoryCreateWithoutCategoryComicsInput, Prisma.WorkCategoryUncheckedCreateWithoutCategoryComicsInput>
}

export type WorkCategoryUpsertWithoutCategoryComicsInput = {
  update: Prisma.XOR<Prisma.WorkCategoryUpdateWithoutCategoryComicsInput, Prisma.WorkCategoryUncheckedUpdateWithoutCategoryComicsInput>
  create: Prisma.XOR<Prisma.WorkCategoryCreateWithoutCategoryComicsInput, Prisma.WorkCategoryUncheckedCreateWithoutCategoryComicsInput>
  where?: Prisma.WorkCategoryWhereInput
}

export type WorkCategoryUpdateToOneWithWhereWithoutCategoryComicsInput = {
  where?: Prisma.WorkCategoryWhereInput
  data: Prisma.XOR<Prisma.WorkCategoryUpdateWithoutCategoryComicsInput, Prisma.WorkCategoryUncheckedUpdateWithoutCategoryComicsInput>
}

export type WorkCategoryUpdateWithoutCategoryComicsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  popularity?: Prisma.IntFieldUpdateOperationsInput | number
  popularityWeight?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.IntFieldUpdateOperationsInput | number
  novelCount?: Prisma.IntFieldUpdateOperationsInput | number
  comicCount?: Prisma.IntFieldUpdateOperationsInput | number
  imageSetCount?: Prisma.IntFieldUpdateOperationsInput | number
  illustrationCount?: Prisma.IntFieldUpdateOperationsInput | number
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  contentTypes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type WorkCategoryUncheckedUpdateWithoutCategoryComicsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  popularity?: Prisma.IntFieldUpdateOperationsInput | number
  popularityWeight?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.IntFieldUpdateOperationsInput | number
  novelCount?: Prisma.IntFieldUpdateOperationsInput | number
  comicCount?: Prisma.IntFieldUpdateOperationsInput | number
  imageSetCount?: Prisma.IntFieldUpdateOperationsInput | number
  illustrationCount?: Prisma.IntFieldUpdateOperationsInput | number
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  contentTypes?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type WorkCategoryCountOutputType
 */

export type WorkCategoryCountOutputType = {
  categoryComics: number
}

export type WorkCategoryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categoryComics?: boolean | WorkCategoryCountOutputTypeCountCategoryComicsArgs
}

/**
 * WorkCategoryCountOutputType without action
 */
export type WorkCategoryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategoryCountOutputType
   */
  select?: Prisma.WorkCategoryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WorkCategoryCountOutputType without action
 */
export type WorkCategoryCountOutputTypeCountCategoryComicsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkComicCategoryWhereInput
}


export type WorkCategorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  icon?: boolean
  popularity?: boolean
  popularityWeight?: boolean
  order?: boolean
  novelCount?: boolean
  comicCount?: boolean
  imageSetCount?: boolean
  illustrationCount?: boolean
  isEnabled?: boolean
  contentTypes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  categoryComics?: boolean | Prisma.WorkCategory$categoryComicsArgs<ExtArgs>
  _count?: boolean | Prisma.WorkCategoryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workCategory"]>

export type WorkCategorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  icon?: boolean
  popularity?: boolean
  popularityWeight?: boolean
  order?: boolean
  novelCount?: boolean
  comicCount?: boolean
  imageSetCount?: boolean
  illustrationCount?: boolean
  isEnabled?: boolean
  contentTypes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}, ExtArgs["result"]["workCategory"]>

export type WorkCategorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  icon?: boolean
  popularity?: boolean
  popularityWeight?: boolean
  order?: boolean
  novelCount?: boolean
  comicCount?: boolean
  imageSetCount?: boolean
  illustrationCount?: boolean
  isEnabled?: boolean
  contentTypes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}, ExtArgs["result"]["workCategory"]>

export type WorkCategorySelectScalar = {
  id?: boolean
  name?: boolean
  icon?: boolean
  popularity?: boolean
  popularityWeight?: boolean
  order?: boolean
  novelCount?: boolean
  comicCount?: boolean
  imageSetCount?: boolean
  illustrationCount?: boolean
  isEnabled?: boolean
  contentTypes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type WorkCategoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "icon" | "popularity" | "popularityWeight" | "order" | "novelCount" | "comicCount" | "imageSetCount" | "illustrationCount" | "isEnabled" | "contentTypes" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["workCategory"]>
export type WorkCategoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  categoryComics?: boolean | Prisma.WorkCategory$categoryComicsArgs<ExtArgs>
  _count?: boolean | Prisma.WorkCategoryCountOutputTypeDefaultArgs<ExtArgs>
}
export type WorkCategoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type WorkCategoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $WorkCategoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkCategory"
  objects: {
    categoryComics: Prisma.$WorkComicCategoryPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * 主键ID
     */
    id: number
    /**
     * 分类名称（唯一）
     */
    name: string
    /**
     * 分类图标URL
     */
    icon: string | null
    /**
     * 人气值（用于展示和排序）
     */
    popularity: number
    /**
     * 自定义人气权重
     */
    popularityWeight: number
    /**
     * 排序值（数值越小越靠前）
     */
    order: number
    /**
     * 小说数量
     */
    novelCount: number
    /**
     * 漫画数量
     */
    comicCount: number
    /**
     * 图集数量
     */
    imageSetCount: number
    /**
     * 插画作品数量
     */
    illustrationCount: number
    /**
     * 是否启用
     */
    isEnabled: boolean
    /**
     * 内容适用类型（bitmask：1=漫画, 2=小说, 4=插画, 8=图集）
     */
    contentTypes: number
    /**
     * 创建时间
     */
    createdAt: Date
    /**
     * 更新时间
     */
    updatedAt: Date
    /**
     * 软删除时间
     */
    deletedAt: Date | null
  }, ExtArgs["result"]["workCategory"]>
  composites: {}
}

export type WorkCategoryGetPayload<S extends boolean | null | undefined | WorkCategoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload, S>

export type WorkCategoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: WorkCategoryCountAggregateInputType | true
  }

export interface WorkCategoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkCategory'], meta: { name: 'WorkCategory' } }
  /**
   * Find zero or one WorkCategory that matches the filter.
   * @param {WorkCategoryFindUniqueArgs} args - Arguments to find a WorkCategory
   * @example
   * // Get one WorkCategory
   * const workCategory = await prisma.workCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkCategoryFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkCategoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkCategoryClient<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkCategoryFindUniqueOrThrowArgs} args - Arguments to find a WorkCategory
   * @example
   * // Get one WorkCategory
   * const workCategory = await prisma.workCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkCategoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkCategoryClient<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkCategoryFindFirstArgs} args - Arguments to find a WorkCategory
   * @example
   * // Get one WorkCategory
   * const workCategory = await prisma.workCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkCategoryFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkCategoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkCategoryClient<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkCategoryFindFirstOrThrowArgs} args - Arguments to find a WorkCategory
   * @example
   * // Get one WorkCategory
   * const workCategory = await prisma.workCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkCategoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkCategoryClient<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkCategories
   * const workCategories = await prisma.workCategory.findMany()
   * 
   * // Get first 10 WorkCategories
   * const workCategories = await prisma.workCategory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workCategoryWithIdOnly = await prisma.workCategory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkCategoryFindManyArgs>(args?: Prisma.SelectSubset<T, WorkCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkCategory.
   * @param {WorkCategoryCreateArgs} args - Arguments to create a WorkCategory.
   * @example
   * // Create one WorkCategory
   * const WorkCategory = await prisma.workCategory.create({
   *   data: {
   *     // ... data to create a WorkCategory
   *   }
   * })
   * 
   */
  create<T extends WorkCategoryCreateArgs>(args: Prisma.SelectSubset<T, WorkCategoryCreateArgs<ExtArgs>>): Prisma.Prisma__WorkCategoryClient<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkCategories.
   * @param {WorkCategoryCreateManyArgs} args - Arguments to create many WorkCategories.
   * @example
   * // Create many WorkCategories
   * const workCategory = await prisma.workCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkCategoryCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkCategories and returns the data saved in the database.
   * @param {WorkCategoryCreateManyAndReturnArgs} args - Arguments to create many WorkCategories.
   * @example
   * // Create many WorkCategories
   * const workCategory = await prisma.workCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkCategories and only return the `id`
   * const workCategoryWithIdOnly = await prisma.workCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkCategoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkCategory.
   * @param {WorkCategoryDeleteArgs} args - Arguments to delete one WorkCategory.
   * @example
   * // Delete one WorkCategory
   * const WorkCategory = await prisma.workCategory.delete({
   *   where: {
   *     // ... filter to delete one WorkCategory
   *   }
   * })
   * 
   */
  delete<T extends WorkCategoryDeleteArgs>(args: Prisma.SelectSubset<T, WorkCategoryDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkCategoryClient<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkCategory.
   * @param {WorkCategoryUpdateArgs} args - Arguments to update one WorkCategory.
   * @example
   * // Update one WorkCategory
   * const workCategory = await prisma.workCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkCategoryUpdateArgs>(args: Prisma.SelectSubset<T, WorkCategoryUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkCategoryClient<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkCategories.
   * @param {WorkCategoryDeleteManyArgs} args - Arguments to filter WorkCategories to delete.
   * @example
   * // Delete a few WorkCategories
   * const { count } = await prisma.workCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkCategoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkCategories
   * const workCategory = await prisma.workCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkCategoryUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkCategories and returns the data updated in the database.
   * @param {WorkCategoryUpdateManyAndReturnArgs} args - Arguments to update many WorkCategories.
   * @example
   * // Update many WorkCategories
   * const workCategory = await prisma.workCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkCategories and only return the `id`
   * const workCategoryWithIdOnly = await prisma.workCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkCategoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkCategory.
   * @param {WorkCategoryUpsertArgs} args - Arguments to update or create a WorkCategory.
   * @example
   * // Update or create a WorkCategory
   * const workCategory = await prisma.workCategory.upsert({
   *   create: {
   *     // ... data to create a WorkCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkCategory we want to update
   *   }
   * })
   */
  upsert<T extends WorkCategoryUpsertArgs>(args: Prisma.SelectSubset<T, WorkCategoryUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkCategoryClient<runtime.Types.Result.GetResult<Prisma.$WorkCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkCategoryCountArgs} args - Arguments to filter WorkCategories to count.
   * @example
   * // Count the number of WorkCategories
   * const count = await prisma.workCategory.count({
   *   where: {
   *     // ... the filter for the WorkCategories we want to count
   *   }
   * })
  **/
  count<T extends WorkCategoryCountArgs>(
    args?: Prisma.Subset<T, WorkCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkCategoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkCategoryAggregateArgs>(args: Prisma.Subset<T, WorkCategoryAggregateArgs>): Prisma.PrismaPromise<GetWorkCategoryAggregateType<T>>

  /**
   * Group by WorkCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkCategoryGroupByArgs['orderBy'] }
      : { orderBy?: WorkCategoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkCategory model
 */
readonly fields: WorkCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkCategoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  categoryComics<T extends Prisma.WorkCategory$categoryComicsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkCategory$categoryComicsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkComicCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkCategory model
 */
export interface WorkCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly name: Prisma.FieldRef<"WorkCategory", 'String'>
  readonly icon: Prisma.FieldRef<"WorkCategory", 'String'>
  readonly popularity: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly popularityWeight: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly order: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly novelCount: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly comicCount: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly imageSetCount: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly illustrationCount: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly isEnabled: Prisma.FieldRef<"WorkCategory", 'Boolean'>
  readonly contentTypes: Prisma.FieldRef<"WorkCategory", 'Int'>
  readonly createdAt: Prisma.FieldRef<"WorkCategory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkCategory", 'DateTime'>
  readonly deletedAt: Prisma.FieldRef<"WorkCategory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WorkCategory findUnique
 */
export type WorkCategoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * Filter, which WorkCategory to fetch.
   */
  where: Prisma.WorkCategoryWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory findUniqueOrThrow
 */
export type WorkCategoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * Filter, which WorkCategory to fetch.
   */
  where: Prisma.WorkCategoryWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory findFirst
 */
export type WorkCategoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * Filter, which WorkCategory to fetch.
   */
  where?: Prisma.WorkCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkCategories to fetch.
   */
  orderBy?: Prisma.WorkCategoryOrderByWithRelationInput | Prisma.WorkCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkCategories.
   */
  cursor?: Prisma.WorkCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` WorkCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkCategories.
   */
  distinct?: Prisma.WorkCategoryScalarFieldEnum | Prisma.WorkCategoryScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory findFirstOrThrow
 */
export type WorkCategoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * Filter, which WorkCategory to fetch.
   */
  where?: Prisma.WorkCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkCategories to fetch.
   */
  orderBy?: Prisma.WorkCategoryOrderByWithRelationInput | Prisma.WorkCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkCategories.
   */
  cursor?: Prisma.WorkCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` WorkCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkCategories.
   */
  distinct?: Prisma.WorkCategoryScalarFieldEnum | Prisma.WorkCategoryScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory findMany
 */
export type WorkCategoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * Filter, which WorkCategories to fetch.
   */
  where?: Prisma.WorkCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkCategories to fetch.
   */
  orderBy?: Prisma.WorkCategoryOrderByWithRelationInput | Prisma.WorkCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkCategories.
   */
  cursor?: Prisma.WorkCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` WorkCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkCategories.
   */
  skip?: number
  distinct?: Prisma.WorkCategoryScalarFieldEnum | Prisma.WorkCategoryScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory create
 */
export type WorkCategoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkCategory.
   */
  data: Prisma.XOR<Prisma.WorkCategoryCreateInput, Prisma.WorkCategoryUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory createMany
 */
export type WorkCategoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkCategories.
   */
  data: Prisma.WorkCategoryCreateManyInput | Prisma.WorkCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkCategory createManyAndReturn
 */
export type WorkCategoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * The data used to create many WorkCategories.
   */
  data: Prisma.WorkCategoryCreateManyInput | Prisma.WorkCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkCategory update
 */
export type WorkCategoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkCategory.
   */
  data: Prisma.XOR<Prisma.WorkCategoryUpdateInput, Prisma.WorkCategoryUncheckedUpdateInput>
  /**
   * Choose, which WorkCategory to update.
   */
  where: Prisma.WorkCategoryWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory updateMany
 */
export type WorkCategoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkCategories.
   */
  data: Prisma.XOR<Prisma.WorkCategoryUpdateManyMutationInput, Prisma.WorkCategoryUncheckedUpdateManyInput>
  /**
   * Filter which WorkCategories to update
   */
  where?: Prisma.WorkCategoryWhereInput
  /**
   * Limit how many WorkCategories to update.
   */
  limit?: number
}

/**
 * WorkCategory updateManyAndReturn
 */
export type WorkCategoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * The data used to update WorkCategories.
   */
  data: Prisma.XOR<Prisma.WorkCategoryUpdateManyMutationInput, Prisma.WorkCategoryUncheckedUpdateManyInput>
  /**
   * Filter which WorkCategories to update
   */
  where?: Prisma.WorkCategoryWhereInput
  /**
   * Limit how many WorkCategories to update.
   */
  limit?: number
}

/**
 * WorkCategory upsert
 */
export type WorkCategoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkCategory to update in case it exists.
   */
  where: Prisma.WorkCategoryWhereUniqueInput
  /**
   * In case the WorkCategory found by the `where` argument doesn't exist, create a new WorkCategory with this data.
   */
  create: Prisma.XOR<Prisma.WorkCategoryCreateInput, Prisma.WorkCategoryUncheckedCreateInput>
  /**
   * In case the WorkCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkCategoryUpdateInput, Prisma.WorkCategoryUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory delete
 */
export type WorkCategoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
  /**
   * Filter which WorkCategory to delete.
   */
  where: Prisma.WorkCategoryWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * WorkCategory deleteMany
 */
export type WorkCategoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkCategories to delete
   */
  where?: Prisma.WorkCategoryWhereInput
  /**
   * Limit how many WorkCategories to delete.
   */
  limit?: number
}

/**
 * WorkCategory.categoryComics
 */
export type WorkCategory$categoryComicsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null
  where?: Prisma.WorkComicCategoryWhereInput
  orderBy?: Prisma.WorkComicCategoryOrderByWithRelationInput | Prisma.WorkComicCategoryOrderByWithRelationInput[]
  cursor?: Prisma.WorkComicCategoryWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkComicCategoryScalarFieldEnum | Prisma.WorkComicCategoryScalarFieldEnum[]
}

/**
 * WorkCategory without action
 */
export type WorkCategoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCategory
   */
  select?: Prisma.WorkCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkCategory
   */
  omit?: Prisma.WorkCategoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkCategoryInclude<ExtArgs> | null
}
