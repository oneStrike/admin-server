/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `WorkComicCategory` model and its related types.
 *
 * 🟢 You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model WorkComicCategory
 *
 */
export type WorkComicCategoryModel =
  runtime.Types.Result.DefaultSelection<Prisma.$WorkComicCategoryPayload>;

export type AggregateWorkComicCategory = {
  _count: WorkComicCategoryCountAggregateOutputType | null;
  _avg: WorkComicCategoryAvgAggregateOutputType | null;
  _sum: WorkComicCategorySumAggregateOutputType | null;
  _min: WorkComicCategoryMinAggregateOutputType | null;
  _max: WorkComicCategoryMaxAggregateOutputType | null;
};

export type WorkComicCategoryAvgAggregateOutputType = {
  comicId: number | null;
  categoryId: number | null;
  weight: number | null;
};

export type WorkComicCategorySumAggregateOutputType = {
  comicId: number | null;
  categoryId: number | null;
  weight: number | null;
};

export type WorkComicCategoryMinAggregateOutputType = {
  comicId: number | null;
  categoryId: number | null;
  isPrimary: boolean | null;
  weight: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type WorkComicCategoryMaxAggregateOutputType = {
  comicId: number | null;
  categoryId: number | null;
  isPrimary: boolean | null;
  weight: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type WorkComicCategoryCountAggregateOutputType = {
  comicId: number;
  categoryId: number;
  isPrimary: number;
  weight: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type WorkComicCategoryAvgAggregateInputType = {
  comicId?: true;
  categoryId?: true;
  weight?: true;
};

export type WorkComicCategorySumAggregateInputType = {
  comicId?: true;
  categoryId?: true;
  weight?: true;
};

export type WorkComicCategoryMinAggregateInputType = {
  comicId?: true;
  categoryId?: true;
  isPrimary?: true;
  weight?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type WorkComicCategoryMaxAggregateInputType = {
  comicId?: true;
  categoryId?: true;
  isPrimary?: true;
  weight?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type WorkComicCategoryCountAggregateInputType = {
  comicId?: true;
  categoryId?: true;
  isPrimary?: true;
  weight?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type WorkComicCategoryAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which WorkComicCategory to aggregate.
   */
  where?: Prisma.WorkComicCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkComicCategories to fetch.
   */
  orderBy?:
    | Prisma.WorkComicCategoryOrderByWithRelationInput
    | Prisma.WorkComicCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.WorkComicCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` WorkComicCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkComicCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned WorkComicCategories
   **/
  _count?: true | WorkComicCategoryCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: WorkComicCategoryAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: WorkComicCategorySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: WorkComicCategoryMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: WorkComicCategoryMaxAggregateInputType;
};

export type GetWorkComicCategoryAggregateType<
  T extends WorkComicCategoryAggregateArgs,
> = {
  [P in keyof T & keyof AggregateWorkComicCategory]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkComicCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkComicCategory[P]>;
};

export type WorkComicCategoryGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.WorkComicCategoryWhereInput;
  orderBy?:
    | Prisma.WorkComicCategoryOrderByWithAggregationInput
    | Prisma.WorkComicCategoryOrderByWithAggregationInput[];
  by:
    | Prisma.WorkComicCategoryScalarFieldEnum[]
    | Prisma.WorkComicCategoryScalarFieldEnum;
  having?: Prisma.WorkComicCategoryScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: WorkComicCategoryCountAggregateInputType | true;
  _avg?: WorkComicCategoryAvgAggregateInputType;
  _sum?: WorkComicCategorySumAggregateInputType;
  _min?: WorkComicCategoryMinAggregateInputType;
  _max?: WorkComicCategoryMaxAggregateInputType;
};

export type WorkComicCategoryGroupByOutputType = {
  comicId: number;
  categoryId: number;
  isPrimary: boolean;
  weight: number;
  createdAt: Date;
  updatedAt: Date;
  _count: WorkComicCategoryCountAggregateOutputType | null;
  _avg: WorkComicCategoryAvgAggregateOutputType | null;
  _sum: WorkComicCategorySumAggregateOutputType | null;
  _min: WorkComicCategoryMinAggregateOutputType | null;
  _max: WorkComicCategoryMaxAggregateOutputType | null;
};

type GetWorkComicCategoryGroupByPayload<
  T extends WorkComicCategoryGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkComicCategoryGroupByOutputType, T['by']> & {
      [P in keyof T &
        keyof WorkComicCategoryGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], WorkComicCategoryGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], WorkComicCategoryGroupByOutputType[P]>;
    }
  >
>;

export type WorkComicCategoryWhereInput = {
  AND?:
    | Prisma.WorkComicCategoryWhereInput
    | Prisma.WorkComicCategoryWhereInput[];
  OR?: Prisma.WorkComicCategoryWhereInput[];
  NOT?:
    | Prisma.WorkComicCategoryWhereInput
    | Prisma.WorkComicCategoryWhereInput[];
  comicId?: Prisma.IntFilter<'WorkComicCategory'> | number;
  categoryId?: Prisma.IntFilter<'WorkComicCategory'> | number;
  isPrimary?: Prisma.BoolFilter<'WorkComicCategory'> | boolean;
  weight?: Prisma.IntFilter<'WorkComicCategory'> | number;
  createdAt?: Prisma.DateTimeFilter<'WorkComicCategory'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'WorkComicCategory'> | Date | string;
  comic?: Prisma.XOR<
    Prisma.WorkComicScalarRelationFilter,
    Prisma.WorkComicWhereInput
  >;
  category?: Prisma.XOR<
    Prisma.WorkCategoryScalarRelationFilter,
    Prisma.WorkCategoryWhereInput
  >;
};

export type WorkComicCategoryOrderByWithRelationInput = {
  comicId?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  isPrimary?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  comic?: Prisma.WorkComicOrderByWithRelationInput;
  category?: Prisma.WorkCategoryOrderByWithRelationInput;
};

export type WorkComicCategoryWhereUniqueInput = Prisma.AtLeast<
  {
    comicId_categoryId?: Prisma.WorkComicCategoryComicIdCategoryIdCompoundUniqueInput;
    AND?:
      | Prisma.WorkComicCategoryWhereInput
      | Prisma.WorkComicCategoryWhereInput[];
    OR?: Prisma.WorkComicCategoryWhereInput[];
    NOT?:
      | Prisma.WorkComicCategoryWhereInput
      | Prisma.WorkComicCategoryWhereInput[];
    comicId?: Prisma.IntFilter<'WorkComicCategory'> | number;
    categoryId?: Prisma.IntFilter<'WorkComicCategory'> | number;
    isPrimary?: Prisma.BoolFilter<'WorkComicCategory'> | boolean;
    weight?: Prisma.IntFilter<'WorkComicCategory'> | number;
    createdAt?: Prisma.DateTimeFilter<'WorkComicCategory'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'WorkComicCategory'> | Date | string;
    comic?: Prisma.XOR<
      Prisma.WorkComicScalarRelationFilter,
      Prisma.WorkComicWhereInput
    >;
    category?: Prisma.XOR<
      Prisma.WorkCategoryScalarRelationFilter,
      Prisma.WorkCategoryWhereInput
    >;
  },
  'comicId_categoryId'
>;

export type WorkComicCategoryOrderByWithAggregationInput = {
  comicId?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  isPrimary?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.WorkComicCategoryCountOrderByAggregateInput;
  _avg?: Prisma.WorkComicCategoryAvgOrderByAggregateInput;
  _max?: Prisma.WorkComicCategoryMaxOrderByAggregateInput;
  _min?: Prisma.WorkComicCategoryMinOrderByAggregateInput;
  _sum?: Prisma.WorkComicCategorySumOrderByAggregateInput;
};

export type WorkComicCategoryScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.WorkComicCategoryScalarWhereWithAggregatesInput
    | Prisma.WorkComicCategoryScalarWhereWithAggregatesInput[];
  OR?: Prisma.WorkComicCategoryScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.WorkComicCategoryScalarWhereWithAggregatesInput
    | Prisma.WorkComicCategoryScalarWhereWithAggregatesInput[];
  comicId?: Prisma.IntWithAggregatesFilter<'WorkComicCategory'> | number;
  categoryId?: Prisma.IntWithAggregatesFilter<'WorkComicCategory'> | number;
  isPrimary?: Prisma.BoolWithAggregatesFilter<'WorkComicCategory'> | boolean;
  weight?: Prisma.IntWithAggregatesFilter<'WorkComicCategory'> | number;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'WorkComicCategory'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'WorkComicCategory'>
    | Date
    | string;
};

export type WorkComicCategoryCreateInput = {
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  comic: Prisma.WorkComicCreateNestedOneWithoutComicCategoriesInput;
  category: Prisma.WorkCategoryCreateNestedOneWithoutCategoryComicsInput;
};

export type WorkComicCategoryUncheckedCreateInput = {
  comicId: number;
  categoryId: number;
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type WorkComicCategoryUpdateInput = {
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  comic?: Prisma.WorkComicUpdateOneRequiredWithoutComicCategoriesNestedInput;
  category?: Prisma.WorkCategoryUpdateOneRequiredWithoutCategoryComicsNestedInput;
};

export type WorkComicCategoryUncheckedUpdateInput = {
  comicId?: Prisma.IntFieldUpdateOperationsInput | number;
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number;
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkComicCategoryCreateManyInput = {
  comicId: number;
  categoryId: number;
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type WorkComicCategoryUpdateManyMutationInput = {
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkComicCategoryUncheckedUpdateManyInput = {
  comicId?: Prisma.IntFieldUpdateOperationsInput | number;
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number;
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkComicCategoryListRelationFilter = {
  every?: Prisma.WorkComicCategoryWhereInput;
  some?: Prisma.WorkComicCategoryWhereInput;
  none?: Prisma.WorkComicCategoryWhereInput;
};

export type WorkComicCategoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type WorkComicCategoryComicIdCategoryIdCompoundUniqueInput = {
  comicId: number;
  categoryId: number;
};

export type WorkComicCategoryCountOrderByAggregateInput = {
  comicId?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  isPrimary?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type WorkComicCategoryAvgOrderByAggregateInput = {
  comicId?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
};

export type WorkComicCategoryMaxOrderByAggregateInput = {
  comicId?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  isPrimary?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type WorkComicCategoryMinOrderByAggregateInput = {
  comicId?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  isPrimary?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type WorkComicCategorySumOrderByAggregateInput = {
  comicId?: Prisma.SortOrder;
  categoryId?: Prisma.SortOrder;
  weight?: Prisma.SortOrder;
};

export type WorkComicCategoryCreateNestedManyWithoutCategoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkComicCategoryCreateWithoutCategoryInput,
        Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput
      >
    | Prisma.WorkComicCategoryCreateWithoutCategoryInput[]
    | Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.WorkComicCategoryCreateOrConnectWithoutCategoryInput
    | Prisma.WorkComicCategoryCreateOrConnectWithoutCategoryInput[];
  createMany?: Prisma.WorkComicCategoryCreateManyCategoryInputEnvelope;
  connect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
};

export type WorkComicCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkComicCategoryCreateWithoutCategoryInput,
        Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput
      >
    | Prisma.WorkComicCategoryCreateWithoutCategoryInput[]
    | Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.WorkComicCategoryCreateOrConnectWithoutCategoryInput
    | Prisma.WorkComicCategoryCreateOrConnectWithoutCategoryInput[];
  createMany?: Prisma.WorkComicCategoryCreateManyCategoryInputEnvelope;
  connect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
};

export type WorkComicCategoryUpdateManyWithoutCategoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkComicCategoryCreateWithoutCategoryInput,
        Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput
      >
    | Prisma.WorkComicCategoryCreateWithoutCategoryInput[]
    | Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.WorkComicCategoryCreateOrConnectWithoutCategoryInput
    | Prisma.WorkComicCategoryCreateOrConnectWithoutCategoryInput[];
  upsert?:
    | Prisma.WorkComicCategoryUpsertWithWhereUniqueWithoutCategoryInput
    | Prisma.WorkComicCategoryUpsertWithWhereUniqueWithoutCategoryInput[];
  createMany?: Prisma.WorkComicCategoryCreateManyCategoryInputEnvelope;
  set?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  delete?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  connect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  update?:
    | Prisma.WorkComicCategoryUpdateWithWhereUniqueWithoutCategoryInput
    | Prisma.WorkComicCategoryUpdateWithWhereUniqueWithoutCategoryInput[];
  updateMany?:
    | Prisma.WorkComicCategoryUpdateManyWithWhereWithoutCategoryInput
    | Prisma.WorkComicCategoryUpdateManyWithWhereWithoutCategoryInput[];
  deleteMany?:
    | Prisma.WorkComicCategoryScalarWhereInput
    | Prisma.WorkComicCategoryScalarWhereInput[];
};

export type WorkComicCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkComicCategoryCreateWithoutCategoryInput,
        Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput
      >
    | Prisma.WorkComicCategoryCreateWithoutCategoryInput[]
    | Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput[];
  connectOrCreate?:
    | Prisma.WorkComicCategoryCreateOrConnectWithoutCategoryInput
    | Prisma.WorkComicCategoryCreateOrConnectWithoutCategoryInput[];
  upsert?:
    | Prisma.WorkComicCategoryUpsertWithWhereUniqueWithoutCategoryInput
    | Prisma.WorkComicCategoryUpsertWithWhereUniqueWithoutCategoryInput[];
  createMany?: Prisma.WorkComicCategoryCreateManyCategoryInputEnvelope;
  set?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  delete?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  connect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  update?:
    | Prisma.WorkComicCategoryUpdateWithWhereUniqueWithoutCategoryInput
    | Prisma.WorkComicCategoryUpdateWithWhereUniqueWithoutCategoryInput[];
  updateMany?:
    | Prisma.WorkComicCategoryUpdateManyWithWhereWithoutCategoryInput
    | Prisma.WorkComicCategoryUpdateManyWithWhereWithoutCategoryInput[];
  deleteMany?:
    | Prisma.WorkComicCategoryScalarWhereInput
    | Prisma.WorkComicCategoryScalarWhereInput[];
};

export type WorkComicCategoryCreateNestedManyWithoutComicInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkComicCategoryCreateWithoutComicInput,
        Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput
      >
    | Prisma.WorkComicCategoryCreateWithoutComicInput[]
    | Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput[];
  connectOrCreate?:
    | Prisma.WorkComicCategoryCreateOrConnectWithoutComicInput
    | Prisma.WorkComicCategoryCreateOrConnectWithoutComicInput[];
  createMany?: Prisma.WorkComicCategoryCreateManyComicInputEnvelope;
  connect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
};

export type WorkComicCategoryUncheckedCreateNestedManyWithoutComicInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkComicCategoryCreateWithoutComicInput,
        Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput
      >
    | Prisma.WorkComicCategoryCreateWithoutComicInput[]
    | Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput[];
  connectOrCreate?:
    | Prisma.WorkComicCategoryCreateOrConnectWithoutComicInput
    | Prisma.WorkComicCategoryCreateOrConnectWithoutComicInput[];
  createMany?: Prisma.WorkComicCategoryCreateManyComicInputEnvelope;
  connect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
};

export type WorkComicCategoryUpdateManyWithoutComicNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkComicCategoryCreateWithoutComicInput,
        Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput
      >
    | Prisma.WorkComicCategoryCreateWithoutComicInput[]
    | Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput[];
  connectOrCreate?:
    | Prisma.WorkComicCategoryCreateOrConnectWithoutComicInput
    | Prisma.WorkComicCategoryCreateOrConnectWithoutComicInput[];
  upsert?:
    | Prisma.WorkComicCategoryUpsertWithWhereUniqueWithoutComicInput
    | Prisma.WorkComicCategoryUpsertWithWhereUniqueWithoutComicInput[];
  createMany?: Prisma.WorkComicCategoryCreateManyComicInputEnvelope;
  set?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  delete?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  connect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  update?:
    | Prisma.WorkComicCategoryUpdateWithWhereUniqueWithoutComicInput
    | Prisma.WorkComicCategoryUpdateWithWhereUniqueWithoutComicInput[];
  updateMany?:
    | Prisma.WorkComicCategoryUpdateManyWithWhereWithoutComicInput
    | Prisma.WorkComicCategoryUpdateManyWithWhereWithoutComicInput[];
  deleteMany?:
    | Prisma.WorkComicCategoryScalarWhereInput
    | Prisma.WorkComicCategoryScalarWhereInput[];
};

export type WorkComicCategoryUncheckedUpdateManyWithoutComicNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.WorkComicCategoryCreateWithoutComicInput,
        Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput
      >
    | Prisma.WorkComicCategoryCreateWithoutComicInput[]
    | Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput[];
  connectOrCreate?:
    | Prisma.WorkComicCategoryCreateOrConnectWithoutComicInput
    | Prisma.WorkComicCategoryCreateOrConnectWithoutComicInput[];
  upsert?:
    | Prisma.WorkComicCategoryUpsertWithWhereUniqueWithoutComicInput
    | Prisma.WorkComicCategoryUpsertWithWhereUniqueWithoutComicInput[];
  createMany?: Prisma.WorkComicCategoryCreateManyComicInputEnvelope;
  set?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  disconnect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  delete?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  connect?:
    | Prisma.WorkComicCategoryWhereUniqueInput
    | Prisma.WorkComicCategoryWhereUniqueInput[];
  update?:
    | Prisma.WorkComicCategoryUpdateWithWhereUniqueWithoutComicInput
    | Prisma.WorkComicCategoryUpdateWithWhereUniqueWithoutComicInput[];
  updateMany?:
    | Prisma.WorkComicCategoryUpdateManyWithWhereWithoutComicInput
    | Prisma.WorkComicCategoryUpdateManyWithWhereWithoutComicInput[];
  deleteMany?:
    | Prisma.WorkComicCategoryScalarWhereInput
    | Prisma.WorkComicCategoryScalarWhereInput[];
};

export type WorkComicCategoryCreateWithoutCategoryInput = {
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  comic: Prisma.WorkComicCreateNestedOneWithoutComicCategoriesInput;
};

export type WorkComicCategoryUncheckedCreateWithoutCategoryInput = {
  comicId: number;
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type WorkComicCategoryCreateOrConnectWithoutCategoryInput = {
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkComicCategoryCreateWithoutCategoryInput,
    Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput
  >;
};

export type WorkComicCategoryCreateManyCategoryInputEnvelope = {
  data:
    | Prisma.WorkComicCategoryCreateManyCategoryInput
    | Prisma.WorkComicCategoryCreateManyCategoryInput[];
  skipDuplicates?: boolean;
};

export type WorkComicCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateWithoutCategoryInput,
    Prisma.WorkComicCategoryUncheckedUpdateWithoutCategoryInput
  >;
  create: Prisma.XOR<
    Prisma.WorkComicCategoryCreateWithoutCategoryInput,
    Prisma.WorkComicCategoryUncheckedCreateWithoutCategoryInput
  >;
};

export type WorkComicCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateWithoutCategoryInput,
    Prisma.WorkComicCategoryUncheckedUpdateWithoutCategoryInput
  >;
};

export type WorkComicCategoryUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.WorkComicCategoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateManyMutationInput,
    Prisma.WorkComicCategoryUncheckedUpdateManyWithoutCategoryInput
  >;
};

export type WorkComicCategoryScalarWhereInput = {
  AND?:
    | Prisma.WorkComicCategoryScalarWhereInput
    | Prisma.WorkComicCategoryScalarWhereInput[];
  OR?: Prisma.WorkComicCategoryScalarWhereInput[];
  NOT?:
    | Prisma.WorkComicCategoryScalarWhereInput
    | Prisma.WorkComicCategoryScalarWhereInput[];
  comicId?: Prisma.IntFilter<'WorkComicCategory'> | number;
  categoryId?: Prisma.IntFilter<'WorkComicCategory'> | number;
  isPrimary?: Prisma.BoolFilter<'WorkComicCategory'> | boolean;
  weight?: Prisma.IntFilter<'WorkComicCategory'> | number;
  createdAt?: Prisma.DateTimeFilter<'WorkComicCategory'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'WorkComicCategory'> | Date | string;
};

export type WorkComicCategoryCreateWithoutComicInput = {
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  category: Prisma.WorkCategoryCreateNestedOneWithoutCategoryComicsInput;
};

export type WorkComicCategoryUncheckedCreateWithoutComicInput = {
  categoryId: number;
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type WorkComicCategoryCreateOrConnectWithoutComicInput = {
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.WorkComicCategoryCreateWithoutComicInput,
    Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput
  >;
};

export type WorkComicCategoryCreateManyComicInputEnvelope = {
  data:
    | Prisma.WorkComicCategoryCreateManyComicInput
    | Prisma.WorkComicCategoryCreateManyComicInput[];
  skipDuplicates?: boolean;
};

export type WorkComicCategoryUpsertWithWhereUniqueWithoutComicInput = {
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateWithoutComicInput,
    Prisma.WorkComicCategoryUncheckedUpdateWithoutComicInput
  >;
  create: Prisma.XOR<
    Prisma.WorkComicCategoryCreateWithoutComicInput,
    Prisma.WorkComicCategoryUncheckedCreateWithoutComicInput
  >;
};

export type WorkComicCategoryUpdateWithWhereUniqueWithoutComicInput = {
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateWithoutComicInput,
    Prisma.WorkComicCategoryUncheckedUpdateWithoutComicInput
  >;
};

export type WorkComicCategoryUpdateManyWithWhereWithoutComicInput = {
  where: Prisma.WorkComicCategoryScalarWhereInput;
  data: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateManyMutationInput,
    Prisma.WorkComicCategoryUncheckedUpdateManyWithoutComicInput
  >;
};

export type WorkComicCategoryCreateManyCategoryInput = {
  comicId: number;
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type WorkComicCategoryUpdateWithoutCategoryInput = {
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  comic?: Prisma.WorkComicUpdateOneRequiredWithoutComicCategoriesNestedInput;
};

export type WorkComicCategoryUncheckedUpdateWithoutCategoryInput = {
  comicId?: Prisma.IntFieldUpdateOperationsInput | number;
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkComicCategoryUncheckedUpdateManyWithoutCategoryInput = {
  comicId?: Prisma.IntFieldUpdateOperationsInput | number;
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkComicCategoryCreateManyComicInput = {
  categoryId: number;
  isPrimary?: boolean;
  weight?: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type WorkComicCategoryUpdateWithoutComicInput = {
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  category?: Prisma.WorkCategoryUpdateOneRequiredWithoutCategoryComicsNestedInput;
};

export type WorkComicCategoryUncheckedUpdateWithoutComicInput = {
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number;
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkComicCategoryUncheckedUpdateManyWithoutComicInput = {
  categoryId?: Prisma.IntFieldUpdateOperationsInput | number;
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  weight?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type WorkComicCategorySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    comicId?: boolean;
    categoryId?: boolean;
    isPrimary?: boolean;
    weight?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>;
    category?: boolean | Prisma.WorkCategoryDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['workComicCategory']
>;

export type WorkComicCategorySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    comicId?: boolean;
    categoryId?: boolean;
    isPrimary?: boolean;
    weight?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>;
    category?: boolean | Prisma.WorkCategoryDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['workComicCategory']
>;

export type WorkComicCategorySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    comicId?: boolean;
    categoryId?: boolean;
    isPrimary?: boolean;
    weight?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>;
    category?: boolean | Prisma.WorkCategoryDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['workComicCategory']
>;

export type WorkComicCategorySelectScalar = {
  comicId?: boolean;
  categoryId?: boolean;
  isPrimary?: boolean;
  weight?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type WorkComicCategoryOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'comicId' | 'categoryId' | 'isPrimary' | 'weight' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['workComicCategory']
>;
export type WorkComicCategoryInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>;
  category?: boolean | Prisma.WorkCategoryDefaultArgs<ExtArgs>;
};
export type WorkComicCategoryIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>;
  category?: boolean | Prisma.WorkCategoryDefaultArgs<ExtArgs>;
};
export type WorkComicCategoryIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  comic?: boolean | Prisma.WorkComicDefaultArgs<ExtArgs>;
  category?: boolean | Prisma.WorkCategoryDefaultArgs<ExtArgs>;
};

export type $WorkComicCategoryPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'WorkComicCategory';
  objects: {
    comic: Prisma.$WorkComicPayload<ExtArgs>;
    category: Prisma.$WorkCategoryPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      /**
       * 漫画ID
       */
      comicId: number;
      /**
       * 分类ID
       */
      categoryId: number;
      /**
       * 是否为主要分类
       */
      isPrimary: boolean;
      /**
       * 分类权重（用于排序显示）
       */
      weight: number;
      /**
       * 关联时间
       */
      createdAt: Date;
      /**
       * 更新时间
       */
      updatedAt: Date;
    },
    ExtArgs['result']['workComicCategory']
  >;
  composites: {};
};

export type WorkComicCategoryGetPayload<
  S extends boolean | null | undefined | WorkComicCategoryDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$WorkComicCategoryPayload, S>;

export type WorkComicCategoryCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  WorkComicCategoryFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'
> & {
  select?: WorkComicCategoryCountAggregateInputType | true;
};

export interface WorkComicCategoryDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['WorkComicCategory'];
    meta: { name: 'WorkComicCategory' };
  };
  /**
   * Find zero or one WorkComicCategory that matches the filter.
   * @param {WorkComicCategoryFindUniqueArgs} args - Arguments to find a WorkComicCategory
   * @example
   * // Get one WorkComicCategory
   * const workComicCategory = await prisma.workComicCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkComicCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, WorkComicCategoryFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__WorkComicCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one WorkComicCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkComicCategoryFindUniqueOrThrowArgs} args - Arguments to find a WorkComicCategory
   * @example
   * // Get one WorkComicCategory
   * const workComicCategory = await prisma.workComicCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkComicCategoryFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      WorkComicCategoryFindUniqueOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__WorkComicCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkComicCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicCategoryFindFirstArgs} args - Arguments to find a WorkComicCategory
   * @example
   * // Get one WorkComicCategory
   * const workComicCategory = await prisma.workComicCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkComicCategoryFindFirstArgs>(
    args?: Prisma.SelectSubset<T, WorkComicCategoryFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__WorkComicCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first WorkComicCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicCategoryFindFirstOrThrowArgs} args - Arguments to find a WorkComicCategory
   * @example
   * // Get one WorkComicCategory
   * const workComicCategory = await prisma.workComicCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkComicCategoryFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      WorkComicCategoryFindFirstOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__WorkComicCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more WorkComicCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkComicCategories
   * const workComicCategories = await prisma.workComicCategory.findMany()
   *
   * // Get first 10 WorkComicCategories
   * const workComicCategories = await prisma.workComicCategory.findMany({ take: 10 })
   *
   * // Only select the `comicId`
   * const workComicCategoryWithComicIdOnly = await prisma.workComicCategory.findMany({ select: { comicId: true } })
   *
   */
  findMany<T extends WorkComicCategoryFindManyArgs>(
    args?: Prisma.SelectSubset<T, WorkComicCategoryFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a WorkComicCategory.
   * @param {WorkComicCategoryCreateArgs} args - Arguments to create a WorkComicCategory.
   * @example
   * // Create one WorkComicCategory
   * const WorkComicCategory = await prisma.workComicCategory.create({
   *   data: {
   *     // ... data to create a WorkComicCategory
   *   }
   * })
   *
   */
  create<T extends WorkComicCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, WorkComicCategoryCreateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkComicCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many WorkComicCategories.
   * @param {WorkComicCategoryCreateManyArgs} args - Arguments to create many WorkComicCategories.
   * @example
   * // Create many WorkComicCategories
   * const workComicCategory = await prisma.workComicCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends WorkComicCategoryCreateManyArgs>(
    args?: Prisma.SelectSubset<T, WorkComicCategoryCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many WorkComicCategories and returns the data saved in the database.
   * @param {WorkComicCategoryCreateManyAndReturnArgs} args - Arguments to create many WorkComicCategories.
   * @example
   * // Create many WorkComicCategories
   * const workComicCategory = await prisma.workComicCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many WorkComicCategories and only return the `comicId`
   * const workComicCategoryWithComicIdOnly = await prisma.workComicCategory.createManyAndReturn({
   *   select: { comicId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends WorkComicCategoryCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      WorkComicCategoryCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a WorkComicCategory.
   * @param {WorkComicCategoryDeleteArgs} args - Arguments to delete one WorkComicCategory.
   * @example
   * // Delete one WorkComicCategory
   * const WorkComicCategory = await prisma.workComicCategory.delete({
   *   where: {
   *     // ... filter to delete one WorkComicCategory
   *   }
   * })
   *
   */
  delete<T extends WorkComicCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, WorkComicCategoryDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__WorkComicCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one WorkComicCategory.
   * @param {WorkComicCategoryUpdateArgs} args - Arguments to update one WorkComicCategory.
   * @example
   * // Update one WorkComicCategory
   * const workComicCategory = await prisma.workComicCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends WorkComicCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, WorkComicCategoryUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__WorkComicCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more WorkComicCategories.
   * @param {WorkComicCategoryDeleteManyArgs} args - Arguments to filter WorkComicCategories to delete.
   * @example
   * // Delete a few WorkComicCategories
   * const { count } = await prisma.workComicCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends WorkComicCategoryDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, WorkComicCategoryDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkComicCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkComicCategories
   * const workComicCategory = await prisma.workComicCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends WorkComicCategoryUpdateManyArgs>(
    args: Prisma.SelectSubset<T, WorkComicCategoryUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more WorkComicCategories and returns the data updated in the database.
   * @param {WorkComicCategoryUpdateManyAndReturnArgs} args - Arguments to update many WorkComicCategories.
   * @example
   * // Update many WorkComicCategories
   * const workComicCategory = await prisma.workComicCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more WorkComicCategories and only return the `comicId`
   * const workComicCategoryWithComicIdOnly = await prisma.workComicCategory.updateManyAndReturn({
   *   select: { comicId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends WorkComicCategoryUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      WorkComicCategoryUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one WorkComicCategory.
   * @param {WorkComicCategoryUpsertArgs} args - Arguments to update or create a WorkComicCategory.
   * @example
   * // Update or create a WorkComicCategory
   * const workComicCategory = await prisma.workComicCategory.upsert({
   *   create: {
   *     // ... data to create a WorkComicCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkComicCategory we want to update
   *   }
   * })
   */
  upsert<T extends WorkComicCategoryUpsertArgs>(
    args: Prisma.SelectSubset<T, WorkComicCategoryUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__WorkComicCategoryClient<
    runtime.Types.Result.GetResult<
      Prisma.$WorkComicCategoryPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of WorkComicCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicCategoryCountArgs} args - Arguments to filter WorkComicCategories to count.
   * @example
   * // Count the number of WorkComicCategories
   * const count = await prisma.workComicCategory.count({
   *   where: {
   *     // ... the filter for the WorkComicCategories we want to count
   *   }
   * })
   **/
  count<T extends WorkComicCategoryCountArgs>(
    args?: Prisma.Subset<T, WorkComicCategoryCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            WorkComicCategoryCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a WorkComicCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends WorkComicCategoryAggregateArgs>(
    args: Prisma.Subset<T, WorkComicCategoryAggregateArgs>
  ): Prisma.PrismaPromise<GetWorkComicCategoryAggregateType<T>>;

  /**
   * Group by WorkComicCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkComicCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends WorkComicCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkComicCategoryGroupByArgs['orderBy'] }
      : { orderBy?: WorkComicCategoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      WorkComicCategoryGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetWorkComicCategoryGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the WorkComicCategory model
   */
  readonly fields: WorkComicCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkComicCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkComicCategoryClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  comic<T extends Prisma.WorkComicDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.WorkComicDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__WorkComicClient<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkComicPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  category<T extends Prisma.WorkCategoryDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.WorkCategoryDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__WorkCategoryClient<
    | runtime.Types.Result.GetResult<
        Prisma.$WorkCategoryPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the WorkComicCategory model
 */
export interface WorkComicCategoryFieldRefs {
  readonly comicId: Prisma.FieldRef<'WorkComicCategory', 'Int'>;
  readonly categoryId: Prisma.FieldRef<'WorkComicCategory', 'Int'>;
  readonly isPrimary: Prisma.FieldRef<'WorkComicCategory', 'Boolean'>;
  readonly weight: Prisma.FieldRef<'WorkComicCategory', 'Int'>;
  readonly createdAt: Prisma.FieldRef<'WorkComicCategory', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'WorkComicCategory', 'DateTime'>;
}

// Custom InputTypes
/**
 * WorkComicCategory findUnique
 */
export type WorkComicCategoryFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which WorkComicCategory to fetch.
   */
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory findUniqueOrThrow
 */
export type WorkComicCategoryFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which WorkComicCategory to fetch.
   */
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory findFirst
 */
export type WorkComicCategoryFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which WorkComicCategory to fetch.
   */
  where?: Prisma.WorkComicCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkComicCategories to fetch.
   */
  orderBy?:
    | Prisma.WorkComicCategoryOrderByWithRelationInput
    | Prisma.WorkComicCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkComicCategories.
   */
  cursor?: Prisma.WorkComicCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` WorkComicCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkComicCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkComicCategories.
   */
  distinct?:
    | Prisma.WorkComicCategoryScalarFieldEnum
    | Prisma.WorkComicCategoryScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory findFirstOrThrow
 */
export type WorkComicCategoryFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which WorkComicCategory to fetch.
   */
  where?: Prisma.WorkComicCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkComicCategories to fetch.
   */
  orderBy?:
    | Prisma.WorkComicCategoryOrderByWithRelationInput
    | Prisma.WorkComicCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for WorkComicCategories.
   */
  cursor?: Prisma.WorkComicCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` WorkComicCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkComicCategories.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of WorkComicCategories.
   */
  distinct?:
    | Prisma.WorkComicCategoryScalarFieldEnum
    | Prisma.WorkComicCategoryScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory findMany
 */
export type WorkComicCategoryFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * Filter, which WorkComicCategories to fetch.
   */
  where?: Prisma.WorkComicCategoryWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of WorkComicCategories to fetch.
   */
  orderBy?:
    | Prisma.WorkComicCategoryOrderByWithRelationInput
    | Prisma.WorkComicCategoryOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing WorkComicCategories.
   */
  cursor?: Prisma.WorkComicCategoryWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `±n` WorkComicCategories from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` WorkComicCategories.
   */
  skip?: number;
  distinct?:
    | Prisma.WorkComicCategoryScalarFieldEnum
    | Prisma.WorkComicCategoryScalarFieldEnum[];
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory create
 */
export type WorkComicCategoryCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to create a WorkComicCategory.
   */
  data: Prisma.XOR<
    Prisma.WorkComicCategoryCreateInput,
    Prisma.WorkComicCategoryUncheckedCreateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory createMany
 */
export type WorkComicCategoryCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many WorkComicCategories.
   */
  data:
    | Prisma.WorkComicCategoryCreateManyInput
    | Prisma.WorkComicCategoryCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * WorkComicCategory createManyAndReturn
 */
export type WorkComicCategoryCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * The data used to create many WorkComicCategories.
   */
  data:
    | Prisma.WorkComicCategoryCreateManyInput
    | Prisma.WorkComicCategoryCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkComicCategory update
 */
export type WorkComicCategoryUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * The data needed to update a WorkComicCategory.
   */
  data: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateInput,
    Prisma.WorkComicCategoryUncheckedUpdateInput
  >;
  /**
   * Choose, which WorkComicCategory to update.
   */
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory updateMany
 */
export type WorkComicCategoryUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update WorkComicCategories.
   */
  data: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateManyMutationInput,
    Prisma.WorkComicCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkComicCategories to update
   */
  where?: Prisma.WorkComicCategoryWhereInput;
  /**
   * Limit how many WorkComicCategories to update.
   */
  limit?: number;
};

/**
 * WorkComicCategory updateManyAndReturn
 */
export type WorkComicCategoryUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * The data used to update WorkComicCategories.
   */
  data: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateManyMutationInput,
    Prisma.WorkComicCategoryUncheckedUpdateManyInput
  >;
  /**
   * Filter which WorkComicCategories to update
   */
  where?: Prisma.WorkComicCategoryWhereInput;
  /**
   * Limit how many WorkComicCategories to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * WorkComicCategory upsert
 */
export type WorkComicCategoryUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * The filter to search for the WorkComicCategory to update in case it exists.
   */
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  /**
   * In case the WorkComicCategory found by the `where` argument doesn't exist, create a new WorkComicCategory with this data.
   */
  create: Prisma.XOR<
    Prisma.WorkComicCategoryCreateInput,
    Prisma.WorkComicCategoryUncheckedCreateInput
  >;
  /**
   * In case the WorkComicCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.WorkComicCategoryUpdateInput,
    Prisma.WorkComicCategoryUncheckedUpdateInput
  >;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory delete
 */
export type WorkComicCategoryDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
  /**
   * Filter which WorkComicCategory to delete.
   */
  where: Prisma.WorkComicCategoryWhereUniqueInput;
  relationLoadStrategy?: Prisma.RelationLoadStrategy;
};

/**
 * WorkComicCategory deleteMany
 */
export type WorkComicCategoryDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which WorkComicCategories to delete
   */
  where?: Prisma.WorkComicCategoryWhereInput;
  /**
   * Limit how many WorkComicCategories to delete.
   */
  limit?: number;
};

/**
 * WorkComicCategory without action
 */
export type WorkComicCategoryDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the WorkComicCategory
   */
  select?: Prisma.WorkComicCategorySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the WorkComicCategory
   */
  omit?: Prisma.WorkComicCategoryOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkComicCategoryInclude<ExtArgs> | null;
};
