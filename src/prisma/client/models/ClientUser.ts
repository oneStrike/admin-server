
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ClientUser` model and its related types.
 *
 * 🟢 You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ClientUser
 * 
 */
export type ClientUserModel = runtime.Types.Result.DefaultSelection<Prisma.$ClientUserPayload>

export type AggregateClientUser = {
  _count: ClientUserCountAggregateOutputType | null
  _avg: ClientUserAvgAggregateOutputType | null
  _sum: ClientUserSumAggregateOutputType | null
  _min: ClientUserMinAggregateOutputType | null
  _max: ClientUserMaxAggregateOutputType | null
}

export type ClientUserAvgAggregateOutputType = {
  id: number | null
  genderType: number | null
}

export type ClientUserSumAggregateOutputType = {
  id: number | null
  genderType: number | null
}

export type ClientUserMinAggregateOutputType = {
  id: number | null
  username: string | null
  nickname: string | null
  avatarUrl: string | null
  phoneNumber: string | null
  emailAddress: string | null
  isEnabled: boolean | null
  genderType: number | null
  birthDate: Date | null
  lastLoginAt: Date | null
  lastLoginIp: string | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type ClientUserMaxAggregateOutputType = {
  id: number | null
  username: string | null
  nickname: string | null
  avatarUrl: string | null
  phoneNumber: string | null
  emailAddress: string | null
  isEnabled: boolean | null
  genderType: number | null
  birthDate: Date | null
  lastLoginAt: Date | null
  lastLoginIp: string | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type ClientUserCountAggregateOutputType = {
  id: number
  username: number
  nickname: number
  avatarUrl: number
  phoneNumber: number
  emailAddress: number
  isEnabled: number
  genderType: number
  birthDate: number
  lastLoginAt: number
  lastLoginIp: number
  createdAt: number
  updatedAt: number
  deletedAt: number
  _all: number
}


export type ClientUserAvgAggregateInputType = {
  id?: true
  genderType?: true
}

export type ClientUserSumAggregateInputType = {
  id?: true
  genderType?: true
}

export type ClientUserMinAggregateInputType = {
  id?: true
  username?: true
  nickname?: true
  avatarUrl?: true
  phoneNumber?: true
  emailAddress?: true
  isEnabled?: true
  genderType?: true
  birthDate?: true
  lastLoginAt?: true
  lastLoginIp?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type ClientUserMaxAggregateInputType = {
  id?: true
  username?: true
  nickname?: true
  avatarUrl?: true
  phoneNumber?: true
  emailAddress?: true
  isEnabled?: true
  genderType?: true
  birthDate?: true
  lastLoginAt?: true
  lastLoginIp?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type ClientUserCountAggregateInputType = {
  id?: true
  username?: true
  nickname?: true
  avatarUrl?: true
  phoneNumber?: true
  emailAddress?: true
  isEnabled?: true
  genderType?: true
  birthDate?: true
  lastLoginAt?: true
  lastLoginIp?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  _all?: true
}

export type ClientUserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ClientUser to aggregate.
   */
  where?: Prisma.ClientUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClientUsers to fetch.
   */
  orderBy?: Prisma.ClientUserOrderByWithRelationInput | Prisma.ClientUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ClientUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` ClientUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClientUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ClientUsers
  **/
  _count?: true | ClientUserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ClientUserAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ClientUserSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ClientUserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ClientUserMaxAggregateInputType
}

export type GetClientUserAggregateType<T extends ClientUserAggregateArgs> = {
      [P in keyof T & keyof AggregateClientUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClientUser[P]>
    : Prisma.GetScalarType<T[P], AggregateClientUser[P]>
}




export type ClientUserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClientUserWhereInput
  orderBy?: Prisma.ClientUserOrderByWithAggregationInput | Prisma.ClientUserOrderByWithAggregationInput[]
  by: Prisma.ClientUserScalarFieldEnum[] | Prisma.ClientUserScalarFieldEnum
  having?: Prisma.ClientUserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ClientUserCountAggregateInputType | true
  _avg?: ClientUserAvgAggregateInputType
  _sum?: ClientUserSumAggregateInputType
  _min?: ClientUserMinAggregateInputType
  _max?: ClientUserMaxAggregateInputType
}

export type ClientUserGroupByOutputType = {
  id: number
  username: string
  nickname: string | null
  avatarUrl: string | null
  phoneNumber: string | null
  emailAddress: string | null
  isEnabled: boolean
  genderType: number
  birthDate: Date | null
  lastLoginAt: Date | null
  lastLoginIp: string | null
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
  _count: ClientUserCountAggregateOutputType | null
  _avg: ClientUserAvgAggregateOutputType | null
  _sum: ClientUserSumAggregateOutputType | null
  _min: ClientUserMinAggregateOutputType | null
  _max: ClientUserMaxAggregateOutputType | null
}

type GetClientUserGroupByPayload<T extends ClientUserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ClientUserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ClientUserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClientUserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClientUserGroupByOutputType[P]>
      }
    >
  >



export type ClientUserWhereInput = {
  AND?: Prisma.ClientUserWhereInput | Prisma.ClientUserWhereInput[]
  OR?: Prisma.ClientUserWhereInput[]
  NOT?: Prisma.ClientUserWhereInput | Prisma.ClientUserWhereInput[]
  id?: Prisma.IntFilter<"ClientUser"> | number
  username?: Prisma.StringFilter<"ClientUser"> | string
  nickname?: Prisma.StringNullableFilter<"ClientUser"> | string | null
  avatarUrl?: Prisma.StringNullableFilter<"ClientUser"> | string | null
  phoneNumber?: Prisma.StringNullableFilter<"ClientUser"> | string | null
  emailAddress?: Prisma.StringNullableFilter<"ClientUser"> | string | null
  isEnabled?: Prisma.BoolFilter<"ClientUser"> | boolean
  genderType?: Prisma.IntFilter<"ClientUser"> | number
  birthDate?: Prisma.DateTimeNullableFilter<"ClientUser"> | Date | string | null
  lastLoginAt?: Prisma.DateTimeNullableFilter<"ClientUser"> | Date | string | null
  lastLoginIp?: Prisma.StringNullableFilter<"ClientUser"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ClientUser"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ClientUser"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"ClientUser"> | Date | string | null
}

export type ClientUserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  nickname?: Prisma.SortOrderInput | Prisma.SortOrder
  avatarUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  phoneNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  emailAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  genderType?: Prisma.SortOrder
  birthDate?: Prisma.SortOrderInput | Prisma.SortOrder
  lastLoginAt?: Prisma.SortOrderInput | Prisma.SortOrder
  lastLoginIp?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type ClientUserWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  username?: string
  phoneNumber?: string
  emailAddress?: string
  AND?: Prisma.ClientUserWhereInput | Prisma.ClientUserWhereInput[]
  OR?: Prisma.ClientUserWhereInput[]
  NOT?: Prisma.ClientUserWhereInput | Prisma.ClientUserWhereInput[]
  nickname?: Prisma.StringNullableFilter<"ClientUser"> | string | null
  avatarUrl?: Prisma.StringNullableFilter<"ClientUser"> | string | null
  isEnabled?: Prisma.BoolFilter<"ClientUser"> | boolean
  genderType?: Prisma.IntFilter<"ClientUser"> | number
  birthDate?: Prisma.DateTimeNullableFilter<"ClientUser"> | Date | string | null
  lastLoginAt?: Prisma.DateTimeNullableFilter<"ClientUser"> | Date | string | null
  lastLoginIp?: Prisma.StringNullableFilter<"ClientUser"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ClientUser"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ClientUser"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"ClientUser"> | Date | string | null
}, "id" | "username" | "phoneNumber" | "emailAddress">

export type ClientUserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  nickname?: Prisma.SortOrderInput | Prisma.SortOrder
  avatarUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  phoneNumber?: Prisma.SortOrderInput | Prisma.SortOrder
  emailAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  genderType?: Prisma.SortOrder
  birthDate?: Prisma.SortOrderInput | Prisma.SortOrder
  lastLoginAt?: Prisma.SortOrderInput | Prisma.SortOrder
  lastLoginIp?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ClientUserCountOrderByAggregateInput
  _avg?: Prisma.ClientUserAvgOrderByAggregateInput
  _max?: Prisma.ClientUserMaxOrderByAggregateInput
  _min?: Prisma.ClientUserMinOrderByAggregateInput
  _sum?: Prisma.ClientUserSumOrderByAggregateInput
}

export type ClientUserScalarWhereWithAggregatesInput = {
  AND?: Prisma.ClientUserScalarWhereWithAggregatesInput | Prisma.ClientUserScalarWhereWithAggregatesInput[]
  OR?: Prisma.ClientUserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ClientUserScalarWhereWithAggregatesInput | Prisma.ClientUserScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ClientUser"> | number
  username?: Prisma.StringWithAggregatesFilter<"ClientUser"> | string
  nickname?: Prisma.StringNullableWithAggregatesFilter<"ClientUser"> | string | null
  avatarUrl?: Prisma.StringNullableWithAggregatesFilter<"ClientUser"> | string | null
  phoneNumber?: Prisma.StringNullableWithAggregatesFilter<"ClientUser"> | string | null
  emailAddress?: Prisma.StringNullableWithAggregatesFilter<"ClientUser"> | string | null
  isEnabled?: Prisma.BoolWithAggregatesFilter<"ClientUser"> | boolean
  genderType?: Prisma.IntWithAggregatesFilter<"ClientUser"> | number
  birthDate?: Prisma.DateTimeNullableWithAggregatesFilter<"ClientUser"> | Date | string | null
  lastLoginAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ClientUser"> | Date | string | null
  lastLoginIp?: Prisma.StringNullableWithAggregatesFilter<"ClientUser"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ClientUser"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ClientUser"> | Date | string
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ClientUser"> | Date | string | null
}

export type ClientUserCreateInput = {
  username: string
  nickname?: string | null
  avatarUrl?: string | null
  phoneNumber?: string | null
  emailAddress?: string | null
  isEnabled?: boolean
  genderType?: number
  birthDate?: Date | string | null
  lastLoginAt?: Date | string | null
  lastLoginIp?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type ClientUserUncheckedCreateInput = {
  id?: number
  username: string
  nickname?: string | null
  avatarUrl?: string | null
  phoneNumber?: string | null
  emailAddress?: string | null
  isEnabled?: boolean
  genderType?: number
  birthDate?: Date | string | null
  lastLoginAt?: Date | string | null
  lastLoginIp?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type ClientUserUpdateInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genderType?: Prisma.IntFieldUpdateOperationsInput | number
  birthDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastLoginAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastLoginIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientUserUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genderType?: Prisma.IntFieldUpdateOperationsInput | number
  birthDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastLoginAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastLoginIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientUserCreateManyInput = {
  id?: number
  username: string
  nickname?: string | null
  avatarUrl?: string | null
  phoneNumber?: string | null
  emailAddress?: string | null
  isEnabled?: boolean
  genderType?: number
  birthDate?: Date | string | null
  lastLoginAt?: Date | string | null
  lastLoginIp?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type ClientUserUpdateManyMutationInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genderType?: Prisma.IntFieldUpdateOperationsInput | number
  birthDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastLoginAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastLoginIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientUserUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  nickname?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneNumber?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emailAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  genderType?: Prisma.IntFieldUpdateOperationsInput | number
  birthDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastLoginAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  lastLoginIp?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientUserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  nickname?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  emailAddress?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  genderType?: Prisma.SortOrder
  birthDate?: Prisma.SortOrder
  lastLoginAt?: Prisma.SortOrder
  lastLoginIp?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type ClientUserAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  genderType?: Prisma.SortOrder
}

export type ClientUserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  nickname?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  emailAddress?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  genderType?: Prisma.SortOrder
  birthDate?: Prisma.SortOrder
  lastLoginAt?: Prisma.SortOrder
  lastLoginIp?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type ClientUserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  username?: Prisma.SortOrder
  nickname?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  phoneNumber?: Prisma.SortOrder
  emailAddress?: Prisma.SortOrder
  isEnabled?: Prisma.SortOrder
  genderType?: Prisma.SortOrder
  birthDate?: Prisma.SortOrder
  lastLoginAt?: Prisma.SortOrder
  lastLoginIp?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type ClientUserSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  genderType?: Prisma.SortOrder
}



export type ClientUserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  nickname?: boolean
  avatarUrl?: boolean
  phoneNumber?: boolean
  emailAddress?: boolean
  isEnabled?: boolean
  genderType?: boolean
  birthDate?: boolean
  lastLoginAt?: boolean
  lastLoginIp?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}, ExtArgs["result"]["clientUser"]>

export type ClientUserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  nickname?: boolean
  avatarUrl?: boolean
  phoneNumber?: boolean
  emailAddress?: boolean
  isEnabled?: boolean
  genderType?: boolean
  birthDate?: boolean
  lastLoginAt?: boolean
  lastLoginIp?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}, ExtArgs["result"]["clientUser"]>

export type ClientUserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  username?: boolean
  nickname?: boolean
  avatarUrl?: boolean
  phoneNumber?: boolean
  emailAddress?: boolean
  isEnabled?: boolean
  genderType?: boolean
  birthDate?: boolean
  lastLoginAt?: boolean
  lastLoginIp?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}, ExtArgs["result"]["clientUser"]>

export type ClientUserSelectScalar = {
  id?: boolean
  username?: boolean
  nickname?: boolean
  avatarUrl?: boolean
  phoneNumber?: boolean
  emailAddress?: boolean
  isEnabled?: boolean
  genderType?: boolean
  birthDate?: boolean
  lastLoginAt?: boolean
  lastLoginIp?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type ClientUserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "username" | "nickname" | "avatarUrl" | "phoneNumber" | "emailAddress" | "isEnabled" | "genderType" | "birthDate" | "lastLoginAt" | "lastLoginIp" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["clientUser"]>

export type $ClientUserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ClientUser"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * 主键ID
     */
    id: number
    /**
     * 用户名（登录账号）
     */
    username: string
    /**
     * 用户昵称（显示名称）
     */
    nickname: string | null
    /**
     * 头像URL地址
     */
    avatarUrl: string | null
    /**
     * 手机号码
     */
    phoneNumber: string | null
    /**
     * 邮箱地址
     */
    emailAddress: string | null
    /**
     * 账户状态（true:启用, false:禁用）
     */
    isEnabled: boolean
    /**
     * 性别类型（0:未知, 1:男性, 2:女性, 3:其他）
     */
    genderType: number
    /**
     * 出生日期
     */
    birthDate: Date | null
    /**
     * 最后登录时间
     */
    lastLoginAt: Date | null
    /**
     * 最后登录IP地址
     */
    lastLoginIp: string | null
    /**
     * 账户创建时间
     */
    createdAt: Date
    /**
     * 账户更新时间
     */
    updatedAt: Date
    /**
     * 软删除时间
     */
    deletedAt: Date | null
  }, ExtArgs["result"]["clientUser"]>
  composites: {}
}

export type ClientUserGetPayload<S extends boolean | null | undefined | ClientUserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ClientUserPayload, S>

export type ClientUserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ClientUserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ClientUserCountAggregateInputType | true
  }

export interface ClientUserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientUser'], meta: { name: 'ClientUser' } }
  /**
   * Find zero or one ClientUser that matches the filter.
   * @param {ClientUserFindUniqueArgs} args - Arguments to find a ClientUser
   * @example
   * // Get one ClientUser
   * const clientUser = await prisma.clientUser.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClientUserFindUniqueArgs>(args: Prisma.SelectSubset<T, ClientUserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ClientUserClient<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ClientUser that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClientUserFindUniqueOrThrowArgs} args - Arguments to find a ClientUser
   * @example
   * // Get one ClientUser
   * const clientUser = await prisma.clientUser.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClientUserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ClientUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClientUserClient<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ClientUser that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientUserFindFirstArgs} args - Arguments to find a ClientUser
   * @example
   * // Get one ClientUser
   * const clientUser = await prisma.clientUser.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClientUserFindFirstArgs>(args?: Prisma.SelectSubset<T, ClientUserFindFirstArgs<ExtArgs>>): Prisma.Prisma__ClientUserClient<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ClientUser that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientUserFindFirstOrThrowArgs} args - Arguments to find a ClientUser
   * @example
   * // Get one ClientUser
   * const clientUser = await prisma.clientUser.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClientUserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ClientUserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClientUserClient<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ClientUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientUserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ClientUsers
   * const clientUsers = await prisma.clientUser.findMany()
   * 
   * // Get first 10 ClientUsers
   * const clientUsers = await prisma.clientUser.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const clientUserWithIdOnly = await prisma.clientUser.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ClientUserFindManyArgs>(args?: Prisma.SelectSubset<T, ClientUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ClientUser.
   * @param {ClientUserCreateArgs} args - Arguments to create a ClientUser.
   * @example
   * // Create one ClientUser
   * const ClientUser = await prisma.clientUser.create({
   *   data: {
   *     // ... data to create a ClientUser
   *   }
   * })
   * 
   */
  create<T extends ClientUserCreateArgs>(args: Prisma.SelectSubset<T, ClientUserCreateArgs<ExtArgs>>): Prisma.Prisma__ClientUserClient<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ClientUsers.
   * @param {ClientUserCreateManyArgs} args - Arguments to create many ClientUsers.
   * @example
   * // Create many ClientUsers
   * const clientUser = await prisma.clientUser.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ClientUserCreateManyArgs>(args?: Prisma.SelectSubset<T, ClientUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ClientUsers and returns the data saved in the database.
   * @param {ClientUserCreateManyAndReturnArgs} args - Arguments to create many ClientUsers.
   * @example
   * // Create many ClientUsers
   * const clientUser = await prisma.clientUser.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ClientUsers and only return the `id`
   * const clientUserWithIdOnly = await prisma.clientUser.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ClientUserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ClientUserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ClientUser.
   * @param {ClientUserDeleteArgs} args - Arguments to delete one ClientUser.
   * @example
   * // Delete one ClientUser
   * const ClientUser = await prisma.clientUser.delete({
   *   where: {
   *     // ... filter to delete one ClientUser
   *   }
   * })
   * 
   */
  delete<T extends ClientUserDeleteArgs>(args: Prisma.SelectSubset<T, ClientUserDeleteArgs<ExtArgs>>): Prisma.Prisma__ClientUserClient<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ClientUser.
   * @param {ClientUserUpdateArgs} args - Arguments to update one ClientUser.
   * @example
   * // Update one ClientUser
   * const clientUser = await prisma.clientUser.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ClientUserUpdateArgs>(args: Prisma.SelectSubset<T, ClientUserUpdateArgs<ExtArgs>>): Prisma.Prisma__ClientUserClient<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ClientUsers.
   * @param {ClientUserDeleteManyArgs} args - Arguments to filter ClientUsers to delete.
   * @example
   * // Delete a few ClientUsers
   * const { count } = await prisma.clientUser.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ClientUserDeleteManyArgs>(args?: Prisma.SelectSubset<T, ClientUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ClientUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientUserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ClientUsers
   * const clientUser = await prisma.clientUser.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ClientUserUpdateManyArgs>(args: Prisma.SelectSubset<T, ClientUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ClientUsers and returns the data updated in the database.
   * @param {ClientUserUpdateManyAndReturnArgs} args - Arguments to update many ClientUsers.
   * @example
   * // Update many ClientUsers
   * const clientUser = await prisma.clientUser.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ClientUsers and only return the `id`
   * const clientUserWithIdOnly = await prisma.clientUser.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ClientUserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ClientUserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ClientUser.
   * @param {ClientUserUpsertArgs} args - Arguments to update or create a ClientUser.
   * @example
   * // Update or create a ClientUser
   * const clientUser = await prisma.clientUser.upsert({
   *   create: {
   *     // ... data to create a ClientUser
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ClientUser we want to update
   *   }
   * })
   */
  upsert<T extends ClientUserUpsertArgs>(args: Prisma.SelectSubset<T, ClientUserUpsertArgs<ExtArgs>>): Prisma.Prisma__ClientUserClient<runtime.Types.Result.GetResult<Prisma.$ClientUserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ClientUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientUserCountArgs} args - Arguments to filter ClientUsers to count.
   * @example
   * // Count the number of ClientUsers
   * const count = await prisma.clientUser.count({
   *   where: {
   *     // ... the filter for the ClientUsers we want to count
   *   }
   * })
  **/
  count<T extends ClientUserCountArgs>(
    args?: Prisma.Subset<T, ClientUserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ClientUserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ClientUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ClientUserAggregateArgs>(args: Prisma.Subset<T, ClientUserAggregateArgs>): Prisma.PrismaPromise<GetClientUserAggregateType<T>>

  /**
   * Group by ClientUser.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientUserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ClientUserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClientUserGroupByArgs['orderBy'] }
      : { orderBy?: ClientUserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ClientUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ClientUser model
 */
readonly fields: ClientUserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ClientUser.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClientUserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ClientUser model
 */
export interface ClientUserFieldRefs {
  readonly id: Prisma.FieldRef<"ClientUser", 'Int'>
  readonly username: Prisma.FieldRef<"ClientUser", 'String'>
  readonly nickname: Prisma.FieldRef<"ClientUser", 'String'>
  readonly avatarUrl: Prisma.FieldRef<"ClientUser", 'String'>
  readonly phoneNumber: Prisma.FieldRef<"ClientUser", 'String'>
  readonly emailAddress: Prisma.FieldRef<"ClientUser", 'String'>
  readonly isEnabled: Prisma.FieldRef<"ClientUser", 'Boolean'>
  readonly genderType: Prisma.FieldRef<"ClientUser", 'Int'>
  readonly birthDate: Prisma.FieldRef<"ClientUser", 'DateTime'>
  readonly lastLoginAt: Prisma.FieldRef<"ClientUser", 'DateTime'>
  readonly lastLoginIp: Prisma.FieldRef<"ClientUser", 'String'>
  readonly createdAt: Prisma.FieldRef<"ClientUser", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ClientUser", 'DateTime'>
  readonly deletedAt: Prisma.FieldRef<"ClientUser", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ClientUser findUnique
 */
export type ClientUserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * Filter, which ClientUser to fetch.
   */
  where: Prisma.ClientUserWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser findUniqueOrThrow
 */
export type ClientUserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * Filter, which ClientUser to fetch.
   */
  where: Prisma.ClientUserWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser findFirst
 */
export type ClientUserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * Filter, which ClientUser to fetch.
   */
  where?: Prisma.ClientUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClientUsers to fetch.
   */
  orderBy?: Prisma.ClientUserOrderByWithRelationInput | Prisma.ClientUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ClientUsers.
   */
  cursor?: Prisma.ClientUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` ClientUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClientUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ClientUsers.
   */
  distinct?: Prisma.ClientUserScalarFieldEnum | Prisma.ClientUserScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser findFirstOrThrow
 */
export type ClientUserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * Filter, which ClientUser to fetch.
   */
  where?: Prisma.ClientUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClientUsers to fetch.
   */
  orderBy?: Prisma.ClientUserOrderByWithRelationInput | Prisma.ClientUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ClientUsers.
   */
  cursor?: Prisma.ClientUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` ClientUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClientUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ClientUsers.
   */
  distinct?: Prisma.ClientUserScalarFieldEnum | Prisma.ClientUserScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser findMany
 */
export type ClientUserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * Filter, which ClientUsers to fetch.
   */
  where?: Prisma.ClientUserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClientUsers to fetch.
   */
  orderBy?: Prisma.ClientUserOrderByWithRelationInput | Prisma.ClientUserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ClientUsers.
   */
  cursor?: Prisma.ClientUserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` ClientUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClientUsers.
   */
  skip?: number
  distinct?: Prisma.ClientUserScalarFieldEnum | Prisma.ClientUserScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser create
 */
export type ClientUserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * The data needed to create a ClientUser.
   */
  data: Prisma.XOR<Prisma.ClientUserCreateInput, Prisma.ClientUserUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser createMany
 */
export type ClientUserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ClientUsers.
   */
  data: Prisma.ClientUserCreateManyInput | Prisma.ClientUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ClientUser createManyAndReturn
 */
export type ClientUserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * The data used to create many ClientUsers.
   */
  data: Prisma.ClientUserCreateManyInput | Prisma.ClientUserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ClientUser update
 */
export type ClientUserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * The data needed to update a ClientUser.
   */
  data: Prisma.XOR<Prisma.ClientUserUpdateInput, Prisma.ClientUserUncheckedUpdateInput>
  /**
   * Choose, which ClientUser to update.
   */
  where: Prisma.ClientUserWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser updateMany
 */
export type ClientUserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ClientUsers.
   */
  data: Prisma.XOR<Prisma.ClientUserUpdateManyMutationInput, Prisma.ClientUserUncheckedUpdateManyInput>
  /**
   * Filter which ClientUsers to update
   */
  where?: Prisma.ClientUserWhereInput
  /**
   * Limit how many ClientUsers to update.
   */
  limit?: number
}

/**
 * ClientUser updateManyAndReturn
 */
export type ClientUserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * The data used to update ClientUsers.
   */
  data: Prisma.XOR<Prisma.ClientUserUpdateManyMutationInput, Prisma.ClientUserUncheckedUpdateManyInput>
  /**
   * Filter which ClientUsers to update
   */
  where?: Prisma.ClientUserWhereInput
  /**
   * Limit how many ClientUsers to update.
   */
  limit?: number
}

/**
 * ClientUser upsert
 */
export type ClientUserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * The filter to search for the ClientUser to update in case it exists.
   */
  where: Prisma.ClientUserWhereUniqueInput
  /**
   * In case the ClientUser found by the `where` argument doesn't exist, create a new ClientUser with this data.
   */
  create: Prisma.XOR<Prisma.ClientUserCreateInput, Prisma.ClientUserUncheckedCreateInput>
  /**
   * In case the ClientUser was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ClientUserUpdateInput, Prisma.ClientUserUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser delete
 */
export type ClientUserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
  /**
   * Filter which ClientUser to delete.
   */
  where: Prisma.ClientUserWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientUser deleteMany
 */
export type ClientUserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ClientUsers to delete
   */
  where?: Prisma.ClientUserWhereInput
  /**
   * Limit how many ClientUsers to delete.
   */
  limit?: number
}

/**
 * ClientUser without action
 */
export type ClientUserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientUser
   */
  select?: Prisma.ClientUserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientUser
   */
  omit?: Prisma.ClientUserOmit<ExtArgs> | null
}
