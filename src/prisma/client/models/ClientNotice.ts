
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ClientNotice` model and its related types.
 *
 * 🟢 You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ClientNotice
 * 
 */
export type ClientNoticeModel = runtime.Types.Result.DefaultSelection<Prisma.$ClientNoticePayload>

export type AggregateClientNotice = {
  _count: ClientNoticeCountAggregateOutputType | null
  _avg: ClientNoticeAvgAggregateOutputType | null
  _sum: ClientNoticeSumAggregateOutputType | null
  _min: ClientNoticeMinAggregateOutputType | null
  _max: ClientNoticeMaxAggregateOutputType | null
}

export type ClientNoticeAvgAggregateOutputType = {
  id: number | null
  noticeType: number | null
  priorityLevel: number | null
  enablePlatform: number | null
  order: number | null
  readCount: number | null
}

export type ClientNoticeSumAggregateOutputType = {
  id: number | null
  noticeType: number | null
  priorityLevel: number | null
  enablePlatform: number | null
  order: number | null
  readCount: number | null
}

export type ClientNoticeMinAggregateOutputType = {
  id: number | null
  title: string | null
  content: string | null
  noticeType: number | null
  priorityLevel: number | null
  publishStartTime: Date | null
  publishEndTime: Date | null
  pageCode: string | null
  popupBackgroundImage: string | null
  isPublished: boolean | null
  enablePlatform: number | null
  isPinned: boolean | null
  showAsPopup: boolean | null
  order: number | null
  readCount: number | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type ClientNoticeMaxAggregateOutputType = {
  id: number | null
  title: string | null
  content: string | null
  noticeType: number | null
  priorityLevel: number | null
  publishStartTime: Date | null
  publishEndTime: Date | null
  pageCode: string | null
  popupBackgroundImage: string | null
  isPublished: boolean | null
  enablePlatform: number | null
  isPinned: boolean | null
  showAsPopup: boolean | null
  order: number | null
  readCount: number | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type ClientNoticeCountAggregateOutputType = {
  id: number
  title: number
  content: number
  noticeType: number
  priorityLevel: number
  publishStartTime: number
  publishEndTime: number
  pageCode: number
  popupBackgroundImage: number
  isPublished: number
  enablePlatform: number
  isPinned: number
  showAsPopup: number
  order: number
  readCount: number
  createdAt: number
  updatedAt: number
  deletedAt: number
  _all: number
}


export type ClientNoticeAvgAggregateInputType = {
  id?: true
  noticeType?: true
  priorityLevel?: true
  enablePlatform?: true
  order?: true
  readCount?: true
}

export type ClientNoticeSumAggregateInputType = {
  id?: true
  noticeType?: true
  priorityLevel?: true
  enablePlatform?: true
  order?: true
  readCount?: true
}

export type ClientNoticeMinAggregateInputType = {
  id?: true
  title?: true
  content?: true
  noticeType?: true
  priorityLevel?: true
  publishStartTime?: true
  publishEndTime?: true
  pageCode?: true
  popupBackgroundImage?: true
  isPublished?: true
  enablePlatform?: true
  isPinned?: true
  showAsPopup?: true
  order?: true
  readCount?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type ClientNoticeMaxAggregateInputType = {
  id?: true
  title?: true
  content?: true
  noticeType?: true
  priorityLevel?: true
  publishStartTime?: true
  publishEndTime?: true
  pageCode?: true
  popupBackgroundImage?: true
  isPublished?: true
  enablePlatform?: true
  isPinned?: true
  showAsPopup?: true
  order?: true
  readCount?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type ClientNoticeCountAggregateInputType = {
  id?: true
  title?: true
  content?: true
  noticeType?: true
  priorityLevel?: true
  publishStartTime?: true
  publishEndTime?: true
  pageCode?: true
  popupBackgroundImage?: true
  isPublished?: true
  enablePlatform?: true
  isPinned?: true
  showAsPopup?: true
  order?: true
  readCount?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  _all?: true
}

export type ClientNoticeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ClientNotice to aggregate.
   */
  where?: Prisma.ClientNoticeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClientNotices to fetch.
   */
  orderBy?: Prisma.ClientNoticeOrderByWithRelationInput | Prisma.ClientNoticeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ClientNoticeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` ClientNotices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClientNotices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ClientNotices
  **/
  _count?: true | ClientNoticeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ClientNoticeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ClientNoticeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ClientNoticeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ClientNoticeMaxAggregateInputType
}

export type GetClientNoticeAggregateType<T extends ClientNoticeAggregateArgs> = {
      [P in keyof T & keyof AggregateClientNotice]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClientNotice[P]>
    : Prisma.GetScalarType<T[P], AggregateClientNotice[P]>
}




export type ClientNoticeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClientNoticeWhereInput
  orderBy?: Prisma.ClientNoticeOrderByWithAggregationInput | Prisma.ClientNoticeOrderByWithAggregationInput[]
  by: Prisma.ClientNoticeScalarFieldEnum[] | Prisma.ClientNoticeScalarFieldEnum
  having?: Prisma.ClientNoticeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ClientNoticeCountAggregateInputType | true
  _avg?: ClientNoticeAvgAggregateInputType
  _sum?: ClientNoticeSumAggregateInputType
  _min?: ClientNoticeMinAggregateInputType
  _max?: ClientNoticeMaxAggregateInputType
}

export type ClientNoticeGroupByOutputType = {
  id: number
  title: string
  content: string
  noticeType: number
  priorityLevel: number
  publishStartTime: Date | null
  publishEndTime: Date | null
  pageCode: string | null
  popupBackgroundImage: string | null
  isPublished: boolean
  enablePlatform: number
  isPinned: boolean
  showAsPopup: boolean
  order: number
  readCount: number
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
  _count: ClientNoticeCountAggregateOutputType | null
  _avg: ClientNoticeAvgAggregateOutputType | null
  _sum: ClientNoticeSumAggregateOutputType | null
  _min: ClientNoticeMinAggregateOutputType | null
  _max: ClientNoticeMaxAggregateOutputType | null
}

type GetClientNoticeGroupByPayload<T extends ClientNoticeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ClientNoticeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ClientNoticeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ClientNoticeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ClientNoticeGroupByOutputType[P]>
      }
    >
  >



export type ClientNoticeWhereInput = {
  AND?: Prisma.ClientNoticeWhereInput | Prisma.ClientNoticeWhereInput[]
  OR?: Prisma.ClientNoticeWhereInput[]
  NOT?: Prisma.ClientNoticeWhereInput | Prisma.ClientNoticeWhereInput[]
  id?: Prisma.IntFilter<"ClientNotice"> | number
  title?: Prisma.StringFilter<"ClientNotice"> | string
  content?: Prisma.StringFilter<"ClientNotice"> | string
  noticeType?: Prisma.IntFilter<"ClientNotice"> | number
  priorityLevel?: Prisma.IntFilter<"ClientNotice"> | number
  publishStartTime?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
  publishEndTime?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
  pageCode?: Prisma.StringNullableFilter<"ClientNotice"> | string | null
  popupBackgroundImage?: Prisma.StringNullableFilter<"ClientNotice"> | string | null
  isPublished?: Prisma.BoolFilter<"ClientNotice"> | boolean
  enablePlatform?: Prisma.IntFilter<"ClientNotice"> | number
  isPinned?: Prisma.BoolFilter<"ClientNotice"> | boolean
  showAsPopup?: Prisma.BoolFilter<"ClientNotice"> | boolean
  order?: Prisma.IntFilter<"ClientNotice"> | number
  readCount?: Prisma.IntFilter<"ClientNotice"> | number
  createdAt?: Prisma.DateTimeFilter<"ClientNotice"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ClientNotice"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
  clientPage?: Prisma.XOR<Prisma.ClientPageConfigNullableScalarRelationFilter, Prisma.ClientPageConfigWhereInput> | null
}

export type ClientNoticeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priorityLevel?: Prisma.SortOrder
  publishStartTime?: Prisma.SortOrderInput | Prisma.SortOrder
  publishEndTime?: Prisma.SortOrderInput | Prisma.SortOrder
  pageCode?: Prisma.SortOrderInput | Prisma.SortOrder
  popupBackgroundImage?: Prisma.SortOrderInput | Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  enablePlatform?: Prisma.SortOrder
  isPinned?: Prisma.SortOrder
  showAsPopup?: Prisma.SortOrder
  order?: Prisma.SortOrder
  readCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  clientPage?: Prisma.ClientPageConfigOrderByWithRelationInput
}

export type ClientNoticeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ClientNoticeWhereInput | Prisma.ClientNoticeWhereInput[]
  OR?: Prisma.ClientNoticeWhereInput[]
  NOT?: Prisma.ClientNoticeWhereInput | Prisma.ClientNoticeWhereInput[]
  title?: Prisma.StringFilter<"ClientNotice"> | string
  content?: Prisma.StringFilter<"ClientNotice"> | string
  noticeType?: Prisma.IntFilter<"ClientNotice"> | number
  priorityLevel?: Prisma.IntFilter<"ClientNotice"> | number
  publishStartTime?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
  publishEndTime?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
  pageCode?: Prisma.StringNullableFilter<"ClientNotice"> | string | null
  popupBackgroundImage?: Prisma.StringNullableFilter<"ClientNotice"> | string | null
  isPublished?: Prisma.BoolFilter<"ClientNotice"> | boolean
  enablePlatform?: Prisma.IntFilter<"ClientNotice"> | number
  isPinned?: Prisma.BoolFilter<"ClientNotice"> | boolean
  showAsPopup?: Prisma.BoolFilter<"ClientNotice"> | boolean
  order?: Prisma.IntFilter<"ClientNotice"> | number
  readCount?: Prisma.IntFilter<"ClientNotice"> | number
  createdAt?: Prisma.DateTimeFilter<"ClientNotice"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ClientNotice"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
  clientPage?: Prisma.XOR<Prisma.ClientPageConfigNullableScalarRelationFilter, Prisma.ClientPageConfigWhereInput> | null
}, "id">

export type ClientNoticeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priorityLevel?: Prisma.SortOrder
  publishStartTime?: Prisma.SortOrderInput | Prisma.SortOrder
  publishEndTime?: Prisma.SortOrderInput | Prisma.SortOrder
  pageCode?: Prisma.SortOrderInput | Prisma.SortOrder
  popupBackgroundImage?: Prisma.SortOrderInput | Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  enablePlatform?: Prisma.SortOrder
  isPinned?: Prisma.SortOrder
  showAsPopup?: Prisma.SortOrder
  order?: Prisma.SortOrder
  readCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ClientNoticeCountOrderByAggregateInput
  _avg?: Prisma.ClientNoticeAvgOrderByAggregateInput
  _max?: Prisma.ClientNoticeMaxOrderByAggregateInput
  _min?: Prisma.ClientNoticeMinOrderByAggregateInput
  _sum?: Prisma.ClientNoticeSumOrderByAggregateInput
}

export type ClientNoticeScalarWhereWithAggregatesInput = {
  AND?: Prisma.ClientNoticeScalarWhereWithAggregatesInput | Prisma.ClientNoticeScalarWhereWithAggregatesInput[]
  OR?: Prisma.ClientNoticeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ClientNoticeScalarWhereWithAggregatesInput | Prisma.ClientNoticeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ClientNotice"> | number
  title?: Prisma.StringWithAggregatesFilter<"ClientNotice"> | string
  content?: Prisma.StringWithAggregatesFilter<"ClientNotice"> | string
  noticeType?: Prisma.IntWithAggregatesFilter<"ClientNotice"> | number
  priorityLevel?: Prisma.IntWithAggregatesFilter<"ClientNotice"> | number
  publishStartTime?: Prisma.DateTimeNullableWithAggregatesFilter<"ClientNotice"> | Date | string | null
  publishEndTime?: Prisma.DateTimeNullableWithAggregatesFilter<"ClientNotice"> | Date | string | null
  pageCode?: Prisma.StringNullableWithAggregatesFilter<"ClientNotice"> | string | null
  popupBackgroundImage?: Prisma.StringNullableWithAggregatesFilter<"ClientNotice"> | string | null
  isPublished?: Prisma.BoolWithAggregatesFilter<"ClientNotice"> | boolean
  enablePlatform?: Prisma.IntWithAggregatesFilter<"ClientNotice"> | number
  isPinned?: Prisma.BoolWithAggregatesFilter<"ClientNotice"> | boolean
  showAsPopup?: Prisma.BoolWithAggregatesFilter<"ClientNotice"> | boolean
  order?: Prisma.IntWithAggregatesFilter<"ClientNotice"> | number
  readCount?: Prisma.IntWithAggregatesFilter<"ClientNotice"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ClientNotice"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ClientNotice"> | Date | string
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ClientNotice"> | Date | string | null
}

export type ClientNoticeCreateInput = {
  title: string
  content: string
  noticeType?: number
  priorityLevel?: number
  publishStartTime?: Date | string | null
  publishEndTime?: Date | string | null
  popupBackgroundImage?: string | null
  isPublished?: boolean
  enablePlatform: number
  isPinned?: boolean
  showAsPopup?: boolean
  order?: number
  readCount?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
  clientPage?: Prisma.ClientPageConfigCreateNestedOneWithoutNoticesInput
}

export type ClientNoticeUncheckedCreateInput = {
  id?: number
  title: string
  content: string
  noticeType?: number
  priorityLevel?: number
  publishStartTime?: Date | string | null
  publishEndTime?: Date | string | null
  pageCode?: string | null
  popupBackgroundImage?: string | null
  isPublished?: boolean
  enablePlatform: number
  isPinned?: boolean
  showAsPopup?: boolean
  order?: number
  readCount?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type ClientNoticeUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  noticeType?: Prisma.IntFieldUpdateOperationsInput | number
  priorityLevel?: Prisma.IntFieldUpdateOperationsInput | number
  publishStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishEndTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  popupBackgroundImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enablePlatform?: Prisma.IntFieldUpdateOperationsInput | number
  isPinned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  showAsPopup?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  readCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clientPage?: Prisma.ClientPageConfigUpdateOneWithoutNoticesNestedInput
}

export type ClientNoticeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  noticeType?: Prisma.IntFieldUpdateOperationsInput | number
  priorityLevel?: Prisma.IntFieldUpdateOperationsInput | number
  publishStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishEndTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pageCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  popupBackgroundImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enablePlatform?: Prisma.IntFieldUpdateOperationsInput | number
  isPinned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  showAsPopup?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  readCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientNoticeCreateManyInput = {
  id?: number
  title: string
  content: string
  noticeType?: number
  priorityLevel?: number
  publishStartTime?: Date | string | null
  publishEndTime?: Date | string | null
  pageCode?: string | null
  popupBackgroundImage?: string | null
  isPublished?: boolean
  enablePlatform: number
  isPinned?: boolean
  showAsPopup?: boolean
  order?: number
  readCount?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type ClientNoticeUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  noticeType?: Prisma.IntFieldUpdateOperationsInput | number
  priorityLevel?: Prisma.IntFieldUpdateOperationsInput | number
  publishStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishEndTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  popupBackgroundImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enablePlatform?: Prisma.IntFieldUpdateOperationsInput | number
  isPinned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  showAsPopup?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  readCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientNoticeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  noticeType?: Prisma.IntFieldUpdateOperationsInput | number
  priorityLevel?: Prisma.IntFieldUpdateOperationsInput | number
  publishStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishEndTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  pageCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  popupBackgroundImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enablePlatform?: Prisma.IntFieldUpdateOperationsInput | number
  isPinned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  showAsPopup?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  readCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientNoticeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priorityLevel?: Prisma.SortOrder
  publishStartTime?: Prisma.SortOrder
  publishEndTime?: Prisma.SortOrder
  pageCode?: Prisma.SortOrder
  popupBackgroundImage?: Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  enablePlatform?: Prisma.SortOrder
  isPinned?: Prisma.SortOrder
  showAsPopup?: Prisma.SortOrder
  order?: Prisma.SortOrder
  readCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type ClientNoticeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priorityLevel?: Prisma.SortOrder
  enablePlatform?: Prisma.SortOrder
  order?: Prisma.SortOrder
  readCount?: Prisma.SortOrder
}

export type ClientNoticeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priorityLevel?: Prisma.SortOrder
  publishStartTime?: Prisma.SortOrder
  publishEndTime?: Prisma.SortOrder
  pageCode?: Prisma.SortOrder
  popupBackgroundImage?: Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  enablePlatform?: Prisma.SortOrder
  isPinned?: Prisma.SortOrder
  showAsPopup?: Prisma.SortOrder
  order?: Prisma.SortOrder
  readCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type ClientNoticeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priorityLevel?: Prisma.SortOrder
  publishStartTime?: Prisma.SortOrder
  publishEndTime?: Prisma.SortOrder
  pageCode?: Prisma.SortOrder
  popupBackgroundImage?: Prisma.SortOrder
  isPublished?: Prisma.SortOrder
  enablePlatform?: Prisma.SortOrder
  isPinned?: Prisma.SortOrder
  showAsPopup?: Prisma.SortOrder
  order?: Prisma.SortOrder
  readCount?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type ClientNoticeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  noticeType?: Prisma.SortOrder
  priorityLevel?: Prisma.SortOrder
  enablePlatform?: Prisma.SortOrder
  order?: Prisma.SortOrder
  readCount?: Prisma.SortOrder
}

export type ClientNoticeListRelationFilter = {
  every?: Prisma.ClientNoticeWhereInput
  some?: Prisma.ClientNoticeWhereInput
  none?: Prisma.ClientNoticeWhereInput
}

export type ClientNoticeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ClientNoticeCreateNestedManyWithoutClientPageInput = {
  create?: Prisma.XOR<Prisma.ClientNoticeCreateWithoutClientPageInput, Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput> | Prisma.ClientNoticeCreateWithoutClientPageInput[] | Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput[]
  connectOrCreate?: Prisma.ClientNoticeCreateOrConnectWithoutClientPageInput | Prisma.ClientNoticeCreateOrConnectWithoutClientPageInput[]
  createMany?: Prisma.ClientNoticeCreateManyClientPageInputEnvelope
  connect?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
}

export type ClientNoticeUncheckedCreateNestedManyWithoutClientPageInput = {
  create?: Prisma.XOR<Prisma.ClientNoticeCreateWithoutClientPageInput, Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput> | Prisma.ClientNoticeCreateWithoutClientPageInput[] | Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput[]
  connectOrCreate?: Prisma.ClientNoticeCreateOrConnectWithoutClientPageInput | Prisma.ClientNoticeCreateOrConnectWithoutClientPageInput[]
  createMany?: Prisma.ClientNoticeCreateManyClientPageInputEnvelope
  connect?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
}

export type ClientNoticeUpdateManyWithoutClientPageNestedInput = {
  create?: Prisma.XOR<Prisma.ClientNoticeCreateWithoutClientPageInput, Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput> | Prisma.ClientNoticeCreateWithoutClientPageInput[] | Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput[]
  connectOrCreate?: Prisma.ClientNoticeCreateOrConnectWithoutClientPageInput | Prisma.ClientNoticeCreateOrConnectWithoutClientPageInput[]
  upsert?: Prisma.ClientNoticeUpsertWithWhereUniqueWithoutClientPageInput | Prisma.ClientNoticeUpsertWithWhereUniqueWithoutClientPageInput[]
  createMany?: Prisma.ClientNoticeCreateManyClientPageInputEnvelope
  set?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
  disconnect?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
  delete?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
  connect?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
  update?: Prisma.ClientNoticeUpdateWithWhereUniqueWithoutClientPageInput | Prisma.ClientNoticeUpdateWithWhereUniqueWithoutClientPageInput[]
  updateMany?: Prisma.ClientNoticeUpdateManyWithWhereWithoutClientPageInput | Prisma.ClientNoticeUpdateManyWithWhereWithoutClientPageInput[]
  deleteMany?: Prisma.ClientNoticeScalarWhereInput | Prisma.ClientNoticeScalarWhereInput[]
}

export type ClientNoticeUncheckedUpdateManyWithoutClientPageNestedInput = {
  create?: Prisma.XOR<Prisma.ClientNoticeCreateWithoutClientPageInput, Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput> | Prisma.ClientNoticeCreateWithoutClientPageInput[] | Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput[]
  connectOrCreate?: Prisma.ClientNoticeCreateOrConnectWithoutClientPageInput | Prisma.ClientNoticeCreateOrConnectWithoutClientPageInput[]
  upsert?: Prisma.ClientNoticeUpsertWithWhereUniqueWithoutClientPageInput | Prisma.ClientNoticeUpsertWithWhereUniqueWithoutClientPageInput[]
  createMany?: Prisma.ClientNoticeCreateManyClientPageInputEnvelope
  set?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
  disconnect?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
  delete?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
  connect?: Prisma.ClientNoticeWhereUniqueInput | Prisma.ClientNoticeWhereUniqueInput[]
  update?: Prisma.ClientNoticeUpdateWithWhereUniqueWithoutClientPageInput | Prisma.ClientNoticeUpdateWithWhereUniqueWithoutClientPageInput[]
  updateMany?: Prisma.ClientNoticeUpdateManyWithWhereWithoutClientPageInput | Prisma.ClientNoticeUpdateManyWithWhereWithoutClientPageInput[]
  deleteMany?: Prisma.ClientNoticeScalarWhereInput | Prisma.ClientNoticeScalarWhereInput[]
}

export type ClientNoticeCreateWithoutClientPageInput = {
  title: string
  content: string
  noticeType?: number
  priorityLevel?: number
  publishStartTime?: Date | string | null
  publishEndTime?: Date | string | null
  popupBackgroundImage?: string | null
  isPublished?: boolean
  enablePlatform: number
  isPinned?: boolean
  showAsPopup?: boolean
  order?: number
  readCount?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type ClientNoticeUncheckedCreateWithoutClientPageInput = {
  id?: number
  title: string
  content: string
  noticeType?: number
  priorityLevel?: number
  publishStartTime?: Date | string | null
  publishEndTime?: Date | string | null
  popupBackgroundImage?: string | null
  isPublished?: boolean
  enablePlatform: number
  isPinned?: boolean
  showAsPopup?: boolean
  order?: number
  readCount?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type ClientNoticeCreateOrConnectWithoutClientPageInput = {
  where: Prisma.ClientNoticeWhereUniqueInput
  create: Prisma.XOR<Prisma.ClientNoticeCreateWithoutClientPageInput, Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput>
}

export type ClientNoticeCreateManyClientPageInputEnvelope = {
  data: Prisma.ClientNoticeCreateManyClientPageInput | Prisma.ClientNoticeCreateManyClientPageInput[]
  skipDuplicates?: boolean
}

export type ClientNoticeUpsertWithWhereUniqueWithoutClientPageInput = {
  where: Prisma.ClientNoticeWhereUniqueInput
  update: Prisma.XOR<Prisma.ClientNoticeUpdateWithoutClientPageInput, Prisma.ClientNoticeUncheckedUpdateWithoutClientPageInput>
  create: Prisma.XOR<Prisma.ClientNoticeCreateWithoutClientPageInput, Prisma.ClientNoticeUncheckedCreateWithoutClientPageInput>
}

export type ClientNoticeUpdateWithWhereUniqueWithoutClientPageInput = {
  where: Prisma.ClientNoticeWhereUniqueInput
  data: Prisma.XOR<Prisma.ClientNoticeUpdateWithoutClientPageInput, Prisma.ClientNoticeUncheckedUpdateWithoutClientPageInput>
}

export type ClientNoticeUpdateManyWithWhereWithoutClientPageInput = {
  where: Prisma.ClientNoticeScalarWhereInput
  data: Prisma.XOR<Prisma.ClientNoticeUpdateManyMutationInput, Prisma.ClientNoticeUncheckedUpdateManyWithoutClientPageInput>
}

export type ClientNoticeScalarWhereInput = {
  AND?: Prisma.ClientNoticeScalarWhereInput | Prisma.ClientNoticeScalarWhereInput[]
  OR?: Prisma.ClientNoticeScalarWhereInput[]
  NOT?: Prisma.ClientNoticeScalarWhereInput | Prisma.ClientNoticeScalarWhereInput[]
  id?: Prisma.IntFilter<"ClientNotice"> | number
  title?: Prisma.StringFilter<"ClientNotice"> | string
  content?: Prisma.StringFilter<"ClientNotice"> | string
  noticeType?: Prisma.IntFilter<"ClientNotice"> | number
  priorityLevel?: Prisma.IntFilter<"ClientNotice"> | number
  publishStartTime?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
  publishEndTime?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
  pageCode?: Prisma.StringNullableFilter<"ClientNotice"> | string | null
  popupBackgroundImage?: Prisma.StringNullableFilter<"ClientNotice"> | string | null
  isPublished?: Prisma.BoolFilter<"ClientNotice"> | boolean
  enablePlatform?: Prisma.IntFilter<"ClientNotice"> | number
  isPinned?: Prisma.BoolFilter<"ClientNotice"> | boolean
  showAsPopup?: Prisma.BoolFilter<"ClientNotice"> | boolean
  order?: Prisma.IntFilter<"ClientNotice"> | number
  readCount?: Prisma.IntFilter<"ClientNotice"> | number
  createdAt?: Prisma.DateTimeFilter<"ClientNotice"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ClientNotice"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"ClientNotice"> | Date | string | null
}

export type ClientNoticeCreateManyClientPageInput = {
  id?: number
  title: string
  content: string
  noticeType?: number
  priorityLevel?: number
  publishStartTime?: Date | string | null
  publishEndTime?: Date | string | null
  popupBackgroundImage?: string | null
  isPublished?: boolean
  enablePlatform: number
  isPinned?: boolean
  showAsPopup?: boolean
  order?: number
  readCount?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type ClientNoticeUpdateWithoutClientPageInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  noticeType?: Prisma.IntFieldUpdateOperationsInput | number
  priorityLevel?: Prisma.IntFieldUpdateOperationsInput | number
  publishStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishEndTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  popupBackgroundImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enablePlatform?: Prisma.IntFieldUpdateOperationsInput | number
  isPinned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  showAsPopup?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  readCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientNoticeUncheckedUpdateWithoutClientPageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  noticeType?: Prisma.IntFieldUpdateOperationsInput | number
  priorityLevel?: Prisma.IntFieldUpdateOperationsInput | number
  publishStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishEndTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  popupBackgroundImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enablePlatform?: Prisma.IntFieldUpdateOperationsInput | number
  isPinned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  showAsPopup?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  readCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type ClientNoticeUncheckedUpdateManyWithoutClientPageInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  noticeType?: Prisma.IntFieldUpdateOperationsInput | number
  priorityLevel?: Prisma.IntFieldUpdateOperationsInput | number
  publishStartTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  publishEndTime?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  popupBackgroundImage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPublished?: Prisma.BoolFieldUpdateOperationsInput | boolean
  enablePlatform?: Prisma.IntFieldUpdateOperationsInput | number
  isPinned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  showAsPopup?: Prisma.BoolFieldUpdateOperationsInput | boolean
  order?: Prisma.IntFieldUpdateOperationsInput | number
  readCount?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type ClientNoticeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  noticeType?: boolean
  priorityLevel?: boolean
  publishStartTime?: boolean
  publishEndTime?: boolean
  pageCode?: boolean
  popupBackgroundImage?: boolean
  isPublished?: boolean
  enablePlatform?: boolean
  isPinned?: boolean
  showAsPopup?: boolean
  order?: boolean
  readCount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  clientPage?: boolean | Prisma.ClientNotice$clientPageArgs<ExtArgs>
}, ExtArgs["result"]["clientNotice"]>

export type ClientNoticeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  noticeType?: boolean
  priorityLevel?: boolean
  publishStartTime?: boolean
  publishEndTime?: boolean
  pageCode?: boolean
  popupBackgroundImage?: boolean
  isPublished?: boolean
  enablePlatform?: boolean
  isPinned?: boolean
  showAsPopup?: boolean
  order?: boolean
  readCount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  clientPage?: boolean | Prisma.ClientNotice$clientPageArgs<ExtArgs>
}, ExtArgs["result"]["clientNotice"]>

export type ClientNoticeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  noticeType?: boolean
  priorityLevel?: boolean
  publishStartTime?: boolean
  publishEndTime?: boolean
  pageCode?: boolean
  popupBackgroundImage?: boolean
  isPublished?: boolean
  enablePlatform?: boolean
  isPinned?: boolean
  showAsPopup?: boolean
  order?: boolean
  readCount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  clientPage?: boolean | Prisma.ClientNotice$clientPageArgs<ExtArgs>
}, ExtArgs["result"]["clientNotice"]>

export type ClientNoticeSelectScalar = {
  id?: boolean
  title?: boolean
  content?: boolean
  noticeType?: boolean
  priorityLevel?: boolean
  publishStartTime?: boolean
  publishEndTime?: boolean
  pageCode?: boolean
  popupBackgroundImage?: boolean
  isPublished?: boolean
  enablePlatform?: boolean
  isPinned?: boolean
  showAsPopup?: boolean
  order?: boolean
  readCount?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type ClientNoticeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "content" | "noticeType" | "priorityLevel" | "publishStartTime" | "publishEndTime" | "pageCode" | "popupBackgroundImage" | "isPublished" | "enablePlatform" | "isPinned" | "showAsPopup" | "order" | "readCount" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["clientNotice"]>
export type ClientNoticeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  clientPage?: boolean | Prisma.ClientNotice$clientPageArgs<ExtArgs>
}
export type ClientNoticeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  clientPage?: boolean | Prisma.ClientNotice$clientPageArgs<ExtArgs>
}
export type ClientNoticeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  clientPage?: boolean | Prisma.ClientNotice$clientPageArgs<ExtArgs>
}

export type $ClientNoticePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ClientNotice"
  objects: {
    /**
     * 关联页面配置
     */
    clientPage: Prisma.$ClientPageConfigPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * 主键id
     */
    id: number
    /**
     * 标题
     */
    title: string
    /**
     * 内容详情
     */
    content: string
    /**
     * 通知类型（0:系统通知, 1:活动公告, 2:维护通知, 3:更新公告）
     */
    noticeType: number
    /**
     * 优先级（0:低优先级, 1:中等优先级, 2:高优先级, 3:紧急）
     */
    priorityLevel: number
    /**
     * 发布开始时间
     */
    publishStartTime: Date | null
    /**
     * 发布结束时间
     */
    publishEndTime: Date | null
    /**
     * 页面代码，点击公告跳转的页面
     */
    pageCode: string | null
    /**
     * 通知弹窗的背景图片
     */
    popupBackgroundImage: string | null
    /**
     * 发布状态（true:已发布, false:未发布）
     */
    isPublished: boolean
    /**
     * 启用的平台（bitmask：1=H5, 2=APP, 4=小程序）
     */
    enablePlatform: number
    /**
     * 是否置顶显示
     */
    isPinned: boolean
    /**
     * 是否弹窗显示
     */
    showAsPopup: boolean
    /**
     * 排序权重（数值越大越靠前）
     */
    order: number
    /**
     * 浏览次数
     */
    readCount: number
    /**
     * 创建时间
     */
    createdAt: Date
    /**
     * 更新时间
     */
    updatedAt: Date
    /**
     * 软删除时间
     */
    deletedAt: Date | null
  }, ExtArgs["result"]["clientNotice"]>
  composites: {}
}

export type ClientNoticeGetPayload<S extends boolean | null | undefined | ClientNoticeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload, S>

export type ClientNoticeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ClientNoticeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: ClientNoticeCountAggregateInputType | true
  }

export interface ClientNoticeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientNotice'], meta: { name: 'ClientNotice' } }
  /**
   * Find zero or one ClientNotice that matches the filter.
   * @param {ClientNoticeFindUniqueArgs} args - Arguments to find a ClientNotice
   * @example
   * // Get one ClientNotice
   * const clientNotice = await prisma.clientNotice.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClientNoticeFindUniqueArgs>(args: Prisma.SelectSubset<T, ClientNoticeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ClientNoticeClient<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ClientNotice that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClientNoticeFindUniqueOrThrowArgs} args - Arguments to find a ClientNotice
   * @example
   * // Get one ClientNotice
   * const clientNotice = await prisma.clientNotice.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClientNoticeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ClientNoticeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClientNoticeClient<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ClientNotice that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientNoticeFindFirstArgs} args - Arguments to find a ClientNotice
   * @example
   * // Get one ClientNotice
   * const clientNotice = await prisma.clientNotice.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClientNoticeFindFirstArgs>(args?: Prisma.SelectSubset<T, ClientNoticeFindFirstArgs<ExtArgs>>): Prisma.Prisma__ClientNoticeClient<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ClientNotice that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientNoticeFindFirstOrThrowArgs} args - Arguments to find a ClientNotice
   * @example
   * // Get one ClientNotice
   * const clientNotice = await prisma.clientNotice.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClientNoticeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ClientNoticeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ClientNoticeClient<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ClientNotices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientNoticeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ClientNotices
   * const clientNotices = await prisma.clientNotice.findMany()
   * 
   * // Get first 10 ClientNotices
   * const clientNotices = await prisma.clientNotice.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const clientNoticeWithIdOnly = await prisma.clientNotice.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ClientNoticeFindManyArgs>(args?: Prisma.SelectSubset<T, ClientNoticeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ClientNotice.
   * @param {ClientNoticeCreateArgs} args - Arguments to create a ClientNotice.
   * @example
   * // Create one ClientNotice
   * const ClientNotice = await prisma.clientNotice.create({
   *   data: {
   *     // ... data to create a ClientNotice
   *   }
   * })
   * 
   */
  create<T extends ClientNoticeCreateArgs>(args: Prisma.SelectSubset<T, ClientNoticeCreateArgs<ExtArgs>>): Prisma.Prisma__ClientNoticeClient<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ClientNotices.
   * @param {ClientNoticeCreateManyArgs} args - Arguments to create many ClientNotices.
   * @example
   * // Create many ClientNotices
   * const clientNotice = await prisma.clientNotice.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ClientNoticeCreateManyArgs>(args?: Prisma.SelectSubset<T, ClientNoticeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ClientNotices and returns the data saved in the database.
   * @param {ClientNoticeCreateManyAndReturnArgs} args - Arguments to create many ClientNotices.
   * @example
   * // Create many ClientNotices
   * const clientNotice = await prisma.clientNotice.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ClientNotices and only return the `id`
   * const clientNoticeWithIdOnly = await prisma.clientNotice.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ClientNoticeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ClientNoticeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ClientNotice.
   * @param {ClientNoticeDeleteArgs} args - Arguments to delete one ClientNotice.
   * @example
   * // Delete one ClientNotice
   * const ClientNotice = await prisma.clientNotice.delete({
   *   where: {
   *     // ... filter to delete one ClientNotice
   *   }
   * })
   * 
   */
  delete<T extends ClientNoticeDeleteArgs>(args: Prisma.SelectSubset<T, ClientNoticeDeleteArgs<ExtArgs>>): Prisma.Prisma__ClientNoticeClient<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ClientNotice.
   * @param {ClientNoticeUpdateArgs} args - Arguments to update one ClientNotice.
   * @example
   * // Update one ClientNotice
   * const clientNotice = await prisma.clientNotice.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ClientNoticeUpdateArgs>(args: Prisma.SelectSubset<T, ClientNoticeUpdateArgs<ExtArgs>>): Prisma.Prisma__ClientNoticeClient<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ClientNotices.
   * @param {ClientNoticeDeleteManyArgs} args - Arguments to filter ClientNotices to delete.
   * @example
   * // Delete a few ClientNotices
   * const { count } = await prisma.clientNotice.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ClientNoticeDeleteManyArgs>(args?: Prisma.SelectSubset<T, ClientNoticeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ClientNotices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientNoticeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ClientNotices
   * const clientNotice = await prisma.clientNotice.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ClientNoticeUpdateManyArgs>(args: Prisma.SelectSubset<T, ClientNoticeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ClientNotices and returns the data updated in the database.
   * @param {ClientNoticeUpdateManyAndReturnArgs} args - Arguments to update many ClientNotices.
   * @example
   * // Update many ClientNotices
   * const clientNotice = await prisma.clientNotice.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ClientNotices and only return the `id`
   * const clientNoticeWithIdOnly = await prisma.clientNotice.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ClientNoticeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ClientNoticeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ClientNotice.
   * @param {ClientNoticeUpsertArgs} args - Arguments to update or create a ClientNotice.
   * @example
   * // Update or create a ClientNotice
   * const clientNotice = await prisma.clientNotice.upsert({
   *   create: {
   *     // ... data to create a ClientNotice
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ClientNotice we want to update
   *   }
   * })
   */
  upsert<T extends ClientNoticeUpsertArgs>(args: Prisma.SelectSubset<T, ClientNoticeUpsertArgs<ExtArgs>>): Prisma.Prisma__ClientNoticeClient<runtime.Types.Result.GetResult<Prisma.$ClientNoticePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ClientNotices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientNoticeCountArgs} args - Arguments to filter ClientNotices to count.
   * @example
   * // Count the number of ClientNotices
   * const count = await prisma.clientNotice.count({
   *   where: {
   *     // ... the filter for the ClientNotices we want to count
   *   }
   * })
  **/
  count<T extends ClientNoticeCountArgs>(
    args?: Prisma.Subset<T, ClientNoticeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ClientNoticeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ClientNotice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientNoticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ClientNoticeAggregateArgs>(args: Prisma.Subset<T, ClientNoticeAggregateArgs>): Prisma.PrismaPromise<GetClientNoticeAggregateType<T>>

  /**
   * Group by ClientNotice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClientNoticeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ClientNoticeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClientNoticeGroupByArgs['orderBy'] }
      : { orderBy?: ClientNoticeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ClientNoticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientNoticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ClientNotice model
 */
readonly fields: ClientNoticeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ClientNotice.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClientNoticeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  clientPage<T extends Prisma.ClientNotice$clientPageArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClientNotice$clientPageArgs<ExtArgs>>): Prisma.Prisma__ClientPageConfigClient<runtime.Types.Result.GetResult<Prisma.$ClientPageConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ClientNotice model
 */
export interface ClientNoticeFieldRefs {
  readonly id: Prisma.FieldRef<"ClientNotice", 'Int'>
  readonly title: Prisma.FieldRef<"ClientNotice", 'String'>
  readonly content: Prisma.FieldRef<"ClientNotice", 'String'>
  readonly noticeType: Prisma.FieldRef<"ClientNotice", 'Int'>
  readonly priorityLevel: Prisma.FieldRef<"ClientNotice", 'Int'>
  readonly publishStartTime: Prisma.FieldRef<"ClientNotice", 'DateTime'>
  readonly publishEndTime: Prisma.FieldRef<"ClientNotice", 'DateTime'>
  readonly pageCode: Prisma.FieldRef<"ClientNotice", 'String'>
  readonly popupBackgroundImage: Prisma.FieldRef<"ClientNotice", 'String'>
  readonly isPublished: Prisma.FieldRef<"ClientNotice", 'Boolean'>
  readonly enablePlatform: Prisma.FieldRef<"ClientNotice", 'Int'>
  readonly isPinned: Prisma.FieldRef<"ClientNotice", 'Boolean'>
  readonly showAsPopup: Prisma.FieldRef<"ClientNotice", 'Boolean'>
  readonly order: Prisma.FieldRef<"ClientNotice", 'Int'>
  readonly readCount: Prisma.FieldRef<"ClientNotice", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ClientNotice", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ClientNotice", 'DateTime'>
  readonly deletedAt: Prisma.FieldRef<"ClientNotice", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ClientNotice findUnique
 */
export type ClientNoticeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * Filter, which ClientNotice to fetch.
   */
  where: Prisma.ClientNoticeWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice findUniqueOrThrow
 */
export type ClientNoticeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * Filter, which ClientNotice to fetch.
   */
  where: Prisma.ClientNoticeWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice findFirst
 */
export type ClientNoticeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * Filter, which ClientNotice to fetch.
   */
  where?: Prisma.ClientNoticeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClientNotices to fetch.
   */
  orderBy?: Prisma.ClientNoticeOrderByWithRelationInput | Prisma.ClientNoticeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ClientNotices.
   */
  cursor?: Prisma.ClientNoticeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` ClientNotices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClientNotices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ClientNotices.
   */
  distinct?: Prisma.ClientNoticeScalarFieldEnum | Prisma.ClientNoticeScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice findFirstOrThrow
 */
export type ClientNoticeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * Filter, which ClientNotice to fetch.
   */
  where?: Prisma.ClientNoticeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClientNotices to fetch.
   */
  orderBy?: Prisma.ClientNoticeOrderByWithRelationInput | Prisma.ClientNoticeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ClientNotices.
   */
  cursor?: Prisma.ClientNoticeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` ClientNotices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClientNotices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ClientNotices.
   */
  distinct?: Prisma.ClientNoticeScalarFieldEnum | Prisma.ClientNoticeScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice findMany
 */
export type ClientNoticeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * Filter, which ClientNotices to fetch.
   */
  where?: Prisma.ClientNoticeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ClientNotices to fetch.
   */
  orderBy?: Prisma.ClientNoticeOrderByWithRelationInput | Prisma.ClientNoticeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ClientNotices.
   */
  cursor?: Prisma.ClientNoticeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `±n` ClientNotices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ClientNotices.
   */
  skip?: number
  distinct?: Prisma.ClientNoticeScalarFieldEnum | Prisma.ClientNoticeScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice create
 */
export type ClientNoticeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * The data needed to create a ClientNotice.
   */
  data: Prisma.XOR<Prisma.ClientNoticeCreateInput, Prisma.ClientNoticeUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice createMany
 */
export type ClientNoticeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ClientNotices.
   */
  data: Prisma.ClientNoticeCreateManyInput | Prisma.ClientNoticeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ClientNotice createManyAndReturn
 */
export type ClientNoticeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * The data used to create many ClientNotices.
   */
  data: Prisma.ClientNoticeCreateManyInput | Prisma.ClientNoticeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ClientNotice update
 */
export type ClientNoticeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * The data needed to update a ClientNotice.
   */
  data: Prisma.XOR<Prisma.ClientNoticeUpdateInput, Prisma.ClientNoticeUncheckedUpdateInput>
  /**
   * Choose, which ClientNotice to update.
   */
  where: Prisma.ClientNoticeWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice updateMany
 */
export type ClientNoticeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ClientNotices.
   */
  data: Prisma.XOR<Prisma.ClientNoticeUpdateManyMutationInput, Prisma.ClientNoticeUncheckedUpdateManyInput>
  /**
   * Filter which ClientNotices to update
   */
  where?: Prisma.ClientNoticeWhereInput
  /**
   * Limit how many ClientNotices to update.
   */
  limit?: number
}

/**
 * ClientNotice updateManyAndReturn
 */
export type ClientNoticeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * The data used to update ClientNotices.
   */
  data: Prisma.XOR<Prisma.ClientNoticeUpdateManyMutationInput, Prisma.ClientNoticeUncheckedUpdateManyInput>
  /**
   * Filter which ClientNotices to update
   */
  where?: Prisma.ClientNoticeWhereInput
  /**
   * Limit how many ClientNotices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ClientNotice upsert
 */
export type ClientNoticeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * The filter to search for the ClientNotice to update in case it exists.
   */
  where: Prisma.ClientNoticeWhereUniqueInput
  /**
   * In case the ClientNotice found by the `where` argument doesn't exist, create a new ClientNotice with this data.
   */
  create: Prisma.XOR<Prisma.ClientNoticeCreateInput, Prisma.ClientNoticeUncheckedCreateInput>
  /**
   * In case the ClientNotice was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ClientNoticeUpdateInput, Prisma.ClientNoticeUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice delete
 */
export type ClientNoticeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
  /**
   * Filter which ClientNotice to delete.
   */
  where: Prisma.ClientNoticeWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * ClientNotice deleteMany
 */
export type ClientNoticeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ClientNotices to delete
   */
  where?: Prisma.ClientNoticeWhereInput
  /**
   * Limit how many ClientNotices to delete.
   */
  limit?: number
}

/**
 * ClientNotice.clientPage
 */
export type ClientNotice$clientPageArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientPageConfig
   */
  select?: Prisma.ClientPageConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientPageConfig
   */
  omit?: Prisma.ClientPageConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientPageConfigInclude<ExtArgs> | null
  where?: Prisma.ClientPageConfigWhereInput
}

/**
 * ClientNotice without action
 */
export type ClientNoticeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ClientNotice
   */
  select?: Prisma.ClientNoticeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ClientNotice
   */
  omit?: Prisma.ClientNoticeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientNoticeInclude<ExtArgs> | null
}
