
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
export const prismaVersion: PrismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  AdminUser: 'AdminUser',
  ClientConfig: 'ClientConfig',
  ClientNotice: 'ClientNotice',
  ClientPageConfig: 'ClientPageConfig',
  ClientUser: 'ClientUser',
  Dictionary: 'Dictionary',
  DictionaryItem: 'DictionaryItem',
  SystemRequestLog: 'SystemRequestLog',
  WorkAuthor: 'WorkAuthor',
  WorkCategory: 'WorkCategory',
  WorkComicAuthor: 'WorkComicAuthor',
  WorkComicCategory: 'WorkComicCategory',
  WorkComicChapter: 'WorkComicChapter',
  WorkComicVersion: 'WorkComicVersion',
  WorkComic: 'WorkComic'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "adminUser" | "clientConfig" | "clientNotice" | "clientPageConfig" | "clientUser" | "dictionary" | "dictionaryItem" | "systemRequestLog" | "workAuthor" | "workCategory" | "workComicAuthor" | "workComicCategory" | "workComicChapter" | "workComicVersion" | "workComic"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    AdminUser: {
      payload: Prisma.$AdminUserPayload<ExtArgs>
      fields: Prisma.AdminUserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AdminUserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AdminUserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>
        }
        findFirst: {
          args: Prisma.AdminUserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AdminUserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>
        }
        findMany: {
          args: Prisma.AdminUserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
        }
        create: {
          args: Prisma.AdminUserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>
        }
        createMany: {
          args: Prisma.AdminUserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AdminUserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
        }
        delete: {
          args: Prisma.AdminUserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>
        }
        update: {
          args: Prisma.AdminUserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>
        }
        deleteMany: {
          args: Prisma.AdminUserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AdminUserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AdminUserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>[]
        }
        upsert: {
          args: Prisma.AdminUserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AdminUserPayload>
        }
        aggregate: {
          args: Prisma.AdminUserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAdminUser>
        }
        groupBy: {
          args: Prisma.AdminUserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AdminUserGroupByOutputType>[]
        }
        count: {
          args: Prisma.AdminUserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AdminUserCountAggregateOutputType> | number
        }
      }
    }
    ClientConfig: {
      payload: Prisma.$ClientConfigPayload<ExtArgs>
      fields: Prisma.ClientConfigFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClientConfigFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClientConfigFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>
        }
        findFirst: {
          args: Prisma.ClientConfigFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClientConfigFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>
        }
        findMany: {
          args: Prisma.ClientConfigFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>[]
        }
        create: {
          args: Prisma.ClientConfigCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>
        }
        createMany: {
          args: Prisma.ClientConfigCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClientConfigCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>[]
        }
        delete: {
          args: Prisma.ClientConfigDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>
        }
        update: {
          args: Prisma.ClientConfigUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>
        }
        deleteMany: {
          args: Prisma.ClientConfigDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClientConfigUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClientConfigUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>[]
        }
        upsert: {
          args: Prisma.ClientConfigUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientConfigPayload>
        }
        aggregate: {
          args: Prisma.ClientConfigAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClientConfig>
        }
        groupBy: {
          args: Prisma.ClientConfigGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientConfigGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClientConfigCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientConfigCountAggregateOutputType> | number
        }
      }
    }
    ClientNotice: {
      payload: Prisma.$ClientNoticePayload<ExtArgs>
      fields: Prisma.ClientNoticeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClientNoticeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClientNoticeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>
        }
        findFirst: {
          args: Prisma.ClientNoticeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClientNoticeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>
        }
        findMany: {
          args: Prisma.ClientNoticeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>[]
        }
        create: {
          args: Prisma.ClientNoticeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>
        }
        createMany: {
          args: Prisma.ClientNoticeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClientNoticeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>[]
        }
        delete: {
          args: Prisma.ClientNoticeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>
        }
        update: {
          args: Prisma.ClientNoticeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>
        }
        deleteMany: {
          args: Prisma.ClientNoticeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClientNoticeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClientNoticeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>[]
        }
        upsert: {
          args: Prisma.ClientNoticeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientNoticePayload>
        }
        aggregate: {
          args: Prisma.ClientNoticeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClientNotice>
        }
        groupBy: {
          args: Prisma.ClientNoticeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientNoticeGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClientNoticeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientNoticeCountAggregateOutputType> | number
        }
      }
    }
    ClientPageConfig: {
      payload: Prisma.$ClientPageConfigPayload<ExtArgs>
      fields: Prisma.ClientPageConfigFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClientPageConfigFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClientPageConfigFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>
        }
        findFirst: {
          args: Prisma.ClientPageConfigFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClientPageConfigFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>
        }
        findMany: {
          args: Prisma.ClientPageConfigFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>[]
        }
        create: {
          args: Prisma.ClientPageConfigCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>
        }
        createMany: {
          args: Prisma.ClientPageConfigCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClientPageConfigCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>[]
        }
        delete: {
          args: Prisma.ClientPageConfigDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>
        }
        update: {
          args: Prisma.ClientPageConfigUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>
        }
        deleteMany: {
          args: Prisma.ClientPageConfigDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClientPageConfigUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClientPageConfigUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>[]
        }
        upsert: {
          args: Prisma.ClientPageConfigUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPageConfigPayload>
        }
        aggregate: {
          args: Prisma.ClientPageConfigAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClientPageConfig>
        }
        groupBy: {
          args: Prisma.ClientPageConfigGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientPageConfigGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClientPageConfigCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientPageConfigCountAggregateOutputType> | number
        }
      }
    }
    ClientUser: {
      payload: Prisma.$ClientUserPayload<ExtArgs>
      fields: Prisma.ClientUserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ClientUserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ClientUserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>
        }
        findFirst: {
          args: Prisma.ClientUserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ClientUserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>
        }
        findMany: {
          args: Prisma.ClientUserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>[]
        }
        create: {
          args: Prisma.ClientUserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>
        }
        createMany: {
          args: Prisma.ClientUserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ClientUserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>[]
        }
        delete: {
          args: Prisma.ClientUserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>
        }
        update: {
          args: Prisma.ClientUserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>
        }
        deleteMany: {
          args: Prisma.ClientUserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ClientUserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ClientUserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>[]
        }
        upsert: {
          args: Prisma.ClientUserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientUserPayload>
        }
        aggregate: {
          args: Prisma.ClientUserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateClientUser>
        }
        groupBy: {
          args: Prisma.ClientUserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientUserGroupByOutputType>[]
        }
        count: {
          args: Prisma.ClientUserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ClientUserCountAggregateOutputType> | number
        }
      }
    }
    Dictionary: {
      payload: Prisma.$DictionaryPayload<ExtArgs>
      fields: Prisma.DictionaryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DictionaryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DictionaryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>
        }
        findFirst: {
          args: Prisma.DictionaryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DictionaryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>
        }
        findMany: {
          args: Prisma.DictionaryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>[]
        }
        create: {
          args: Prisma.DictionaryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>
        }
        createMany: {
          args: Prisma.DictionaryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DictionaryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>[]
        }
        delete: {
          args: Prisma.DictionaryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>
        }
        update: {
          args: Prisma.DictionaryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>
        }
        deleteMany: {
          args: Prisma.DictionaryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DictionaryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DictionaryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>[]
        }
        upsert: {
          args: Prisma.DictionaryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryPayload>
        }
        aggregate: {
          args: Prisma.DictionaryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDictionary>
        }
        groupBy: {
          args: Prisma.DictionaryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DictionaryGroupByOutputType>[]
        }
        count: {
          args: Prisma.DictionaryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DictionaryCountAggregateOutputType> | number
        }
      }
    }
    DictionaryItem: {
      payload: Prisma.$DictionaryItemPayload<ExtArgs>
      fields: Prisma.DictionaryItemFieldRefs
      operations: {
        findUnique: {
          args: Prisma.DictionaryItemFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.DictionaryItemFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>
        }
        findFirst: {
          args: Prisma.DictionaryItemFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.DictionaryItemFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>
        }
        findMany: {
          args: Prisma.DictionaryItemFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>[]
        }
        create: {
          args: Prisma.DictionaryItemCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>
        }
        createMany: {
          args: Prisma.DictionaryItemCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.DictionaryItemCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>[]
        }
        delete: {
          args: Prisma.DictionaryItemDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>
        }
        update: {
          args: Prisma.DictionaryItemUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>
        }
        deleteMany: {
          args: Prisma.DictionaryItemDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.DictionaryItemUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.DictionaryItemUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>[]
        }
        upsert: {
          args: Prisma.DictionaryItemUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DictionaryItemPayload>
        }
        aggregate: {
          args: Prisma.DictionaryItemAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDictionaryItem>
        }
        groupBy: {
          args: Prisma.DictionaryItemGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DictionaryItemGroupByOutputType>[]
        }
        count: {
          args: Prisma.DictionaryItemCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DictionaryItemCountAggregateOutputType> | number
        }
      }
    }
    SystemRequestLog: {
      payload: Prisma.$SystemRequestLogPayload<ExtArgs>
      fields: Prisma.SystemRequestLogFieldRefs
      operations: {
        findUnique: {
          args: Prisma.SystemRequestLogFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.SystemRequestLogFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>
        }
        findFirst: {
          args: Prisma.SystemRequestLogFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.SystemRequestLogFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>
        }
        findMany: {
          args: Prisma.SystemRequestLogFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>[]
        }
        create: {
          args: Prisma.SystemRequestLogCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>
        }
        createMany: {
          args: Prisma.SystemRequestLogCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.SystemRequestLogCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>[]
        }
        delete: {
          args: Prisma.SystemRequestLogDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>
        }
        update: {
          args: Prisma.SystemRequestLogUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>
        }
        deleteMany: {
          args: Prisma.SystemRequestLogDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.SystemRequestLogUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.SystemRequestLogUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>[]
        }
        upsert: {
          args: Prisma.SystemRequestLogUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SystemRequestLogPayload>
        }
        aggregate: {
          args: Prisma.SystemRequestLogAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSystemRequestLog>
        }
        groupBy: {
          args: Prisma.SystemRequestLogGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SystemRequestLogGroupByOutputType>[]
        }
        count: {
          args: Prisma.SystemRequestLogCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SystemRequestLogCountAggregateOutputType> | number
        }
      }
    }
    WorkAuthor: {
      payload: Prisma.$WorkAuthorPayload<ExtArgs>
      fields: Prisma.WorkAuthorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkAuthorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkAuthorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>
        }
        findFirst: {
          args: Prisma.WorkAuthorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkAuthorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>
        }
        findMany: {
          args: Prisma.WorkAuthorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>[]
        }
        create: {
          args: Prisma.WorkAuthorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>
        }
        createMany: {
          args: Prisma.WorkAuthorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkAuthorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>[]
        }
        delete: {
          args: Prisma.WorkAuthorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>
        }
        update: {
          args: Prisma.WorkAuthorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>
        }
        deleteMany: {
          args: Prisma.WorkAuthorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkAuthorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkAuthorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>[]
        }
        upsert: {
          args: Prisma.WorkAuthorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkAuthorPayload>
        }
        aggregate: {
          args: Prisma.WorkAuthorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkAuthor>
        }
        groupBy: {
          args: Prisma.WorkAuthorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkAuthorGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkAuthorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkAuthorCountAggregateOutputType> | number
        }
      }
    }
    WorkCategory: {
      payload: Prisma.$WorkCategoryPayload<ExtArgs>
      fields: Prisma.WorkCategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkCategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkCategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>
        }
        findFirst: {
          args: Prisma.WorkCategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkCategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>
        }
        findMany: {
          args: Prisma.WorkCategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>[]
        }
        create: {
          args: Prisma.WorkCategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>
        }
        createMany: {
          args: Prisma.WorkCategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkCategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>[]
        }
        delete: {
          args: Prisma.WorkCategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>
        }
        update: {
          args: Prisma.WorkCategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>
        }
        deleteMany: {
          args: Prisma.WorkCategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkCategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkCategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>[]
        }
        upsert: {
          args: Prisma.WorkCategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkCategoryPayload>
        }
        aggregate: {
          args: Prisma.WorkCategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkCategory>
        }
        groupBy: {
          args: Prisma.WorkCategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkCategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkCategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkCategoryCountAggregateOutputType> | number
        }
      }
    }
    WorkComicAuthor: {
      payload: Prisma.$WorkComicAuthorPayload<ExtArgs>
      fields: Prisma.WorkComicAuthorFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkComicAuthorFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkComicAuthorFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>
        }
        findFirst: {
          args: Prisma.WorkComicAuthorFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkComicAuthorFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>
        }
        findMany: {
          args: Prisma.WorkComicAuthorFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>[]
        }
        create: {
          args: Prisma.WorkComicAuthorCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>
        }
        createMany: {
          args: Prisma.WorkComicAuthorCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkComicAuthorCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>[]
        }
        delete: {
          args: Prisma.WorkComicAuthorDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>
        }
        update: {
          args: Prisma.WorkComicAuthorUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>
        }
        deleteMany: {
          args: Prisma.WorkComicAuthorDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkComicAuthorUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkComicAuthorUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>[]
        }
        upsert: {
          args: Prisma.WorkComicAuthorUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicAuthorPayload>
        }
        aggregate: {
          args: Prisma.WorkComicAuthorAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkComicAuthor>
        }
        groupBy: {
          args: Prisma.WorkComicAuthorGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicAuthorGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkComicAuthorCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicAuthorCountAggregateOutputType> | number
        }
      }
    }
    WorkComicCategory: {
      payload: Prisma.$WorkComicCategoryPayload<ExtArgs>
      fields: Prisma.WorkComicCategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkComicCategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkComicCategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>
        }
        findFirst: {
          args: Prisma.WorkComicCategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkComicCategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>
        }
        findMany: {
          args: Prisma.WorkComicCategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>[]
        }
        create: {
          args: Prisma.WorkComicCategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>
        }
        createMany: {
          args: Prisma.WorkComicCategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkComicCategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>[]
        }
        delete: {
          args: Prisma.WorkComicCategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>
        }
        update: {
          args: Prisma.WorkComicCategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>
        }
        deleteMany: {
          args: Prisma.WorkComicCategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkComicCategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkComicCategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>[]
        }
        upsert: {
          args: Prisma.WorkComicCategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicCategoryPayload>
        }
        aggregate: {
          args: Prisma.WorkComicCategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkComicCategory>
        }
        groupBy: {
          args: Prisma.WorkComicCategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicCategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkComicCategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicCategoryCountAggregateOutputType> | number
        }
      }
    }
    WorkComicChapter: {
      payload: Prisma.$WorkComicChapterPayload<ExtArgs>
      fields: Prisma.WorkComicChapterFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkComicChapterFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkComicChapterFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>
        }
        findFirst: {
          args: Prisma.WorkComicChapterFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkComicChapterFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>
        }
        findMany: {
          args: Prisma.WorkComicChapterFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>[]
        }
        create: {
          args: Prisma.WorkComicChapterCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>
        }
        createMany: {
          args: Prisma.WorkComicChapterCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkComicChapterCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>[]
        }
        delete: {
          args: Prisma.WorkComicChapterDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>
        }
        update: {
          args: Prisma.WorkComicChapterUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>
        }
        deleteMany: {
          args: Prisma.WorkComicChapterDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkComicChapterUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkComicChapterUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>[]
        }
        upsert: {
          args: Prisma.WorkComicChapterUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicChapterPayload>
        }
        aggregate: {
          args: Prisma.WorkComicChapterAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkComicChapter>
        }
        groupBy: {
          args: Prisma.WorkComicChapterGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicChapterGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkComicChapterCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicChapterCountAggregateOutputType> | number
        }
      }
    }
    WorkComicVersion: {
      payload: Prisma.$WorkComicVersionPayload<ExtArgs>
      fields: Prisma.WorkComicVersionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkComicVersionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkComicVersionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>
        }
        findFirst: {
          args: Prisma.WorkComicVersionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkComicVersionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>
        }
        findMany: {
          args: Prisma.WorkComicVersionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>[]
        }
        create: {
          args: Prisma.WorkComicVersionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>
        }
        createMany: {
          args: Prisma.WorkComicVersionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkComicVersionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>[]
        }
        delete: {
          args: Prisma.WorkComicVersionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>
        }
        update: {
          args: Prisma.WorkComicVersionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>
        }
        deleteMany: {
          args: Prisma.WorkComicVersionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkComicVersionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkComicVersionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>[]
        }
        upsert: {
          args: Prisma.WorkComicVersionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicVersionPayload>
        }
        aggregate: {
          args: Prisma.WorkComicVersionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkComicVersion>
        }
        groupBy: {
          args: Prisma.WorkComicVersionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicVersionGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkComicVersionCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicVersionCountAggregateOutputType> | number
        }
      }
    }
    WorkComic: {
      payload: Prisma.$WorkComicPayload<ExtArgs>
      fields: Prisma.WorkComicFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WorkComicFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WorkComicFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>
        }
        findFirst: {
          args: Prisma.WorkComicFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WorkComicFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>
        }
        findMany: {
          args: Prisma.WorkComicFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>[]
        }
        create: {
          args: Prisma.WorkComicCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>
        }
        createMany: {
          args: Prisma.WorkComicCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WorkComicCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>[]
        }
        delete: {
          args: Prisma.WorkComicDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>
        }
        update: {
          args: Prisma.WorkComicUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>
        }
        deleteMany: {
          args: Prisma.WorkComicDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WorkComicUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WorkComicUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>[]
        }
        upsert: {
          args: Prisma.WorkComicUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WorkComicPayload>
        }
        aggregate: {
          args: Prisma.WorkComicAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWorkComic>
        }
        groupBy: {
          args: Prisma.WorkComicGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicGroupByOutputType>[]
        }
        count: {
          args: Prisma.WorkComicCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WorkComicCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const AdminUserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  avatar: 'avatar',
  mobile: 'mobile',
  isEnabled: 'isEnabled',
  role: 'role',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  loginFailCount: 'loginFailCount',
  isLocked: 'isLocked',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type AdminUserScalarFieldEnum = (typeof AdminUserScalarFieldEnum)[keyof typeof AdminUserScalarFieldEnum]


export const RelationLoadStrategy = {
  query: 'query',
  join: 'join'
} as const

export type RelationLoadStrategy = (typeof RelationLoadStrategy)[keyof typeof RelationLoadStrategy]


export const ClientConfigScalarFieldEnum = {
  id: 'id',
  appLogo: 'appLogo',
  appName: 'appName',
  appDesc: 'appDesc',
  appVersion: 'appVersion',
  novelStatus: 'novelStatus',
  comicStatus: 'comicStatus',
  photoStatus: 'photoStatus',
  videoStatus: 'videoStatus',
  themeColor: 'themeColor',
  darkMode: 'darkMode',
  language: 'language',
  allowRegister: 'allowRegister',
  guestMode: 'guestMode',
  maintenanceMsg: 'maintenanceMsg',
  clientStatus: 'clientStatus',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
} as const

export type ClientConfigScalarFieldEnum = (typeof ClientConfigScalarFieldEnum)[keyof typeof ClientConfigScalarFieldEnum]


export const ClientNoticeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  noticeType: 'noticeType',
  priorityLevel: 'priorityLevel',
  publishStartTime: 'publishStartTime',
  publishEndTime: 'publishEndTime',
  pageCode: 'pageCode',
  popupBackgroundImage: 'popupBackgroundImage',
  isPublished: 'isPublished',
  enablePlatform: 'enablePlatform',
  isPinned: 'isPinned',
  showAsPopup: 'showAsPopup',
  order: 'order',
  readCount: 'readCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type ClientNoticeScalarFieldEnum = (typeof ClientNoticeScalarFieldEnum)[keyof typeof ClientNoticeScalarFieldEnum]


export const ClientPageConfigScalarFieldEnum = {
  id: 'id',
  pageCode: 'pageCode',
  pagePath: 'pagePath',
  pageName: 'pageName',
  pageTitle: 'pageTitle',
  accessLevel: 'accessLevel',
  pageStatus: 'pageStatus',
  description: 'description',
  accessCount: 'accessCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type ClientPageConfigScalarFieldEnum = (typeof ClientPageConfigScalarFieldEnum)[keyof typeof ClientPageConfigScalarFieldEnum]


export const ClientUserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  nickname: 'nickname',
  avatarUrl: 'avatarUrl',
  phoneNumber: 'phoneNumber',
  emailAddress: 'emailAddress',
  isEnabled: 'isEnabled',
  genderType: 'genderType',
  birthDate: 'birthDate',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type ClientUserScalarFieldEnum = (typeof ClientUserScalarFieldEnum)[keyof typeof ClientUserScalarFieldEnum]


export const DictionaryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  cover: 'cover',
  isEnabled: 'isEnabled',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type DictionaryScalarFieldEnum = (typeof DictionaryScalarFieldEnum)[keyof typeof DictionaryScalarFieldEnum]


export const DictionaryItemScalarFieldEnum = {
  id: 'id',
  dictionaryCode: 'dictionaryCode',
  name: 'name',
  code: 'code',
  order: 'order',
  cover: 'cover',
  isEnabled: 'isEnabled',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type DictionaryItemScalarFieldEnum = (typeof DictionaryItemScalarFieldEnum)[keyof typeof DictionaryItemScalarFieldEnum]


export const SystemRequestLogScalarFieldEnum = {
  id: 'id',
  username: 'username',
  userId: 'userId',
  ipAddress: 'ipAddress',
  ipLocation: 'ipLocation',
  responseCode: 'responseCode',
  responseMessage: 'responseMessage',
  httpMethod: 'httpMethod',
  requestPath: 'requestPath',
  operationDescription: 'operationDescription',
  duration: 'duration',
  userAgent: 'userAgent',
  requestParams: 'requestParams',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type SystemRequestLogScalarFieldEnum = (typeof SystemRequestLogScalarFieldEnum)[keyof typeof SystemRequestLogScalarFieldEnum]


export const WorkAuthorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  avatar: 'avatar',
  description: 'description',
  isEnabled: 'isEnabled',
  roles: 'roles',
  nationality: 'nationality',
  gender: 'gender',
  worksCount: 'worksCount',
  followersCount: 'followersCount',
  featured: 'featured',
  socialLinks: 'socialLinks',
  remark: 'remark',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type WorkAuthorScalarFieldEnum = (typeof WorkAuthorScalarFieldEnum)[keyof typeof WorkAuthorScalarFieldEnum]


export const WorkCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  icon: 'icon',
  popularity: 'popularity',
  popularityWeight: 'popularityWeight',
  order: 'order',
  novelCount: 'novelCount',
  comicCount: 'comicCount',
  imageSetCount: 'imageSetCount',
  illustrationCount: 'illustrationCount',
  isEnabled: 'isEnabled',
  contentTypes: 'contentTypes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type WorkCategoryScalarFieldEnum = (typeof WorkCategoryScalarFieldEnum)[keyof typeof WorkCategoryScalarFieldEnum]


export const WorkComicAuthorScalarFieldEnum = {
  id: 'id',
  comicId: 'comicId',
  authorId: 'authorId',
  roleType: 'roleType',
  isPrimary: 'isPrimary',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type WorkComicAuthorScalarFieldEnum = (typeof WorkComicAuthorScalarFieldEnum)[keyof typeof WorkComicAuthorScalarFieldEnum]


export const WorkComicCategoryScalarFieldEnum = {
  comicId: 'comicId',
  categoryId: 'categoryId',
  isPrimary: 'isPrimary',
  weight: 'weight',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type WorkComicCategoryScalarFieldEnum = (typeof WorkComicCategoryScalarFieldEnum)[keyof typeof WorkComicCategoryScalarFieldEnum]


export const WorkComicChapterScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  isPublished: 'isPublished',
  comicId: 'comicId',
  versionId: 'versionId',
  chapterNumber: 'chapterNumber',
  readRule: 'readRule',
  purchaseAmount: 'purchaseAmount',
  contents: 'contents',
  isPreview: 'isPreview',
  publishAt: 'publishAt',
  viewCount: 'viewCount',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  remark: 'remark',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
} as const

export type WorkComicChapterScalarFieldEnum = (typeof WorkComicChapterScalarFieldEnum)[keyof typeof WorkComicChapterScalarFieldEnum]


export const WorkComicVersionScalarFieldEnum = {
  id: 'id',
  comicId: 'comicId',
  versionName: 'versionName',
  language: 'language',
  translatorGroup: 'translatorGroup',
  description: 'description',
  isRecommended: 'isRecommended',
  isPublished: 'isPublished',
  publishAt: 'publishAt',
  lastUpdated: 'lastUpdated',
  totalViews: 'totalViews',
  favoriteCount: 'favoriteCount',
  likeCount: 'likeCount',
  rating: 'rating',
  ratingCount: 'ratingCount',
  readRule: 'readRule',
  purchaseAmount: 'purchaseAmount',
  copyright: 'copyright',
  disclaimer: 'disclaimer',
  remark: 'remark',
  sortOrder: 'sortOrder',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type WorkComicVersionScalarFieldEnum = (typeof WorkComicVersionScalarFieldEnum)[keyof typeof WorkComicVersionScalarFieldEnum]


export const WorkComicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  alias: 'alias',
  cover: 'cover',
  popularity: 'popularity',
  popularityWeight: 'popularityWeight',
  language: 'language',
  region: 'region',
  ageRating: 'ageRating',
  isPublished: 'isPublished',
  publishAt: 'publishAt',
  lastUpdated: 'lastUpdated',
  description: 'description',
  publisher: 'publisher',
  originalSource: 'originalSource',
  serialStatus: 'serialStatus',
  totalChapters: 'totalChapters',
  totalViews: 'totalViews',
  favoriteCount: 'favoriteCount',
  commentCount: 'commentCount',
  likeCount: 'likeCount',
  rating: 'rating',
  ratingCount: 'ratingCount',
  canDownload: 'canDownload',
  canComment: 'canComment',
  readRule: 'readRule',
  purchaseAmount: 'purchaseAmount',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  recommendWeight: 'recommendWeight',
  isRecommended: 'isRecommended',
  isHot: 'isHot',
  isNew: 'isNew',
  copyright: 'copyright',
  disclaimer: 'disclaimer',
  remark: 'remark',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type WorkComicScalarFieldEnum = (typeof WorkComicScalarFieldEnum)[keyof typeof WorkComicScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references
 */


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  adminUser?: Prisma.AdminUserOmit
  clientConfig?: Prisma.ClientConfigOmit
  clientNotice?: Prisma.ClientNoticeOmit
  clientPageConfig?: Prisma.ClientPageConfigOmit
  clientUser?: Prisma.ClientUserOmit
  dictionary?: Prisma.DictionaryOmit
  dictionaryItem?: Prisma.DictionaryItemOmit
  systemRequestLog?: Prisma.SystemRequestLogOmit
  workAuthor?: Prisma.WorkAuthorOmit
  workCategory?: Prisma.WorkCategoryOmit
  workComicAuthor?: Prisma.WorkComicAuthorOmit
  workComicCategory?: Prisma.WorkComicCategoryOmit
  workComicChapter?: Prisma.WorkComicChapterOmit
  workComicVersion?: Prisma.WorkComicVersionOmit
  workComic?: Prisma.WorkComicOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

